Search.setIndex({"docnames": ["API/_autosummary/deepr.config.assert_no_macros", "API/_autosummary/deepr.config.fill_macros", "API/_autosummary/deepr.config.fill_references", "API/_autosummary/deepr.config.from_config", "API/_autosummary/deepr.config.ismacro", "API/_autosummary/deepr.config.isreference", "API/_autosummary/deepr.config.parse_config", "API/_autosummary/deepr.exporters.BestCheckpoint", "API/_autosummary/deepr.exporters.Exporter", "API/_autosummary/deepr.exporters.SaveVariables", "API/_autosummary/deepr.exporters.SavedModel", "API/_autosummary/deepr.hooks.EarlyStoppingHookFactory", "API/_autosummary/deepr.hooks.EstimatorHookFactory", "API/_autosummary/deepr.hooks.LoggingTensorHookFactory", "API/_autosummary/deepr.hooks.MaxResidentMemory", "API/_autosummary/deepr.hooks.ResidentMemory", "API/_autosummary/deepr.hooks.StepsPerSecHook", "API/_autosummary/deepr.hooks.SummarySaverHookFactory", "API/_autosummary/deepr.hooks.TensorHookFactory", "API/_autosummary/deepr.initializers.CheckpointInitializer", "API/_autosummary/deepr.io.HDFSFileSystem", "API/_autosummary/deepr.io.ParquetDataset", "API/_autosummary/deepr.io.Path", "API/_autosummary/deepr.io.read_json", "API/_autosummary/deepr.jobs.CleanupCheckpoints", "API/_autosummary/deepr.jobs.CopyDir", "API/_autosummary/deepr.jobs.ExportXlaModelMetadata", "API/_autosummary/deepr.jobs.GridSampler", "API/_autosummary/deepr.jobs.Job", "API/_autosummary/deepr.jobs.LogMetric", "API/_autosummary/deepr.jobs.MLFlowSaveConfigs", "API/_autosummary/deepr.jobs.MLFlowSaveInfo", "API/_autosummary/deepr.jobs.OptimizeSavedModel", "API/_autosummary/deepr.jobs.ParamsSampler", "API/_autosummary/deepr.jobs.ParamsTuner", "API/_autosummary/deepr.jobs.Pipeline", "API/_autosummary/deepr.jobs.Sampler", "API/_autosummary/deepr.jobs.SaveDataset", "API/_autosummary/deepr.jobs.Trainer", "API/_autosummary/deepr.jobs.YarnLauncher", "API/_autosummary/deepr.jobs.YarnTrainer", "API/_autosummary/deepr.layers.ActiveMode", "API/_autosummary/deepr.layers.Add", "API/_autosummary/deepr.layers.Average", "API/_autosummary/deepr.layers.BPR", "API/_autosummary/deepr.layers.BooleanMask", "API/_autosummary/deepr.layers.ClickRank", "API/_autosummary/deepr.layers.Concat", "API/_autosummary/deepr.layers.DAG", "API/_autosummary/deepr.layers.Dense", "API/_autosummary/deepr.layers.DotProduct", "API/_autosummary/deepr.layers.Embedding", "API/_autosummary/deepr.layers.Equal", "API/_autosummary/deepr.layers.Identity", "API/_autosummary/deepr.layers.IsMinSize", "API/_autosummary/deepr.layers.Layer", "API/_autosummary/deepr.layers.LogicalAnd", "API/_autosummary/deepr.layers.Lookup", "API/_autosummary/deepr.layers.LookupFromFile", "API/_autosummary/deepr.layers.LookupFromMapping", "API/_autosummary/deepr.layers.LookupIndexToString", "API/_autosummary/deepr.layers.MaskedBPR", "API/_autosummary/deepr.layers.NotEqual", "API/_autosummary/deepr.layers.Parallel", "API/_autosummary/deepr.layers.Product", "API/_autosummary/deepr.layers.Rename", "API/_autosummary/deepr.layers.Select", "API/_autosummary/deepr.layers.Sequential", "API/_autosummary/deepr.layers.Slice", "API/_autosummary/deepr.layers.SliceFirst", "API/_autosummary/deepr.layers.SliceLast", "API/_autosummary/deepr.layers.StringJoin", "API/_autosummary/deepr.layers.Sum", "API/_autosummary/deepr.layers.ToDense", "API/_autosummary/deepr.layers.ToFloat", "API/_autosummary/deepr.layers.WeightedAverage", "API/_autosummary/deepr.macros.MLFlowInit", "API/_autosummary/deepr.metrics.DecayMean", "API/_autosummary/deepr.metrics.FiniteMean", "API/_autosummary/deepr.metrics.LastValue", "API/_autosummary/deepr.metrics.MaxValue", "API/_autosummary/deepr.metrics.Mean", "API/_autosummary/deepr.metrics.Metric", "API/_autosummary/deepr.metrics.StepCounter", "API/_autosummary/deepr.metrics.VariableValue", "API/_autosummary/deepr.optimizers.Optimizer", "API/_autosummary/deepr.optimizers.TensorflowOptimizer", "API/_autosummary/deepr.prepros.Batch", "API/_autosummary/deepr.prepros.Filter", "API/_autosummary/deepr.prepros.FromExample", "API/_autosummary/deepr.prepros.Map", "API/_autosummary/deepr.prepros.PaddedBatch", "API/_autosummary/deepr.prepros.Prefetch", "API/_autosummary/deepr.prepros.Prepro", "API/_autosummary/deepr.prepros.Repeat", "API/_autosummary/deepr.prepros.Serial", "API/_autosummary/deepr.prepros.Shuffle", "API/_autosummary/deepr.prepros.TFRecordSequenceExample", "API/_autosummary/deepr.prepros.TableInitializer", "API/_autosummary/deepr.prepros.Take", "API/_autosummary/deepr.prepros.ToExample", "API/_autosummary/deepr.readers.GeneratorReader", "API/_autosummary/deepr.readers.Reader", "API/_autosummary/deepr.readers.TFRecordReader", "API/_autosummary/deepr.utils.Field", "API/_autosummary/deepr.utils.TableContext", "API/_autosummary/deepr.utils.TensorType", "API/_autosummary/deepr.utils.chunks", "API/_autosummary/deepr.utils.dict_to_item", "API/_autosummary/deepr.utils.get_feedable_tensors", "API/_autosummary/deepr.utils.get_fetchable_tensors", "API/_autosummary/deepr.utils.handle_exceptions", "API/_autosummary/deepr.utils.import_graph_def", "API/_autosummary/deepr.utils.index_to_string_table_from_file", "API/_autosummary/deepr.utils.item_to_dict", "API/_autosummary/deepr.utils.make_same_shape", "API/_autosummary/deepr.utils.msb_lsb_to_str", "API/_autosummary/deepr.utils.progress", "API/_autosummary/deepr.utils.save_variables_in_ckpt", "API/_autosummary/deepr.utils.str_to_msb_lsb", "API/_autosummary/deepr.utils.table_from_file", "API/_autosummary/deepr.utils.table_from_mapping", "API/_autosummary/deepr.utils.to_flat_tuple", "API/_autosummary/deepr.vocab.read", "API/_autosummary/deepr.vocab.size", "API/_autosummary/deepr.vocab.write", "API/_autosummary/deepr.writers.TFRecordWriter", "API/_autosummary/deepr.writers.Writer", "API/core", "CHANGELOG", "CONTRIBUTING", "README", "_source/deepr", "_source/deepr.cli", "_source/deepr.config", "_source/deepr.examples", "_source/deepr.examples.movielens", "_source/deepr.examples.movielens.jobs", "_source/deepr.examples.movielens.layers", "_source/deepr.examples.movielens.macros", "_source/deepr.examples.movielens.metrics", "_source/deepr.examples.movielens.prepros", "_source/deepr.examples.movielens.readers", "_source/deepr.examples.movielens.utils", "_source/deepr.examples.multiply", "_source/deepr.examples.multiply.jobs", "_source/deepr.examples.multiply.layers", "_source/deepr.examples.multiply.macros", "_source/deepr.examples.multiply.prepros", "_source/deepr.exporters", "_source/deepr.hooks", "_source/deepr.initializers", "_source/deepr.io", "_source/deepr.jobs", "_source/deepr.layers", "_source/deepr.macros", "_source/deepr.metrics", "_source/deepr.optimizers", "_source/deepr.predictors", "_source/deepr.prepros", "_source/deepr.readers", "_source/deepr.utils", "_source/deepr.vocab", "_source/deepr.writers", "_source/modules", "getting_started/advanced", "getting_started/config", "getting_started/pipeline", "getting_started/quickstart", "getting_started/tuning", "index", "movielens/movielens"], "filenames": ["API/_autosummary/deepr.config.assert_no_macros.rst", "API/_autosummary/deepr.config.fill_macros.rst", "API/_autosummary/deepr.config.fill_references.rst", "API/_autosummary/deepr.config.from_config.rst", "API/_autosummary/deepr.config.ismacro.rst", "API/_autosummary/deepr.config.isreference.rst", "API/_autosummary/deepr.config.parse_config.rst", "API/_autosummary/deepr.exporters.BestCheckpoint.rst", "API/_autosummary/deepr.exporters.Exporter.rst", "API/_autosummary/deepr.exporters.SaveVariables.rst", "API/_autosummary/deepr.exporters.SavedModel.rst", "API/_autosummary/deepr.hooks.EarlyStoppingHookFactory.rst", "API/_autosummary/deepr.hooks.EstimatorHookFactory.rst", "API/_autosummary/deepr.hooks.LoggingTensorHookFactory.rst", "API/_autosummary/deepr.hooks.MaxResidentMemory.rst", "API/_autosummary/deepr.hooks.ResidentMemory.rst", "API/_autosummary/deepr.hooks.StepsPerSecHook.rst", "API/_autosummary/deepr.hooks.SummarySaverHookFactory.rst", "API/_autosummary/deepr.hooks.TensorHookFactory.rst", "API/_autosummary/deepr.initializers.CheckpointInitializer.rst", "API/_autosummary/deepr.io.HDFSFileSystem.rst", "API/_autosummary/deepr.io.ParquetDataset.rst", "API/_autosummary/deepr.io.Path.rst", "API/_autosummary/deepr.io.read_json.rst", "API/_autosummary/deepr.jobs.CleanupCheckpoints.rst", "API/_autosummary/deepr.jobs.CopyDir.rst", "API/_autosummary/deepr.jobs.ExportXlaModelMetadata.rst", "API/_autosummary/deepr.jobs.GridSampler.rst", "API/_autosummary/deepr.jobs.Job.rst", "API/_autosummary/deepr.jobs.LogMetric.rst", "API/_autosummary/deepr.jobs.MLFlowSaveConfigs.rst", "API/_autosummary/deepr.jobs.MLFlowSaveInfo.rst", "API/_autosummary/deepr.jobs.OptimizeSavedModel.rst", "API/_autosummary/deepr.jobs.ParamsSampler.rst", "API/_autosummary/deepr.jobs.ParamsTuner.rst", "API/_autosummary/deepr.jobs.Pipeline.rst", "API/_autosummary/deepr.jobs.Sampler.rst", "API/_autosummary/deepr.jobs.SaveDataset.rst", "API/_autosummary/deepr.jobs.Trainer.rst", "API/_autosummary/deepr.jobs.YarnLauncher.rst", "API/_autosummary/deepr.jobs.YarnTrainer.rst", "API/_autosummary/deepr.layers.ActiveMode.rst", "API/_autosummary/deepr.layers.Add.rst", "API/_autosummary/deepr.layers.Average.rst", "API/_autosummary/deepr.layers.BPR.rst", "API/_autosummary/deepr.layers.BooleanMask.rst", "API/_autosummary/deepr.layers.ClickRank.rst", "API/_autosummary/deepr.layers.Concat.rst", "API/_autosummary/deepr.layers.DAG.rst", "API/_autosummary/deepr.layers.Dense.rst", "API/_autosummary/deepr.layers.DotProduct.rst", "API/_autosummary/deepr.layers.Embedding.rst", "API/_autosummary/deepr.layers.Equal.rst", "API/_autosummary/deepr.layers.Identity.rst", "API/_autosummary/deepr.layers.IsMinSize.rst", "API/_autosummary/deepr.layers.Layer.rst", "API/_autosummary/deepr.layers.LogicalAnd.rst", "API/_autosummary/deepr.layers.Lookup.rst", "API/_autosummary/deepr.layers.LookupFromFile.rst", "API/_autosummary/deepr.layers.LookupFromMapping.rst", "API/_autosummary/deepr.layers.LookupIndexToString.rst", "API/_autosummary/deepr.layers.MaskedBPR.rst", "API/_autosummary/deepr.layers.NotEqual.rst", "API/_autosummary/deepr.layers.Parallel.rst", "API/_autosummary/deepr.layers.Product.rst", "API/_autosummary/deepr.layers.Rename.rst", "API/_autosummary/deepr.layers.Select.rst", "API/_autosummary/deepr.layers.Sequential.rst", "API/_autosummary/deepr.layers.Slice.rst", "API/_autosummary/deepr.layers.SliceFirst.rst", "API/_autosummary/deepr.layers.SliceLast.rst", "API/_autosummary/deepr.layers.StringJoin.rst", "API/_autosummary/deepr.layers.Sum.rst", "API/_autosummary/deepr.layers.ToDense.rst", "API/_autosummary/deepr.layers.ToFloat.rst", "API/_autosummary/deepr.layers.WeightedAverage.rst", "API/_autosummary/deepr.macros.MLFlowInit.rst", "API/_autosummary/deepr.metrics.DecayMean.rst", "API/_autosummary/deepr.metrics.FiniteMean.rst", "API/_autosummary/deepr.metrics.LastValue.rst", "API/_autosummary/deepr.metrics.MaxValue.rst", "API/_autosummary/deepr.metrics.Mean.rst", "API/_autosummary/deepr.metrics.Metric.rst", "API/_autosummary/deepr.metrics.StepCounter.rst", "API/_autosummary/deepr.metrics.VariableValue.rst", "API/_autosummary/deepr.optimizers.Optimizer.rst", "API/_autosummary/deepr.optimizers.TensorflowOptimizer.rst", "API/_autosummary/deepr.prepros.Batch.rst", "API/_autosummary/deepr.prepros.Filter.rst", "API/_autosummary/deepr.prepros.FromExample.rst", "API/_autosummary/deepr.prepros.Map.rst", "API/_autosummary/deepr.prepros.PaddedBatch.rst", "API/_autosummary/deepr.prepros.Prefetch.rst", "API/_autosummary/deepr.prepros.Prepro.rst", "API/_autosummary/deepr.prepros.Repeat.rst", "API/_autosummary/deepr.prepros.Serial.rst", "API/_autosummary/deepr.prepros.Shuffle.rst", "API/_autosummary/deepr.prepros.TFRecordSequenceExample.rst", "API/_autosummary/deepr.prepros.TableInitializer.rst", "API/_autosummary/deepr.prepros.Take.rst", "API/_autosummary/deepr.prepros.ToExample.rst", "API/_autosummary/deepr.readers.GeneratorReader.rst", "API/_autosummary/deepr.readers.Reader.rst", "API/_autosummary/deepr.readers.TFRecordReader.rst", "API/_autosummary/deepr.utils.Field.rst", "API/_autosummary/deepr.utils.TableContext.rst", "API/_autosummary/deepr.utils.TensorType.rst", "API/_autosummary/deepr.utils.chunks.rst", "API/_autosummary/deepr.utils.dict_to_item.rst", "API/_autosummary/deepr.utils.get_feedable_tensors.rst", "API/_autosummary/deepr.utils.get_fetchable_tensors.rst", "API/_autosummary/deepr.utils.handle_exceptions.rst", "API/_autosummary/deepr.utils.import_graph_def.rst", "API/_autosummary/deepr.utils.index_to_string_table_from_file.rst", "API/_autosummary/deepr.utils.item_to_dict.rst", "API/_autosummary/deepr.utils.make_same_shape.rst", "API/_autosummary/deepr.utils.msb_lsb_to_str.rst", "API/_autosummary/deepr.utils.progress.rst", "API/_autosummary/deepr.utils.save_variables_in_ckpt.rst", "API/_autosummary/deepr.utils.str_to_msb_lsb.rst", "API/_autosummary/deepr.utils.table_from_file.rst", "API/_autosummary/deepr.utils.table_from_mapping.rst", "API/_autosummary/deepr.utils.to_flat_tuple.rst", "API/_autosummary/deepr.vocab.read.rst", "API/_autosummary/deepr.vocab.size.rst", "API/_autosummary/deepr.vocab.write.rst", "API/_autosummary/deepr.writers.TFRecordWriter.rst", "API/_autosummary/deepr.writers.Writer.rst", "API/core.rst", "CHANGELOG.rst", "CONTRIBUTING.rst", "README.rst", "_source/deepr.rst", "_source/deepr.cli.rst", "_source/deepr.config.rst", "_source/deepr.examples.rst", "_source/deepr.examples.movielens.rst", "_source/deepr.examples.movielens.jobs.rst", "_source/deepr.examples.movielens.layers.rst", "_source/deepr.examples.movielens.macros.rst", "_source/deepr.examples.movielens.metrics.rst", "_source/deepr.examples.movielens.prepros.rst", "_source/deepr.examples.movielens.readers.rst", "_source/deepr.examples.movielens.utils.rst", "_source/deepr.examples.multiply.rst", "_source/deepr.examples.multiply.jobs.rst", "_source/deepr.examples.multiply.layers.rst", "_source/deepr.examples.multiply.macros.rst", "_source/deepr.examples.multiply.prepros.rst", "_source/deepr.exporters.rst", "_source/deepr.hooks.rst", "_source/deepr.initializers.rst", "_source/deepr.io.rst", "_source/deepr.jobs.rst", "_source/deepr.layers.rst", "_source/deepr.macros.rst", "_source/deepr.metrics.rst", "_source/deepr.optimizers.rst", "_source/deepr.predictors.rst", "_source/deepr.prepros.rst", "_source/deepr.readers.rst", "_source/deepr.utils.rst", "_source/deepr.vocab.rst", "_source/deepr.writers.rst", "_source/modules.rst", "getting_started/advanced.ipynb", "getting_started/config.ipynb", "getting_started/pipeline.ipynb", "getting_started/quickstart.ipynb", "getting_started/tuning.ipynb", "index.rst", "movielens/movielens.ipynb"], "titles": ["deepr.config.assert_no_macros", "deepr.config.fill_macros", "deepr.config.fill_references", "deepr.config.from_config", "deepr.config.ismacro", "deepr.config.isreference", "deepr.config.parse_config", "deepr.exporters.BestCheckpoint", "deepr.exporters.Exporter", "deepr.exporters.SaveVariables", "deepr.exporters.SavedModel", "deepr.hooks.EarlyStoppingHookFactory", "deepr.hooks.EstimatorHookFactory", "deepr.hooks.LoggingTensorHookFactory", "deepr.hooks.MaxResidentMemory", "deepr.hooks.ResidentMemory", "deepr.hooks.StepsPerSecHook", "deepr.hooks.SummarySaverHookFactory", "deepr.hooks.TensorHookFactory", "deepr.initializers.CheckpointInitializer", "deepr.io.HDFSFileSystem", "deepr.io.ParquetDataset", "deepr.io.Path", "deepr.io.read_json", "deepr.jobs.CleanupCheckpoints", "deepr.jobs.CopyDir", "deepr.jobs.ExportXlaModelMetadata", "deepr.jobs.GridSampler", "deepr.jobs.Job", "deepr.jobs.LogMetric", "deepr.jobs.MLFlowSaveConfigs", "deepr.jobs.MLFlowSaveInfo", "deepr.jobs.OptimizeSavedModel", "deepr.jobs.ParamsSampler", "deepr.jobs.ParamsTuner", "deepr.jobs.Pipeline", "deepr.jobs.Sampler", "deepr.jobs.SaveDataset", "deepr.jobs.Trainer", "deepr.jobs.YarnLauncher", "deepr.jobs.YarnTrainer", "deepr.layers.ActiveMode", "deepr.layers.Add", "deepr.layers.Average", "deepr.layers.BPR", "deepr.layers.BooleanMask", "deepr.layers.ClickRank", "deepr.layers.Concat", "deepr.layers.DAG", "deepr.layers.Dense", "deepr.layers.DotProduct", "deepr.layers.Embedding", "deepr.layers.Equal", "deepr.layers.Identity", "deepr.layers.IsMinSize", "deepr.layers.Layer", "deepr.layers.LogicalAnd", "deepr.layers.Lookup", "deepr.layers.LookupFromFile", "deepr.layers.LookupFromMapping", "deepr.layers.LookupIndexToString", "deepr.layers.MaskedBPR", "deepr.layers.NotEqual", "deepr.layers.Parallel", "deepr.layers.Product", "deepr.layers.Rename", "deepr.layers.Select", "deepr.layers.Sequential", "deepr.layers.Slice", "deepr.layers.SliceFirst", "deepr.layers.SliceLast", "deepr.layers.StringJoin", "deepr.layers.Sum", "deepr.layers.ToDense", "deepr.layers.ToFloat", "deepr.layers.WeightedAverage", "deepr.macros.MLFlowInit", "deepr.metrics.DecayMean", "deepr.metrics.FiniteMean", "deepr.metrics.LastValue", "deepr.metrics.MaxValue", "deepr.metrics.Mean", "deepr.metrics.Metric", "deepr.metrics.StepCounter", "deepr.metrics.VariableValue", "deepr.optimizers.Optimizer", "deepr.optimizers.TensorflowOptimizer", "deepr.prepros.Batch", "deepr.prepros.Filter", "deepr.prepros.FromExample", "deepr.prepros.Map", "deepr.prepros.PaddedBatch", "deepr.prepros.Prefetch", "deepr.prepros.Prepro", "deepr.prepros.Repeat", "deepr.prepros.Serial", "deepr.prepros.Shuffle", "deepr.prepros.TFRecordSequenceExample", "deepr.prepros.TableInitializer", "deepr.prepros.Take", "deepr.prepros.ToExample", "deepr.readers.GeneratorReader", "deepr.readers.Reader", "deepr.readers.TFRecordReader", "deepr.utils.Field", "deepr.utils.TableContext", "deepr.utils.TensorType", "deepr.utils.chunks", "deepr.utils.dict_to_item", "deepr.utils.get_feedable_tensors", "deepr.utils.get_fetchable_tensors", "deepr.utils.handle_exceptions", "deepr.utils.import_graph_def", "deepr.utils.index_to_string_table_from_file", "deepr.utils.item_to_dict", "deepr.utils.make_same_shape", "deepr.utils.msb_lsb_to_str", "deepr.utils.progress", "deepr.utils.save_variables_in_ckpt", "deepr.utils.str_to_msb_lsb", "deepr.utils.table_from_file", "deepr.utils.table_from_mapping", "deepr.utils.to_flat_tuple", "deepr.vocab.read", "deepr.vocab.size", "deepr.vocab.write", "deepr.writers.TFRecordWriter", "deepr.writers.Writer", "DeepR", "Changelog", "Contributing", "DeepR: Build and Train Deep Learning Pipelines for Production", "deepr package", "deepr.cli package", "deepr.config package", "deepr.examples package", "deepr.examples.movielens package", "deepr.examples.movielens.jobs package", "deepr.examples.movielens.layers package", "deepr.examples.movielens.macros package", "deepr.examples.movielens.metrics package", "deepr.examples.movielens.prepros package", "deepr.examples.movielens.readers package", "deepr.examples.movielens.utils package", "deepr.examples.multiply package", "deepr.examples.multiply.jobs package", "deepr.examples.multiply.layers package", "deepr.examples.multiply.macros package", "deepr.examples.multiply.prepros package", "deepr.exporters package", "deepr.hooks package", "deepr.initializers package", "deepr.io package", "deepr.jobs package", "deepr.layers package", "deepr.macros package", "deepr.metrics package", "deepr.optimizers package", "deepr.predictors package", "deepr.prepros package", "deepr.readers package", "deepr.utils package", "deepr.vocab package", "deepr.writers package", "deepr", "Advanced", "Config", "Pipeline", "Quickstart", "Hyper Parameter Tuning", "DeepR reference documentation", "MovieLens Example"], "terms": {"item": [0, 1, 2, 3, 4, 5, 114, 122, 123, 124, 125, 134, 137, 138, 153, 161, 162, 168, 171], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "rais": [0, 1, 2, 3, 6, 32, 48, 133, 134, 153, 154, 159, 161, 165], "valueerror": [0, 2, 3, 6, 133, 134, 153, 161], "ha": [0, 38, 129, 133, 134, 150, 153, 165, 169], "macro": [0, 1, 4, 6, 30, 34, 129, 131, 132, 133, 135, 136, 144, 153, 164, 169, 170], "paramet": [0, 1, 2, 6, 33, 36, 38, 55, 76, 109, 110, 112, 115, 122, 123, 124, 125, 128, 129, 130, 133, 134, 138, 141, 146, 150, 153, 154, 155, 156, 158, 161, 162, 165, 166, 168, 170], "ani": [0, 1, 2, 3, 13, 38, 42, 55, 59, 60, 90, 104, 122, 128, 133, 134, 150, 152, 153, 154, 159, 161, 166, 167, 168], "check": [0, 1, 129, 130, 131, 134, 167, 168, 171], "If": [0, 2, 3, 6, 7, 11, 13, 16, 55, 58, 59, 60, 63, 88, 90, 91, 95, 104, 115, 130, 131, 133, 134, 149, 150, 153, 154, 159, 161, 165], "none": [1, 2, 6, 11, 13, 16, 17, 21, 30, 31, 33, 37, 38, 41, 49, 51, 53, 55, 58, 59, 60, 65, 66, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 104, 113, 120, 121, 126, 129, 130, 133, 134, 137, 138, 139, 140, 141, 142, 145, 146, 147, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 171], "creat": [1, 32, 38, 55, 57, 58, 60, 84, 91, 92, 98, 99, 113, 120, 121, 128, 133, 134, 138, 150, 152, 153, 154, 156, 159, 161, 165, 166, 167, 168, 169, 171], "whose": [1, 7, 55, 134, 149, 154, 159, 165], "param": [1, 2, 4, 6, 34, 128, 133, 134, 153, 166, 169], "present": [1, 134, 153], "ar": [1, 2, 7, 48, 55, 65, 87, 88, 90, 91, 93, 94, 96, 128, 130, 131, 133, 134, 137, 149, 154, 159, 165, 166, 167, 168, 169, 171], "fill": [1, 2, 6, 134, 166, 169], "return": [1, 2, 3, 4, 5, 6, 13, 23, 48, 50, 65, 84, 88, 90, 91, 93, 98, 106, 109, 110, 114, 115, 122, 123, 124, 128, 129, 130, 133, 134, 137, 138, 141, 146, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 166, 167, 168, 171], "new": [1, 2, 32, 38, 55, 93, 98, 129, 131, 133, 134, 139, 147, 150, 153, 154, 159, 165, 167, 168, 169, 171], "dictionari": [1, 2, 6, 23, 38, 48, 55, 88, 90, 91, 100, 108, 114, 128, 129, 131, 133, 134, 152, 153, 154, 156, 159, 161, 165, 166, 167, 168], "tupl": [1, 2, 38, 55, 95, 104, 108, 114, 122, 129, 134, 137, 138, 141, 146, 150, 153, 154, 159, 161, 165, 166, 168], "list": [1, 2, 10, 13, 21, 26, 32, 35, 38, 88, 90, 93, 95, 103, 109, 110, 115, 122, 123, 129, 131, 133, 134, 137, 145, 149, 150, 152, 153, 156, 158, 159, 160, 161, 162, 166, 167, 169, 171], "depend": [1, 2, 55, 88, 90, 93, 129, 131, 134, 154, 159, 166], "": [1, 2, 55, 104, 133, 134, 154, 161, 165, 166, 167, 168, 169, 171], "type": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 16, 21, 23, 26, 32, 38, 55, 57, 58, 59, 60, 84, 86, 87, 88, 90, 91, 92, 94, 95, 96, 99, 101, 103, 104, 106, 109, 110, 114, 115, 122, 123, 124, 129, 131, 133, 134, 137, 138, 140, 141, 146, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169], "string": [1, 4, 5, 32, 55, 60, 71, 104, 122, 125, 131, 132, 133, 134, 152, 153, 160, 161, 162, 164, 166, 167], "us": [1, 2, 7, 11, 13, 20, 21, 32, 38, 48, 55, 65, 66, 90, 92, 93, 98, 99, 101, 104, 122, 128, 129, 130, 134, 137, 149, 150, 152, 153, 154, 159, 160, 161, 165, 166, 168, 169, 170, 171], "syntax": [1, 2, 134, 166], "replac": [1, 2, 48, 133, 134, 154, 169], "relev": [1, 2, 134, 138], "entri": [1, 2, 104, 133, 134, 154, 161, 167, 168], "from": [1, 2, 3, 6, 7, 9, 11, 20, 21, 26, 27, 38, 55, 58, 59, 60, 66, 88, 90, 91, 93, 106, 107, 109, 110, 112, 113, 117, 120, 121, 123, 124, 128, 129, 130, 133, 134, 137, 145, 149, 150, 152, 153, 154, 156, 159, 160, 161, 162, 165, 166, 167, 168, 169, 171], "onli": [1, 38, 55, 88, 91, 115, 129, 131, 134, 150, 153, 154, 159, 161, 165, 166, 167, 168, 169], "IF": [1, 134], "found": [1, 2, 6, 32, 134, 153, 161], "warn": [1, 32, 90, 133, 134, 153, 159, 166, 169], "No": [1, 55, 134, 153, 154, 166], "except": [1, 111, 132, 134, 153, 164], "i": [1, 2, 3, 4, 5, 7, 11, 13, 16, 22, 32, 38, 48, 50, 55, 66, 84, 87, 88, 90, 91, 92, 93, 94, 96, 104, 105, 128, 129, 131, 133, 134, 137, 138, 149, 150, 152, 153, 154, 156, 159, 161, 165, 166, 167, 168, 169, 171], "valu": [1, 11, 29, 38, 44, 52, 59, 60, 61, 62, 79, 80, 84, 92, 94, 104, 129, 132, 133, 134, 149, 150, 153, 154, 156, 159, 160, 161, 165, 166, 169, 171], "assert_no_macro": [1, 132, 134], "contain": [1, 26, 32, 55, 134, 145, 153, 154, 156, 158, 165, 166, 167, 171], "dict": [1, 2, 6, 13, 23, 26, 32, 38, 55, 59, 109, 110, 114, 134, 139, 147, 149, 150, 152, 153, 154, 155, 156, 158, 161, 165, 166, 168, 169], "str": [1, 2, 7, 9, 10, 11, 13, 16, 21, 26, 32, 38, 55, 58, 59, 60, 84, 86, 87, 88, 90, 91, 93, 94, 96, 103, 104, 109, 110, 112, 123, 124, 125, 130, 133, 134, 137, 138, 140, 141, 145, 146, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171], "option": [1, 2, 6, 11, 13, 16, 21, 38, 55, 86, 87, 88, 90, 91, 93, 94, 95, 96, 115, 129, 130, 133, 134, 137, 138, 140, 141, 145, 146, 150, 152, 153, 154, 156, 157, 158, 159, 161, 165, 166, 168, 171], "refer": [2, 5, 6, 55, 132, 133, 153, 154, 164, 168, 169], "all": [2, 13, 32, 87, 88, 90, 91, 94, 96, 98, 128, 129, 134, 150, 153, 154, 159, 165, 166, 168, 171], "fail": [2, 134], "ref": [2, 134], "typic": [2, 38, 55, 93, 134, 153, 154, 159, 168], "map": [2, 32, 58, 59, 60, 87, 88, 91, 93, 94, 95, 96, 98, 105, 109, 110, 121, 124, 128, 129, 132, 134, 137, 153, 154, 159, 161, 162, 171], "name": [2, 7, 9, 11, 13, 16, 26, 32, 48, 49, 53, 55, 58, 59, 60, 65, 83, 84, 86, 98, 104, 105, 109, 110, 112, 113, 120, 121, 129, 132, 133, 134, 136, 140, 149, 150, 152, 153, 154, 156, 157, 158, 159, 161, 165, 166, 167, 168, 169, 171], "object": [2, 38, 108, 114, 128, 133, 134, 150, 151, 152, 153, 161, 165, 167, 170], "some": [2, 6, 32, 38, 48, 55, 88, 90, 93, 128, 129, 134, 150, 153, 154, 159, 165, 166, 167, 168, 169], "instanti": [3, 13, 38, 55, 133, 134, 150, 153, 154, 166, 167, 168], "valid": [3, 128, 134, 137, 152, 156, 165, 171], "unexpect": [3, 129, 134], "eval": [3, 7, 38, 55, 88, 90, 93, 134, 149, 153, 154, 159, 165, 166, 167, 168, 169, 171], "method": [3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 126, 127, 128, 129, 134, 138, 141, 146, 150, 154, 159, 168], "true": [4, 5, 7, 13, 16, 21, 25, 39, 40, 51, 55, 58, 59, 60, 88, 90, 95, 103, 104, 105, 115, 134, 137, 138, 142, 149, 150, 152, 153, 154, 156, 159, 160, 161, 165, 167, 169, 171], "look": [4, 5, 131, 133, 134, 154, 165, 167, 168, 169, 171], "like": [4, 5, 55, 122, 130, 131, 134, 152, 154, 159, 161, 165, 166, 167, 168, 169], "bool": [4, 5, 7, 13, 16, 58, 59, 60, 88, 90, 95, 103, 104, 115, 130, 134, 137, 149, 150, 152, 153, 154, 156, 159, 160, 161, 171], "exampl": [6, 21, 22, 38, 48, 50, 55, 63, 65, 66, 88, 89, 90, 91, 93, 95, 98, 103, 104, 105, 122, 129, 132, 134, 150, 152, 153, 154, 159, 160, 161, 164, 165, 166, 167, 168, 169], "import": [6, 20, 21, 55, 88, 90, 93, 95, 98, 105, 107, 112, 117, 129, 131, 134, 152, 153, 154, 156, 159, 161, 165, 166, 167, 168, 169, 171], "x": [6, 48, 55, 63, 65, 66, 88, 90, 93, 122, 134, 145, 148, 153, 154, 159, 161, 165, 167, 168, 170], "y": [6, 48, 55, 63, 65, 66, 134, 153, 154, 165, 166, 167, 168, 169], "2": [6, 21, 48, 50, 63, 64, 65, 66, 71, 72, 93, 95, 98, 105, 107, 117, 122, 130, 131, 134, 137, 145, 152, 153, 154, 159, 161, 165, 166, 168, 169, 170], "1": [6, 21, 27, 33, 47, 48, 55, 63, 65, 66, 88, 90, 92, 93, 94, 95, 98, 105, 107, 117, 118, 120, 122, 130, 131, 134, 137, 138, 141, 146, 152, 153, 154, 159, 161, 165, 166, 168, 169, 170], "pars": [6, 89, 134, 159, 161, 166, 169], "without": [6, 134], "class": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 126, 127, 128, 129, 137, 138, 139, 140, 141, 142, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169], "metric": [7, 11, 13, 16, 29, 38, 129, 132, 135, 136, 149, 150, 153, 161, 164, 168, 170, 171], "mode": [7, 11, 37, 38, 41, 48, 55, 87, 88, 89, 90, 91, 93, 94, 96, 100, 129, 131, 132, 134, 138, 141, 146, 149, 150, 152, 153, 154, 159, 165, 166, 167, 168, 171], "bestmod": [7, 11, 132, 149, 150], "decreas": [7, 11, 132, 149, 150, 165], "use_mlflow": [7, 13, 16, 29, 30, 31, 39, 76, 132, 136, 137, 149, 150, 153, 155, 165, 171], "fals": [7, 13, 16, 21, 25, 29, 30, 31, 39, 58, 59, 60, 76, 87, 88, 89, 90, 91, 113, 120, 121, 137, 138, 149, 150, 152, 153, 154, 155, 156, 159, 161, 165, 167, 169, 171], "tag": [7, 13, 16, 132, 149, 150], "training_best_step": [7, 149], "overrid": [7, 13, 55, 90, 93, 149, 150, 154, 159], "checkpoint": [7, 9, 11, 19, 24, 118, 132, 137, 149, 150, 151, 153, 164, 165], "inform": [7, 91, 128, 131, 149, 159, 165, 168], "point": [7, 133, 149, 152, 165, 167, 168], "best": [7, 149, 165, 171], "The": [7, 21, 38, 48, 55, 58, 60, 66, 93, 105, 128, 129, 131, 133, 137, 149, 152, 153, 154, 159, 161, 165, 166, 167, 168, 169, 171], "one": [7, 55, 88, 95, 123, 124, 125, 130, 134, 137, 138, 141, 146, 149, 154, 159, 161, 162, 165, 166, 168], "step": [7, 11, 13, 16, 95, 132, 149, 150, 153, 154, 159, 164, 165, 168, 169, 170], "closest": [7, 149, 171], "evalu": [7, 11, 38, 129, 131, 132, 134, 135, 136, 149, 150, 164, 165, 166, 167, 168, 170], "retriev": [7, 109, 110, 134, 137, 149, 152, 156, 161, 169, 171], "summari": [7, 17, 132, 149, 164, 165], "locat": [7, 149, 152], "select": [7, 48, 65, 88, 90, 129, 132, 149, 154, 159, 165], "mean": [7, 77, 78, 99, 122, 128, 131, 132, 149, 152, 159, 161, 164, 165, 167, 171], "lower": [7, 11, 149, 150, 171], "better": [7, 11, 149, 150, 171], "mlflow": [7, 13, 16, 30, 31, 76, 129, 130, 131, 132, 133, 149, 150, 153, 155, 156, 164, 165, 166, 169, 171], "log": [7, 13, 16, 29, 44, 61, 117, 129, 130, 145, 149, 150, 153, 154, 161, 165, 166, 167, 168, 169, 170, 171], "__init__": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 126, 127, 128, 130, 154, 159, 166, 167, 168, 169], "base": [8, 48, 55, 82, 93, 127, 129, 132, 137, 138, 139, 140, 141, 142, 145, 146, 147, 151, 152, 155, 161, 164, 165, 166, 167, 168, 169, 170], "path_vari": [9, 132, 149, 171], "variable_nam": [9, 51, 132, 138, 149, 154, 171], "chunk_siz": [9, 21, 37, 107, 126, 132, 149, 152, 153, 161, 163], "100000": [9, 149], "compress": [9, 132, 149, 152], "snappi": [9, 21, 149, 152, 171], "save": [9, 10, 26, 31, 37, 118, 145, 149, 153, 158, 161, 165, 169, 171], "variabl": [9, 32, 55, 84, 118, 129, 130, 132, 149, 150, 153, 154, 155, 161, 164, 165, 166, 168, 171], "parquet": [9, 21, 132, 149, 164, 171], "support": [9, 21, 129, 149, 152, 166, 167], "chunk": [9, 21, 129, 132, 149, 152, 161], "path": [9, 10, 20, 21, 23, 26, 31, 32, 37, 38, 58, 60, 103, 112, 113, 118, 120, 123, 124, 125, 126, 129, 132, 133, 135, 136, 137, 144, 149, 153, 154, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171], "directori": [9, 10, 21, 25, 26, 32, 38, 103, 129, 133, 145, 149, 152, 153, 158, 160, 168], "tensorflow": [9, 86, 91, 98, 104, 105, 106, 109, 110, 128, 129, 131, 137, 145, 149, 150, 153, 156, 157, 158, 159, 161, 165, 166, 167, 168, 169, 171], "graph": [9, 26, 32, 38, 48, 55, 109, 110, 112, 128, 129, 131, 132, 149, 150, 153, 154, 164, 165, 168, 171], "number": [9, 55, 87, 90, 92, 94, 99, 103, 137, 149, 150, 154, 159, 160, 165, 168, 171], "element": [9, 87, 88, 90, 91, 92, 93, 95, 96, 99, 149, 159], "per": [9, 16, 123, 124, 125, 149, 150, 162, 165], "int": [9, 11, 13, 16, 26, 55, 60, 87, 90, 91, 92, 94, 96, 99, 103, 124, 130, 137, 140, 145, 149, 150, 153, 154, 159, 160, 162, 166, 167, 171], "default": [9, 13, 16, 25, 38, 48, 55, 59, 60, 75, 86, 87, 88, 90, 91, 94, 95, 96, 104, 129, 132, 134, 135, 141, 144, 149, 150, 152, 153, 154, 155, 157, 159, 161, 167], "path_saved_model": [10, 32, 132, 136, 137, 144, 145, 149, 153, 165, 171], "field": [10, 37, 89, 91, 100, 129, 132, 135, 136, 137, 149, 153, 159, 164, 165, 167, 171], "model": [10, 26, 38, 48, 55, 129, 130, 131, 132, 135, 138, 144, 145, 149, 153, 154, 158, 165, 166, 167, 169, 170, 171], "saved_model": [10, 132, 164, 165, 171], "build": [10, 55, 93, 129, 135, 137, 142, 144, 149, 154, 156, 159, 160, 165, 166, 168, 169, 170], "input_receiver_fn": [10, 149], "max_steps_without_improv": [11, 132, 150, 165, 171], "min_step": [11, 132, 150, 165, 171], "0": [11, 44, 55, 61, 75, 77, 88, 90, 93, 95, 107, 117, 122, 137, 138, 150, 153, 154, 156, 159, 161, 165, 166, 167, 168, 169, 170, 171], "run_every_sec": [11, 132, 150], "run_every_step": [11, 132, 150, 165, 171], "final_step": [11, 132, 150, 165, 171], "earli": [11, 13, 149, 150, 165], "stop": [11, 13, 149, 150, 165, 169, 171], "factori": [11, 12, 13, 18, 32, 38, 150, 153, 165, 171], "read": [11, 21, 23, 32, 103, 128, 129, 130, 131, 132, 150, 152, 153, 160, 162, 167, 169, 171], "improv": [11, 150, 165, 171], "thi": [11, 13, 16, 32, 55, 65, 90, 91, 98, 99, 105, 122, 128, 129, 130, 131, 133, 150, 153, 154, 156, 159, 161, 165, 167, 168, 169, 171], "mani": [11, 150, 165], "do": [11, 13, 16, 55, 90, 150, 152, 153, 154, 159, 165, 167, 171], "attempt": [11, 150], "increas": [11, 132, 149, 150, 171], "given": [11, 32, 88, 90, 104, 129, 138, 150, 153, 154, 159, 161, 165, 166, 167, 168, 171], "run": [11, 13, 16, 38, 39, 40, 48, 76, 98, 128, 129, 131, 132, 133, 136, 137, 144, 145, 150, 153, 154, 155, 159, 161, 165, 166, 168, 169, 170], "everi": [11, 129, 150, 165, 169], "second": [11, 16, 129, 150, 165], "either": [11, 38, 55, 88, 131, 133, 134, 150, 153, 154, 159, 168], "should": [11, 13, 38, 55, 66, 88, 90, 93, 125, 130, 150, 153, 154, 159, 162, 165, 166, 167, 169, 171], "set": [11, 38, 55, 76, 88, 90, 104, 132, 134, 137, 150, 153, 154, 155, 159, 161, 165, 167, 168, 169, 171], "global_step": [11, 13, 150, 165, 167, 168], "when": [11, 13, 16, 32, 66, 98, 129, 150, 153, 154, 159, 165, 166, 167, 168], "wai": [11, 48, 55, 66, 93, 104, 128, 131, 150, 154, 159, 161, 165, 166, 167, 168, 169], "signal": [11, 150, 165], "end": [11, 38, 65, 68, 128, 130, 150, 153, 154, 165], "train": [11, 38, 44, 55, 61, 88, 90, 93, 103, 104, 128, 129, 137, 138, 150, 153, 154, 157, 159, 160, 161, 165, 168, 170], "case": [11, 48, 55, 129, 131, 150, 154, 166], "distribut": [11, 150, 154, 165, 167, 171], "caus": [11, 150], "issu": [11, 129, 150, 166], "train_and_evalu": [11, 150], "estim": [12, 38, 55, 88, 90, 93, 129, 131, 149, 150, 153, 154, 159, 165, 167, 168], "tensor": [13, 17, 18, 32, 38, 42, 47, 48, 55, 56, 65, 74, 77, 78, 79, 80, 81, 100, 109, 110, 115, 122, 128, 129, 131, 132, 138, 140, 141, 146, 150, 153, 154, 156, 158, 159, 161, 165, 168, 171], "function": [13, 37, 38, 55, 57, 76, 88, 90, 93, 101, 105, 122, 128, 129, 131, 132, 133, 150, 153, 154, 155, 159, 160, 161, 165, 166, 171], "use_graphit": [13, 16, 132, 150, 155, 165, 171], "skip_after_step": [13, 16, 132, 150, 165, 171], "every_n_it": [13, 150, 165, 171], "every_n_sec": [13, 16, 150], "at_end": [13, 150, 165, 171], "formatt": [13, 30, 129, 132, 150, 153, 155], "_default_formatt": [13, 150], "parametr": [13, 55, 150, 154, 167], "creation": [13, 129, 150], "loggingtensorhook": [13, 132, 150, 165], "argument": [13, 32, 55, 86, 88, 90, 93, 95, 98, 129, 131, 150, 153, 154, 157, 159, 165, 167, 168, 170], "provid": [13, 55, 88, 90, 93, 105, 128, 131, 150, 154, 159, 161, 166, 167, 171], "keyword": [13, 150, 166, 167], "runtim": [13, 55, 58, 60, 88, 90, 150, 154, 159, 167], "scalar": [13, 84, 129, 150, 154, 156], "addit": [13, 90, 129, 150, 159, 165], "python": [13, 106, 129, 131, 137, 145, 150, 153, 156, 157, 161, 165, 166, 167, 169, 170], "each": [13, 38, 48, 58, 60, 90, 91, 94, 95, 133, 137, 150, 153, 154, 159, 171], "float": [13, 86, 137, 150, 157, 160, 166], "callabl": [13, 38, 57, 88, 90, 101, 137, 145, 150, 153, 154, 159, 160, 166, 168], "prefix": [13, 16, 129, 132, 150, 155, 161], "send": [13, 16, 128, 150, 165, 166], "graphit": [13, 16, 131, 132, 150, 155, 164, 165, 171], "after": [13, 16, 38, 95, 134, 150, 153, 159, 165, 167], "prevent": [13, 150], "outlier": [13, 150], "conjunct": [13, 150], "an": [13, 22, 32, 38, 48, 55, 58, 60, 88, 90, 93, 95, 129, 131, 150, 152, 153, 154, 159, 160, 161, 165, 166, 167, 168, 169, 171], "7": [13, 48, 150, 154, 165, 166, 167, 168, 169, 170], "digit": [13, 150], "precis": [13, 66, 137, 150, 154, 171], "unit": [14, 15, 49, 131, 150, 154, 165, 171], "gb": [14, 15, 150, 165, 171], "measur": [14, 15, 150], "maximum": [14, 150, 165], "resid": [14, 15, 150], "memori": [14, 15, 92, 132, 150, 153, 159], "current": [14, 15, 38, 39, 55, 112, 130, 131, 150, 152, 153, 154, 161, 165, 167], "process": [14, 15, 150, 159, 165], "batch_siz": [16, 87, 91, 132, 133, 141, 148, 150, 154, 159, 161, 165, 167, 168, 169, 171], "every_n_step": [16, 150, 165, 171], "100": [16, 21, 50, 150, 152, 153, 154, 165, 171], "output_dir": [16, 17, 150], "summary_writ": [16, 17, 150], "num_examples_per_sec": [16, 150], "batch": [16, 50, 89, 91, 129, 132, 140, 150, 154, 159, 161, 165, 167, 168, 169], "size": [16, 54, 60, 69, 70, 91, 95, 96, 129, 132, 150, 159, 162, 164, 165, 169, 171], "save_step": [17, 150, 165, 171], "save_sec": [17, 150], "scaffold": [17, 150], "saver": [17, 150], "path_init_ckpt": [19, 136, 137, 151], "assignment_map": [19, 151], "context": [20, 21, 105, 129, 152, 161], "awar": [20, 21, 131, 152], "pyarrow": [20, 152, 171], "hdf": [20, 22, 38, 129, 132, 153, 164, 167, 168], "open": [20, 21, 22, 132, 152, 171], "close": [20, 21, 22, 131, 132, 152, 161], "connect": [20, 21, 22, 152, 154], "thank": [20, 55, 98, 131, 152, 154, 159], "manag": [20, 21, 55, 105, 129, 152, 154, 161], "f": [20, 63, 152, 154, 167, 169, 171], "file": [20, 21, 22, 23, 26, 32, 58, 60, 103, 112, 113, 120, 123, 124, 125, 128, 129, 130, 131, 133, 142, 145, 152, 153, 154, 158, 159, 160, 161, 162, 165, 169, 171], "path_or_path": [21, 132, 152], "filesystem": [21, 22, 129, 132, 152], "metadata": [21, 26, 129, 152, 153, 165], "schema": [21, 152], "split_row_group": [21, 152], "validate_schema": [21, 152], "filter": [21, 93, 95, 128, 132, 137, 152, 154, 159], "metadata_nthread": [21, 152], "memory_map": [21, 152], "write": [21, 128, 129, 132, 133, 137, 152, 159, 162, 163, 166, 167, 171], "make": [21, 55, 115, 128, 129, 131, 152, 154, 161, 165, 167, 168, 171], "easier": [21, 152], "For": [21, 48, 50, 55, 63, 65, 66, 88, 90, 91, 93, 95, 122, 130, 131, 137, 150, 152, 154, 159, 161, 165, 166, 167, 168], "df": [21, 152, 171], "pd": [21, 152, 171], "datafram": [21, 152, 171], "data": [21, 38, 55, 88, 90, 93, 95, 98, 108, 129, 131, 137, 142, 145, 152, 153, 154, 159, 160, 161, 165, 167, 168, 169, 171], "col1": [21, 152], "col2": [21, 152], "3": [21, 48, 63, 93, 107, 130, 131, 141, 152, 154, 159, 161, 165, 166, 168, 169, 170], "4": [21, 48, 107, 137, 152, 153, 154, 161, 165, 166, 167, 168, 169, 170], "viewf": [21, 22, 152, 153, 167, 169], "root": [21, 152, 153, 167, 169], "foo": [21, 22, 130, 152, 153], "d": [21, 152, 153, 154, 169, 171], "write_panda": [21, 132, 152], "automat": [21, 22, 55, 104, 129, 133, 134, 152, 154, 156, 161, 169], "dataset": [21, 37, 38, 55, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 128, 129, 131, 137, 142, 145, 152, 153, 154, 159, 160, 163, 165, 170], "well": [21, 131, 152, 165, 171], "union": [21, 32, 55, 95, 103, 133, 137, 138, 141, 145, 146, 152, 153, 154, 158, 159, 160, 161], "infer": [21, 32, 104, 133, 135, 144, 152, 153, 161, 165, 171], "later": [21, 152, 171], "attribut": [21, 22, 24, 25, 26, 29, 30, 31, 32, 34, 35, 37, 38, 39, 40, 55, 86, 88, 89, 90, 93, 100, 103, 104, 129, 130, 154, 159, 166], "arg": [22, 152], "equival": [22, 105, 128, 152, 154, 159, 161, 166, 167, 168], "pathlib": [22, 152], "local": [22, 38, 129, 131, 133, 152, 153, 161, 168], "allow": [22, 65, 98, 129, 131, 150, 152, 154, 159, 165, 166, 168], "you": [22, 48, 55, 63, 65, 88, 90, 91, 93, 122, 130, 131, 150, 152, 153, 154, 159, 161, 165, 166, 167, 168, 169, 171], "work": [22, 152, 165, 167, 168], "agnost": [22, 152], "manner": [22, 152, 167], "bar": [22, 130, 152, 153], "baz": [22, 152], "parent": [22, 132, 152, 166], "mkdir": [22, 129, 132, 152, 171], "r": [22, 152, 171], "line": [22, 58, 60, 90, 123, 124, 125, 130, 152, 154, 159, 162, 170], "print": [22, 107, 117, 152, 161, 165, 166, 167, 168, 169, 171], "glob": [22, 129, 132, 152, 167], "is_fil": [22, 132, 152], "json": [23, 131, 132, 133, 164, 166, 167, 169], "jsonnet": [23, 152, 167], "path_model": [24, 38, 129, 132, 139, 144, 145, 147, 153, 165, 167, 168, 169, 171], "path_checkpoint": [24, 132, 153], "cleanup": [24, 153, 170], "target": [25, 129, 132, 136, 137, 138, 140, 152, 153, 171], "skip_copi": [25, 132, 153], "overwrit": [25, 129, 132, 153, 169], "copi": [25, 129, 152, 153], "destin": [25, 153], "path_optimized_model": [26, 32, 132, 153, 165], "path_metadata": [26, 132, 153, 165], "graph_nam": [26, 32, 129, 132, 144, 145, 153, 165], "metadata_nam": [26, 132, 153, 165], "feed_shap": [26, 132, 153, 165], "fetch_shap": [26, 132, 153, 165], "export": [26, 32, 38, 129, 132, 153, 158, 164, 168, 170, 171], "xla": [26, 129, 131, 153, 165], "compat": [26, 42, 56, 129, 153, 154], "optim": [26, 32, 38, 129, 131, 132, 153, 164, 165, 167, 169, 170, 171], "convert": [26, 32, 100, 108, 114, 116, 119, 122, 129, 137, 153, 159, 161], "protobuf": [26, 32, 131, 153, 171], "shape": [26, 42, 48, 50, 51, 55, 56, 101, 104, 115, 129, 132, 140, 153, 154, 156, 160, 161, 165, 167, 168, 171], "feed": [26, 32, 109, 132, 144, 145, 153, 158, 161, 165, 168], "expos": [26, 153], "fetch": [26, 32, 110, 129, 132, 144, 145, 153, 158, 161, 165], "param_grid": [27, 33, 153, 169], "repeat": [27, 33, 87, 93, 132, 153, 159, 165, 167, 168], "grid": [27, 153, 169], "sampler": [27, 33, 34, 132, 153, 169], "wrap": [27, 55, 65, 91, 128, 130, 138, 141, 146, 150, 153, 154, 159, 167], "parametergrid": [27, 153], "sklearn": [27, 153], "interfac": [28, 85, 102, 131, 153, 154, 157, 160], "kei": [29, 38, 55, 58, 59, 60, 88, 91, 108, 114, 128, 132, 133, 134, 153, 154, 159, 161, 166, 167, 168, 169], "config": [30, 39, 40, 129, 131, 132, 133, 153, 164, 170, 171], "macros_ev": [30, 132, 134, 153, 166], "upload": [30, 39, 153, 166, 167], "path_mlflow": [31, 132, 153], "run_id": [31, 76, 129, 132, 133, 153, 155, 161, 169], "run_uuid": [31, 132, 153], "experiment_id": [31, 132, 153, 155], "info": [31, 153, 165, 166, 167, 168, 169, 171], "new_nam": [32, 132, 153, 165], "blacklisted_vari": [32, 132, 153], "savedmodel": [32, 132, 149, 153, 158, 165, 171], "input": [32, 38, 41, 48, 49, 50, 53, 54, 55, 63, 65, 66, 95, 128, 129, 132, 136, 137, 138, 140, 148, 153, 154, 158, 159, 165, 168, 171], "renam": [32, 129, 132, 153, 154, 165], "node": [32, 48, 65, 66, 153, 154, 165], "error": [32, 48, 129, 153, 154, 159], "cannot": [32, 150, 153, 165], "placehold": [32, 153, 161], "remov": [32, 137, 153, 156, 161, 168], "other": [32, 38, 48, 55, 90, 91, 95, 122, 153, 154, 159, 161, 165, 166, 167, 168, 171], "final": [32, 133, 150, 152, 153, 159, 165, 167, 168], "freez": [32, 153], "sub": [32, 137, 153, 158], "produc": [32, 153, 165, 171], "output": [32, 38, 41, 48, 49, 55, 63, 65, 66, 90, 95, 101, 128, 129, 132, 153, 154, 158, 159, 160, 165, 168], "origin": [32, 94, 153, 159, 170], "recommend": [32, 92, 131, 133, 153, 159, 167, 171], "tf": [32, 38, 48, 55, 57, 58, 59, 60, 84, 88, 89, 90, 93, 95, 98, 100, 101, 103, 104, 105, 109, 110, 115, 122, 129, 131, 138, 141, 142, 146, 153, 154, 156, 158, 159, 160, 161, 165, 167, 168, 170], "ident": [32, 132, 153, 154], "oper": [32, 48, 55, 95, 109, 110, 153, 154, 158, 159, 161, 168], "mark": [32, 153, 155], "futur": [32, 153, 165, 166, 171], "success": [32, 153], "complet": [32, 153, 159, 165, 167, 171], "guarante": [32, 153], "correct": [32, 153], "It": [32, 50, 95, 128, 131, 133, 137, 153, 154, 159, 165, 166, 167, 168, 171], "test": [32, 137, 142, 153, 170, 171], "separ": [32, 71, 130, 131, 153, 154], "old": [32, 129, 153], "includ": [32, 130, 153], "comma": [32, 153], "n_iter": [33, 153, 169], "10": [33, 117, 137, 153, 161, 165, 167, 168, 169, 170, 171], "seed": [33, 96, 136, 137, 138, 142, 153, 159, 169, 171], "tuner": [34, 153, 169], "execut": [35, 153, 167, 168], "order": [35, 55, 134, 153, 154, 159, 161], "input_fn": [37, 38, 132, 136, 137, 144, 145, 153, 165, 168, 171], "prepro_fn": [37, 38, 88, 90, 93, 95, 98, 132, 136, 137, 144, 145, 153, 159, 165, 167, 168, 169, 171], "lambda": [37, 38, 93, 129, 132, 153, 154, 159], "num_parallel_cal": [37, 89, 90, 95, 100, 103, 132, 141, 153, 159, 160, 167, 169, 171], "compression_typ": [37, 126, 132, 153, 160, 163], "gzip": [37, 126, 153, 163], "sec": [37, 117, 126, 132, 153, 161, 163], "60": [37, 117, 126, 153, 155, 161, 163], "pred_fn": [38, 132, 153, 165, 167, 168, 169, 171], "loss_fn": [38, 132, 153, 165, 167, 168, 169, 171], "optimizer_fn": [38, 132, 153, 165, 167, 168, 169, 171], "train_input_fn": [38, 132, 153, 165, 167, 168, 169, 171], "eval_input_fn": [38, 132, 153, 165, 167, 168, 169, 171], "initializer_fn": [38, 132, 153], "train_metr": [38, 132, 153, 165, 171], "eval_metr": [38, 132, 153, 165, 171], "final_metr": [38, 132, 153, 165, 171], "train_hook": [38, 132, 153, 165, 171], "eval_hook": [38, 132, 153, 165, 171], "final_hook": [38, 132, 153, 165, 171], "train_spec": [38, 132, 153, 165, 171], "eval_spec": [38, 132, 153, 165, 171], "final_spec": [38, 132, 153, 171], "run_config": [38, 132, 153, 171], "config_proto": [38, 132, 153, 171], "random_se": [38, 132, 153], "42": [38, 138, 142, 153, 169], "pred": [38, 129, 132, 137, 153, 156], "machin": [38, 131, 153, 165, 166, 167], "can": [38, 48, 55, 65, 88, 90, 93, 122, 130, 131, 150, 152, 153, 154, 159, 161, 165, 166, 167, 168, 169, 171], "layer": [38, 90, 95, 98, 129, 131, 132, 135, 136, 141, 144, 153, 156, 159, 164, 165, 166, 167, 168, 169, 170, 171], "instanc": [38, 65, 88, 90, 95, 129, 133, 150, 152, 153, 154, 159, 166, 167, 168, 171], "gener": [38, 90, 95, 101, 122, 131, 132, 134, 139, 147, 152, 153, 159, 161, 164, 168, 169], "Its": [38, 153], "signatur": [38, 90, 153, 159], "follow": [38, 55, 65, 95, 98, 130, 131, 137, 153, 154, 159, 165, 166, 169, 171], "featur": [38, 101, 104, 153, 160, 161, 166, 167], "yield": [38, 55, 88, 90, 91, 93, 95, 101, 129, 153, 154, 159, 160, 167, 168], "predict": [38, 55, 88, 90, 93, 129, 135, 136, 144, 153, 154, 159, 168, 170], "features_and_predict": [38, 153], "combin": [38, 87, 90, 91, 129, 132, 164], "loss": [38, 44, 61, 86, 129, 131, 135, 136, 144, 153, 154, 157, 165, 171], "fed": [38, 153], "need": [38, 55, 65, 91, 129, 153, 154, 156, 159, 165, 167, 168, 169, 171], "train_op": [38, 153], "reader": [38, 88, 90, 93, 95, 129, 132, 135, 136, 153, 159, 164, 165, 168, 169, 170, 171], "A": [38, 48, 55, 88, 90, 93, 109, 110, 128, 134, 150, 153, 154, 159, 161, 165, 166, 167, 168, 171], "newli": [38, 153], "call": [38, 55, 90, 95, 128, 129, 150, 153, 154, 159, 166, 168, 171], "prepro": [38, 129, 131, 132, 135, 136, 144, 153, 164, 165, 169, 170, 171], "One": [38, 140, 153, 154, 165, 167], "modekei": [38, 55, 88, 90, 93, 153, 154, 159, 167, 168], "preprocess": [38, 88, 90, 93, 95, 98, 131, 141, 148, 153, 159, 165, 168, 170], "up": [38, 65, 130, 131, 153, 154], "initi": [38, 51, 76, 98, 129, 132, 150, 153, 154, 155, 159, 160, 164, 165, 168, 170, 171], "ad": [38, 134, 150, 153, 165, 167, 169], "op": [38, 137, 145, 150, 153, 156, 161], "must": [38, 98, 128, 130, 152, 153, 159], "have": [38, 55, 63, 93, 105, 125, 131, 134, 137, 153, 154, 159, 161, 162, 165, 166, 167, 168], "tensor_valu": [38, 153], "update_op": [38, 153, 165], "hook": [38, 132, 153, 164, 168, 170, 171], "hookfactori": [38, 153], "fulli": [38, 153], "defin": [38, 48, 55, 63, 66, 93, 95, 98, 104, 128, 131, 133, 134, 150, 153, 154, 159, 161, 165, 166, 168, 169, 170, 171], "dure": [38, 128, 153, 154, 165], "stepspersechook": [38, 132, 150, 153, 165, 171], "howev": [38, 153, 165], "requir": [38, 129, 130, 131, 150, 153, 170], "modul": [38, 128, 129, 130, 164, 167, 168, 170], "more": [38, 48, 55, 66, 129, 131, 153, 154, 161, 165, 166, 167, 168], "complic": [38, 48, 153, 154, 165], "evalspec": [38, 132, 153, 170, 171], "trainspec": [38, 132, 153, 170, 171], "runconfig": [38, 132, 153, 171], "run_on_yarn": [39, 132, 153], "packag": [39, 55, 129, 130, 131, 164, 166, 168, 170], "environ": [39, 131, 153, 167], "pex": [39, 129, 153, 167], "yarn": [39, 40, 128, 129, 131, 153, 170, 171], "trainer": [40, 128, 129, 132, 164, 165, 169, 170, 171], "train_on_yarn": [40, 132, 153], "trainerbas": [40, 132, 153], "activ": [41, 87, 88, 90, 91, 94, 96, 131, 132, 138, 154, 159, 161], "two": [42, 55, 56, 116, 119, 137, 150, 154, 161, 165], "kwarg": [43, 44, 45, 46, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 62, 64, 68, 69, 70, 71, 72, 73, 75, 86, 129, 132, 138, 139, 152, 153, 154, 157], "vanilla": [44, 154], "expect": [44, 55, 61, 88, 90, 95, 131, 154, 159, 165, 168, 171], "begin": [44, 61, 68, 98, 150, 154, 159], "5": [44, 55, 61, 107, 137, 138, 154, 161, 165, 166, 167, 168, 169, 170, 171], "69": [44, 61, 154], "boolean": [45, 154], "mask": [45, 61, 132, 138, 140, 164], "click": [46, 154], "rank": [46, 154], "axi": [47, 154], "concaten": [47, 154], "easili": [48, 154, 167], "compos": [48, 55, 93, 128, 154, 159, 167], "deep": [48, 55, 154, 170], "learn": [48, 55, 86, 146, 154, 157, 166, 168, 169, 170], "network": [48, 55, 154, 168], "direct": [48, 129, 154], "acycl": [48, 129, 154], "easiest": [48, 55, 93, 154, 159, 165, 169], "stack": [48, 129, 154, 161], "top": [48, 131, 137, 140, 154], "n_in": [48, 50, 55, 64, 65, 66, 71, 72, 132, 138, 141, 146, 154, 168], "n_out": [48, 55, 65, 132, 138, 141, 146, 154, 168], "def": [48, 55, 65, 88, 90, 91, 93, 95, 98, 130, 154, 159, 165, 166, 167, 168, 169, 171], "offsetlay": [48, 63, 154], "offset": [48, 63, 154, 159], "becaus": [48, 55, 88, 90, 93, 131, 154, 159, 161, 165, 167, 171], "your": [48, 65, 88, 90, 91, 98, 128, 130, 131, 154, 159, 165], "branch": [48, 154], "etc": [48, 55, 128, 130, 153, 154, 166, 168], "exploit": [48, 154], "capabl": [48, 131, 154, 167], "add": [48, 50, 63, 65, 115, 129, 130, 132, 133, 134, 138, 153, 154, 159, 161, 165, 167, 169, 171], "z": [48, 63, 65, 66, 154], "total": [48, 154, 169], "6": [48, 131, 153, 154, 165, 166, 167, 168, 169, 170], "As": [48, 154, 165, 168, 171], "alwai": [48, 90, 154, 159], "result": [48, 130, 133, 137, 145, 150, 154, 165, 168, 171], "correspond": [48, 58, 60, 154, 166], "first": [48, 69, 70, 98, 104, 130, 131, 154, 159, 161, 165, 167, 168, 169, 171], "last": [48, 50, 79, 154, 156, 168], "intermediari": [48, 154], "easi": [48, 131, 154, 166, 168], "arbitrari": [48, 66, 134, 154, 167, 170], "x1": [48, 63, 154], "x2": [48, 63, 154], "y1": [48, 63, 154], "y2": [48, 63, 154], "y3": [48, 154], "note": [48, 55, 65, 90, 91, 153, 154, 159, 161, 165, 169], "still": [48, 129, 154, 165], "appli": [48, 55, 63, 88, 90, 91, 93, 95, 98, 99, 129, 132, 137, 138, 154, 159, 165, 167, 168], "so": [48, 94, 131, 152, 154, 159, 165, 167, 168, 171], "won": [48, 131, 154, 165], "t": [48, 50, 131, 154, 165, 166, 167, 168], "try": [48, 131, 154], "incoher": [48, 154], "long": [48, 154], "correctli": [48, 154, 167], "t_0": [48, 55, 154], "t_1": [48, 55, 154], "constant": [48, 130, 154, 165, 168], "session": [48, 132, 150, 154, 158, 168], "sess": [48, 154, 168], "assert": [48, 154], "dot": [50, 154], "product": [50, 132, 154, 165, 167, 170, 171], "dimens": [50, 104, 154, 161], "vector": [50, 154], "miss": [50, 59, 60, 115, 129, 154, 161], "befor": [50, 103, 128, 129, 150, 154, 160, 165, 167, 168, 171], "t1": [50, 154], "num_target": [50, 140, 154], "t2": [50, 154], "where": [50, 133, 154, 165], "j": [50, 154], "sum_k": [50, 154], "k": [50, 129, 136, 137, 140, 154, 156, 171], "trainabl": [51, 129, 138, 150, 154, 165], "num_shard": [51, 154], "reus": [51, 55, 58, 59, 60, 98, 105, 113, 120, 121, 129, 131, 132, 138, 154, 159, 161, 165, 171], "partition_strategi": [51, 154], "div": [51, 154], "partit": [51, 154], "reduce_mod": [52, 62, 138, 154], "booleanreducemod": [52, 62, 132, 154], "OR": [52, 132, 154], "compar": [54, 137, 154, 159], "minimum": [54, 154], "heavili": [55, 154, 168], "inspir": [55, 154, 168], "trax": [55, 128, 131, 154], "adapt": [55, 154], "tf1": [55, 154, 170], "basic": [55, 93, 153, 154, 159, 165, 168], "block": [55, 93, 130, 131, 154, 159, 166], "NOT": [55, 138, 141, 146, 154, 166, 169], "usag": [55, 93, 130, 154, 159, 165], "intuit": [55, 154, 166], "possibl": [55, 128, 129, 130, 131, 153, 154, 161, 165, 166, 167, 168], "dens": [55, 73, 132, 154], "input_tensor": [55, 154], "ones": [55, 122, 153, 154, 161], "32": [55, 154, 165, 167, 168, 169], "8": [55, 103, 137, 141, 152, 153, 154, 160, 165, 167, 168, 169, 170, 171], "16": [55, 153, 154, 165, 167, 168, 169, 171], "output_tensor": [55, 154], "biasadd": [55, 154], "dtype": [55, 58, 59, 101, 104, 106, 132, 154, 156, 160, 161, 165, 167, 168, 171], "float32": [55, 74, 154, 165, 167, 168], "dropout": [55, 132, 164], "might": [55, 154, 165, 166], "behav": [55, 88, 90, 93, 154, 159], "differ": [55, 88, 90, 93, 131, 150, 154, 159, 165, 167, 169], "drop": [55, 154], "not_drop": [55, 154], "lot": [55, 131, 133, 154, 159, 165], "also": [55, 115, 129, 130, 131, 150, 154, 159, 161, 165, 166, 167, 168, 169], "reset_default_graph": [55, 154, 168], "coher": [55, 154], "author": [55, 93, 154, 159], "subclass": [55, 93, 128, 154, 159], "forward": [55, 90, 132, 136, 138, 141, 144, 146, 154, 159, 168], "self": [55, 93, 130, 154, 159, 165, 166, 167, 168, 169], "forward_as_dict": [55, 90, 132, 154, 159, 168], "implement": [55, 91, 129, 131, 154, 159, 165], "give": [55, 154, 168], "free": [55, 154], "convers": [55, 154], "custom": [55, 93, 131, 150, 153, 154, 159, 170], "decor": [55, 93, 111, 129, 154, 159, 161, 167, 168], "see": [55, 66, 86, 93, 95, 130, 131, 142, 150, 154, 157, 159, 167, 168, 171], "document": [55, 66, 93, 129, 130, 154, 159], "time": [55, 94, 154, 159, 165, 166, 167, 168, 169], "nor": [55, 154], "store": [55, 104, 129, 133, 154, 161, 165, 167], "In": [55, 154, 165, 166, 167, 168, 171], "word": [55, 154, 165], "chang": [55, 154, 165, 169, 170], "its": [55, 58, 60, 131, 154, 165, 167, 169, 171], "state": [55, 154], "effect": [55, 154, 165], "enforc": [55, 130, 154], "program": [55, 128, 131, 154, 168], "simpler": [55, 154], "api": [55, 131, 154, 165, 168], "want": [55, 91, 130, 153, 154, 159, 165, 167], "twice": [55, 154, 167], "explicit": [55, 154], "behind": [55, 154, 165], "scene": [55, 154, 165], "simpli": [55, 98, 154, 159, 165, 167, 168], "variable_scop": [55, 154], "dense_1": [55, 154], "while": [55, 154, 156, 165, 168], "thei": [55, 128, 154, 165], "both": [55, 133, 152, 154, 168], "share": [55, 154], "same": [55, 58, 59, 60, 65, 98, 115, 154, 159, 161, 165, 166, 167], "weight": [55, 75, 138, 154, 171], "good": [55, 154, 167], "how": [55, 154, 165, 167, 168, 171], "embed": [55, 129, 132, 137, 138, 164, 165, 170], "els": [55, 93, 152, 154, 159, 165, 168], "perform": [56, 95, 133, 154, 159, 168, 169, 171], "logical_and": [56, 154], "table_initializer_fn": [57, 98, 129, 132, 154, 159], "tabl": [57, 58, 60, 98, 105, 113, 120, 121, 129, 132, 152, 154, 159, 164, 167], "contrib": [57, 154, 157], "hashtabl": [57, 58, 59, 60, 154], "table_nam": [58, 59, 60, 132, 154], "key_dtyp": [58, 59, 120, 121, 132, 154, 161], "lookup": [58, 59, 60, 98, 129, 132, 164], "index": [58, 59, 60, 137, 154, 165, 168, 170, 171], "int64": [58, 60, 154, 171], "default_valu": [59, 60, 73, 113, 120, 121, 132, 154, 161], "value_dtyp": [59, 121, 132, 154, 161], "vocab_s": [60, 113, 132, 136, 137, 138, 141, 142, 143, 154, 161, 171], "unk": [60, 113, 154, 161], "To": [60, 98, 131, 150, 154, 159, 166, 167, 168, 169], "vocab": [60, 129, 132, 154, 164, 170, 171], "bpr": [61, 131, 132, 135, 136, 164, 171], "AND": [62, 132, 154], "Not": [62, 154, 165, 167, 168], "equal": [62, 88, 132, 154, 159, 168], "consecut": [63, 87, 91, 154, 159, 165], "b": [63, 65, 88, 90, 95, 154, 159], "g": [63, 154], "c": [63, 65, 95, 154, 159], "h": [63, 154, 169], "layer1": [63, 154], "layer2": [63, 154], "x3": [63, 154], "suitabl": [65, 154], "behavior": [65, 90, 129, 154, 159, 167], "achiev": [65, 154, 171], "dag": [65, 66, 67, 129, 132, 154], "indic": [66, 140, 154, 165, 171], "extract": [66, 153, 154, 156], "previou": [66, 154, 169], "particularli": [66, 154], "conveni": [66, 104, 154, 161, 167], "which": [66, 88, 90, 93, 128, 131, 150, 154, 159, 165, 167, 168], "alia": [67, 97, 154, 159, 168], "slice": [69, 70, 132, 164], "join": [71, 154], "spars": [73, 132, 164], "cast": [74, 129, 154], "averag": [75, 132, 135, 136, 150, 154, 165, 171], "run_nam": [76, 139, 155], "tracking_uri": [76, 133, 155, 161, 169], "experiment_nam": [76, 155], "artifact_loc": [76, 155, 161], "url_formatt": [76, 155], "internal_url_formatt": [76, 132, 155], "decai": [77, 154, 156, 165, 171], "99": [77, 156], "pattern": [77, 78, 79, 80, 81, 152, 156, 165], "finit": [78, 81, 156], "max": [80, 130, 154, 156], "get_vari": [84, 105, 156, 161, 168], "otherwis": [84, 153, 156], "norm": [84, 129, 150, 154, 156, 165], "learning_r": [86, 132, 133, 157, 165, 166, 167, 169], "grad_norm": [86, 157], "exclude_var": [86, 157], "clip": [86, 157], "skip_var": [86, 157], "skip_step": [86, 129, 157], "rate": [86, 131, 137, 157, 166, 169, 171], "descript": [86, 103, 130, 138, 141, 146, 154, 157, 160], "avail": [86, 129, 131, 133, 157, 165, 167], "drop_remaind": [87, 91, 159], "count": [87, 94, 99, 132, 148, 159, 165], "skip": [87, 88, 90, 91, 94, 96, 129, 134, 154, 159, 169], "consid": [87, 88, 90, 91, 94, 96, 159], "iter": [87, 88, 90, 91, 94, 96, 107, 117, 122, 125, 129, 132, 152, 159, 162, 164, 168], "predic": [88, 132, 159], "on_dict": [88, 90, 132, 159], "keep": [88, 90, 129, 137, 150, 153, 159, 171], "By": [88, 90, 159], "doe": [88, 90, 98, 105, 129, 130, 154, 159, 161, 165, 167, 168, 169, 171], "pipelin": [88, 90, 93, 95, 98, 128, 129, 132, 153, 159, 169, 170], "transform": [88, 90, 98, 99, 122, 128, 129, 131, 132, 135, 136, 159, 161, 164, 171], "gen": [88, 90, 93, 95, 137, 159], "raw_dataset": [88, 93, 159], "from_gener": [88, 90, 93, 95, 159], "int32": [88, 90, 93, 95, 159], "tensorshap": [88, 90, 93, 101, 159, 160], "from_dataset": [88, 90, 93, 95, 132, 159, 160, 167, 168], "assum": [88, 90, 159], "sequenc": [89, 100, 104, 132, 159, 161], "record": [89, 132, 135, 136, 137, 164, 170], "map_func": [90, 93, 132, 159], "updat": [90, 129, 132, 133, 159, 165], "choos": [90, 159], "instead": [90, 98, 129, 159, 167], "them": [90, 131, 159, 165, 166, 167, 168, 169], "directli": [90, 159, 165], "avoid": [90, 129, 134, 153, 159, 166], "inspect": [90, 133, 159], "overhead": [90, 153, 159], "__call__": [90, 129, 130, 159, 165, 168], "intend": [90, 159, 166], "wish": [90, 159], "functool": [90, 159], "partial": [90, 129, 159, 166], "sum": [90, 95, 132, 138, 154, 159], "On": [90, 159], "hand": [90, 159], "thread": [90, 150, 159], "pad": [91, 104, 154, 159, 161], "structur": [91, 101, 122, 129, 159, 160, 161], "own": [91, 131, 159], "paddedbatchdefault": [91, 159], "padded_shap": [91, 159], "padding_valu": [91, 159], "padded_batch": [91, 159], "bath_siz": [91, 159], "buffer_s": [92, 96, 132, 141, 159, 171], "cpu": [92, 129, 131, 153, 159, 165, 166, 167, 168, 169, 171], "gpu": [92, 129, 131, 153, 159], "high": [92, 159, 168], "mai": [92, 159], "lead": [92, 129, 159, 166], "consumpt": [92, 159], "rang": [93, 107, 117, 122, 159, 161, 167, 168], "todo": [93, 159], "actual": [93, 128, 159, 165, 167, 168, 171], "taken": [93, 159], "account": [93, 134, 159], "shuffl": [93, 103, 129, 132, 142, 159, 160, 167, 169, 171], "special": [93, 129, 159, 166, 167, 168], "specifi": [93, 131, 159, 166, 168, 171], "preprocessor": [93, 95, 131, 132, 148, 159, 167], "seen": [94, 131, 159, 171], "forev": [94, 159], "fuse": [95, 132, 159], "chain": [95, 159], "complex": [95, 129, 159], "reason": [95, 129, 153, 159, 161], "singl": [95, 145, 159], "snippet": [95, 159], "ismins": [95, 132, 154, 159], "a_siz": [95, 159], "b_size": [95, 159], "posit": [95, 154, 159, 170], "reshuffle_each_iter": [96, 159], "randomli": [96, 138, 159, 168], "buffer": [96, 152, 159], "fromexampl": [97, 129, 132, 159], "insid": [98, 159, 165], "outsid": [98, 159], "remedi": [98, 159], "auto_reus": [98, 159], "util": [98, 129, 132, 134, 135, 136, 152, 154, 156, 159, 162, 164, 165, 168, 170], "table_from_map": [98, 105, 132, 159, 161], "partner_t": [98, 159], "Then": [98, 159], "serial": [98, 104, 129, 132, 159, 161, 166, 167, 168], "most": [99, 128, 130, 131, 153, 159, 165, 168], "cap": [99, 159], "sequenceexampl": [100, 104, 159, 161], "generator_fn": [101, 132, 160, 168], "output_typ": [101, 132, 160, 168], "output_shap": [101, 132, 160, 168], "label": [101, 160], "nest": [101, 122, 129, 134, 153, 160, 161, 166, 167], "similar": [102, 131, 160, 165, 167, 171], "tensorflow_dataset": [102, 128, 160, 168], "num_parallel_read": [103, 132, 160, 167, 169], "recurs": [103, 129, 152, 160], "tfrecord": [103, 126, 129, 137, 145, 159, 160, 163, 165, 167, 169, 171], "parallel": [103, 132, 154, 160], "filenam": [103, 132, 159, 160, 161], "repres": [104, 161], "messag": [104, 161], "feature_list": [104, 161], "here": [105, 161, 165, 168], "my_tabl": [105, 161], "get": [105, 131, 132, 150, 154, 158, 160, 161, 167], "numpi": [106, 129, 130, 159, 161, 167, 168, 169, 171], "split": [107, 137, 154, 161, 171], "idx": [107, 117, 161], "fn": [111, 131, 154, 159, 161], "handl": [111, 161], "path_pb": [112, 161], "definit": [112, 153, 161, 165, 171], "protobuff": [112, 161, 165], "pb": [112, 145, 158, 161, 165], "revers": [113, 129, 161], "broadcast": [115, 132, 164, 165], "dim": [115, 136, 137, 138, 154, 161, 171], "msb": [116, 119, 161], "lsb": [116, 119, 161], "64": [116, 119, 161, 169], "bit": [116, 119, 161], "integ": [116, 119, 161], "128": [116, 119, 141, 154, 161, 171], "uuid": [116, 119, 132, 164], "num_shards_embed": [118, 129, 161], "el": [119, 161], "flat": [122, 161], "flatten": [122, 153, 161], "Will": [122, 161], "unpack": [122, 161], "safe": [122, 161], "hello": [122, 152, 161], "vocabulari": [123, 124, 125, 128, 129, 162, 171], "txt": [123, 124, 125, 129, 131, 152, 162, 171], "lexem": [125, 162], "newlin": [125, 129, 162], "charact": [125, 130, 156, 162], "configur": [128, 165, 166, 168], "regularli": 128, "anoth": [128, 168], "servic": [128, 165], "helper": [128, 129, 130, 134, 168], "system": [128, 131, 152, 161, 166, 167], "through": 128, "launcher": [128, 129, 153], "logic": [128, 129, 165], "prefer": [128, 159], "re": [128, 156, 165, 166, 167, 168], "usabl": 128, "kera": [128, 129, 153], "take": [128, 132, 153, 159, 166, 168, 171], "dynam": [128, 129, 132, 164, 169, 170], "comput": [128, 129, 131, 137, 138, 145, 154, 156, 165, 171], "common": 128, "Their": 128, "necessari": 128, "variou": [128, 129], "simpl": [128, 131, 165, 166, 167, 168], "disk": [128, 159, 165], "notabl": 129, "project": [129, 136, 138, 154], "format": [129, 131, 165], "adher": 129, "semant": 129, "version": [129, 131, 164, 165], "ci": 129, "pass": [129, 130, 165, 166], "server": 129, "30": [129, 171], "sequenti": [129, 132, 154], "now": [129, 165, 166, 167, 168, 169, 171], "kept": [129, 166], "legaci": 129, "denseindex": [129, 132, 154], "shorten": 129, "deepr": [129, 130, 165, 166, 167, 168, 169, 171], "dpr": 129, "useless": 129, "unnecessari": 129, "resolut": 129, "incorrect": 129, "incompat": 129, "app": 129, "id": [129, 133, 154, 161, 166, 169], "move": [129, 165], "svd": [129, 135, 136], "job": [129, 131, 132, 133, 135, 136, 144, 164, 166, 169, 170], "movielen": [129, 132, 135, 170], "vae": [129, 135, 136, 142], "ndcg": [129, 135, 136, 171], "recal": [129, 135, 136, 137, 171], "csvreader": 129, "addwithweight": [129, 132, 154], "multiloglikelihoodcss": [129, 132, 136, 138, 154], "multiloglikelihood": [129, 132, 138, 154], "skein": 129, "cluster_pack": [129, 167, 169], "break": [129, 166, 167, 168], "grad": 129, "queri": [129, 154, 171], "accuraci": [129, 132, 164], "accuracyatk": [129, 132, 156], "evaluatejob": 129, "lstm": [129, 132, 164], "fusedop": 129, "tfrecordread": [129, 132, 160, 165, 167, 169, 171], "experiment": [129, 132, 164], "restart": 129, "refactor": 129, "to_exampl": 129, "arrays_to_exampl": [129, 132, 159], "arrai": [129, 159, 161, 165, 167, 168], "batch_shap": [129, 132, 161], "__iter__": [129, 168], "skein_launch": 129, "hous": 129, "gradient": 129, "copy_fil": [129, 132, 152], "encod": [129, 136, 138, 152, 154], "hdfsfile": [129, 132, 152], "tripletprecis": [129, 132, 154], "protopredict": 129, "protoexport": 129, "wrong": 129, "copydir": [129, 132, 153], "parse_exampl": 129, "parse_single_exampl": 129, "save_checkpoint": 129, "top1": [129, 154], "top1max": 129, "bprmax": [129, 132, 154], "nce": 129, "user": [129, 131, 137, 138, 152, 153, 165, 167, 169, 171], "ignor": 129, "ship": [129, 167], "url": [129, 133, 155], "edg": 129, "toexampl": [129, 132, 159], "ndim": 129, "get_tensor": [129, 132, 156], "keep_scalar": [129, 132, 156], "get_scalar": [129, 132, 156], "variablevalu": [129, 132, 156], "global": [129, 150, 165], "lastvalu": [129, 132, 156], "writer": [129, 132, 164, 167, 170], "tfrecordwrit": [129, 132, 163, 167], "to_featur": [129, 132, 161], "progress": [129, 132, 161], "n": [129, 135, 136, 137, 171], "savedataset": [129, 132, 153], "tfrecordsequenceexampl": [129, 132, 159, 167], "as_featur": 129, "feature_spec": [129, 132, 161], "confus": [129, 166], "has_var_len": 129, "has_fixed_len": 129, "exportxlamodelmetadata": [129, 132, 153, 170], "predictor": [129, 132, 164, 165], "predictsavedmodel": [129, 144, 145, 165], "predictproto": [129, 144, 145, 165], "doctest": [129, 130], "copy_dir": [129, 132, 152, 164], "tablecontext": [129, 132, 161], "tableiniti": [129, 132, 159], "index_to_string_table_from_fil": [129, 132, 161], "associ": 129, "lookupindextostr": [129, 132, 154], "activemod": [129, 132, 154], "tofloat": [129, 132, 154], "__post_init__": 129, "yarntrain": [129, 132, 153, 167, 169], "yarnlaunch": [129, 132, 153, 167, 169], "non": [129, 138, 156, 161, 165], "lazi": [129, 167, 168, 171], "constructor": [129, 154], "were": [129, 165], "sanit": [129, 156], "especi": 129, "built": [129, 131, 168], "typo": 129, "feedabl": 129, "fetchabl": 129, "permiss": 129, "optimizesavedmodel": [129, 132, 153, 170], "multipl": [129, 130, 167, 168], "import_graph_def": [129, 132, 161], "get_feedable_tensor": [129, 132, 161], "get_fetchable_tensor": [129, 132, 161], "path_model_pb": 129, "consist": [129, 131, 167], "yarnconfig": [129, 132, 153], "upload_zip_to_hdf": 129, "cleaner": 129, "advanc": [129, 166, 170], "notebook": [129, 131, 165, 167, 168, 169, 171], "track": [129, 133, 150], "doc": 129, "debug": 129, "public": [129, 130], "releas": 129, "we": [130, 137, 150, 161, 165, 167, 168, 169, 171], "aim": 130, "least": [130, 168], "80": 130, "jenkin": 130, "pep8": 130, "length": [130, 154], "120": [130, 153], "blank": 130, "capit": 130, "my": 130, "o": [130, 171], "np": [130, 161, 167, 168, 169, 171], "logger": 130, "getlogg": [130, 165, 166, 167, 168, 169], "__name__": 130, "myclass": 130, "my_funct": 130, "group": 130, "standard": 130, "librari": [130, 167, 168, 170], "extern": 130, "intern": [130, 155], "deepr_python": 130, "nn": 130, "properti": [130, 152, 159, 160, 161], "_privat": 130, "classmethod": [130, 161], "staticmethod": 130, "bottom": 130, "higher": 130, "level": [130, 165, 166, 167, 168, 169, 171], "72": 130, "encourag": 130, "much": 130, "short": [130, 167, 169], "longer": [130, 150], "rst": 130, "section": [130, 131], "focus": 131, "via": 131, "abstract": [131, 149, 150, 153, 159, 160, 163, 168], "design": [131, 170], "cluster": [131, 167, 171], "integr": 131, "nice": 131, "readi": [131, 165], "collect": 131, "extend": 131, "specif": [131, 161, 165, 171], "submit": [131, 167], "flexibl": 131, "made": [131, 167, 168, 171], "off": [131, 166], "thinc": [131, 166], "gin": [131, 166], "start": [131, 154, 168, 169], "blogpost": 131, "go": [131, 168], "quickstart": [131, 165, 167, 170], "colab": 131, "great": [131, 168], "orient": 131, "center": 131, "around": 131, "deploi": 131, "code": [131, 165, 166, 167, 170], "compil": [131, 165], "although": 131, "come": [131, 165], "googl": 131, "veri": 131, "modern": 131, "framework": [131, 153, 156], "approach": [131, 165], "orthogon": 131, "mere": [131, 168], "subset": 131, "concept": [131, 165, 167, 168], "extens": [131, 152], "standalon": 131, "submodul": [131, 135, 136, 144, 164], "illustr": [131, 165], "what": [131, 165, 167], "would": [131, 166, 167], "onc": [131, 165, 167, 168, 169], "compon": [131, 152, 168], "movi": [131, 137, 171], "aggreg": [131, 137], "averagemodel": [131, 136, 138, 171], "jump": 131, "faiss_cpu": [131, 171], "cd": [131, 137], "wget": [131, 171], "http": [131, 133, 142, 154, 161, 171], "grouplen": [131, 171], "org": [131, 154, 171], "ml": [131, 171], "20m": [131, 171], "zip": [131, 171], "unzip": [131, 171], "sure": [131, 161, 168], "date": [131, 139, 147, 166, 169], "setuptool": 131, "u": [131, 138, 168], "virtual": 131, "m": [131, 169], "venv": 131, "bin": 131, "extras_requir": 131, "setup": 131, "py": [131, 167, 169], "platform": 131, "extra": 131, "e": [131, 159, 161, 165, 166, 167, 168, 171], "Or": 131, "altern": 131, "pre": [131, 159, 166], "15": [131, 153, 165, 167, 168, 169, 170], "clone": 131, "repo": 131, "git": 131, "github": [131, 142, 171], "com": [131, 142], "criteo": 131, "edit": 131, "enabl": 131, "develop": 131, "dev": [131, 153, 167, 169], "fresh": 131, "mypi": 131, "pylint": 131, "black": 131, "auto": 131, "help": 131, "changelog": [131, 170], "maintain": 131, "guillaum": 131, "genthial": 131, "romain": 131, "beaumont": 131, "deni": 131, "kuzin": 131, "amin": 131, "benhalloum": 131, "cli": [132, 164, 169], "main": [132, 164, 168, 170], "add_macro": [132, 133, 169], "download_config_and_macros_from_mlflow": [132, 133, 169], "from_config_and_macro": [132, 133], "from_config": [132, 134, 166, 167], "parse_config": [132, 134, 166, 169], "add_macro_param": [132, 134], "find_valu": [132, 134], "replace_valu": [132, 134], "to_config": [132, 134], "fill_macro": [132, 134], "find_macro_param": [132, 134], "get_macro_and_param": [132, 134], "ismacro": [132, 134], "macros_eval_ord": [132, 134], "default_refer": [132, 134], "fill_refer": [132, 134], "isrefer": [132, 134], "multipli": [132, 135, 154, 165, 167, 168, 169], "best_checkpoint": [132, 164, 165], "bestcheckpoint": [132, 149, 165, 171], "read_eval_metr": [132, 149], "save_vari": [132, 164], "savevari": [132, 149, 171], "estimatorhookfactori": [132, 150], "tensorhookfactori": [132, 150], "early_stop": [132, 164], "earlystoppinghookfactori": [132, 150, 165, 171], "log_variables_init": [132, 164, 165], "logvariablesinithook": [132, 150, 165, 171], "after_create_sess": [132, 150], "logging_tensor": [132, 164, 165], "loggingtensorhookfactori": [132, 150, 165, 171], "maxresidentmemori": [132, 150, 165, 171], "residentmemori": [132, 150, 165, 171], "num_param": [132, 164, 165], "numparamshook": [132, 150, 165, 171], "get_num_param": [132, 150], "steps_per_sec": [132, 164, 165], "summarysaverhookfactori": [132, 150, 165, 171], "checkpoint_initi": [132, 164], "checkpointiniti": [132, 151], "io": [132, 164, 165, 167, 168, 169, 170, 171], "readlin": [132, 152], "hdfsfilesystem": [132, 152], "is_json": [132, 152], "load_json": [132, 152], "read_json": [132, 152, 169], "write_json": [132, 152], "parquetdataset": [132, 152], "is_hdf": [132, 152], "is_loc": [132, 152], "pq_dataset": [132, 152], "read_panda": [132, 152], "delet": [132, 152, 165], "delete_dir": [132, 152, 165, 167, 168], "exist": [132, 133, 152], "is_dir": [132, 152, 165, 167, 168], "iterdir": [132, 152], "suffix": [132, 152], "cleanup_checkpoint": [132, 164, 165], "cleanupcheckpoint": [132, 153, 165], "spec": [132, 153, 161, 165], "export_xla_model_metadata": [132, 164, 165], "add_metadata_item": [132, 153], "get_nod": [132, 153], "log_metr": [132, 161, 164], "logmetr": [132, 153], "mlflow_save_config": [132, 164], "mlflowformatt": [132, 153], "include_kei": [132, 153], "skip_kei": [132, 153], "skip_valu": [132, 153], "mlflowsaveconfig": [132, 153], "mlflow_save_info": [132, 164], "mlflowsaveinfo": [132, 153], "optimize_saved_model": [132, 164, 165], "tensorsnotfounderror": [132, 153], "make_placehold": [132, 153], "rename_nod": [132, 153], "params_tun": [132, 164, 169], "gridsampl": [132, 153], "paramssampl": [132, 153, 169], "paramstun": [132, 153, 169], "save_dataset": [132, 164], "configproto": [132, 153, 171], "finalspec": [132, 153, 171], "create_experi": [132, 153, 168], "run_final_evalu": [132, 153], "model_fn": [132, 153, 165], "trainer_bas": [132, 164], "trainer_kera": [132, 164], "trainerkera": [132, 153], "yarn_config": [132, 164], "cpu_ignored_packag": [132, 153], "get_env_var": [132, 153], "gpu_additional_packag": [132, 153], "gpu_ignored_packag": [132, 153], "gpu_to_us": [132, 153], "jvm_memory_in_gb": [132, 153], "path_pex_cpu": [132, 153], "path_pex_gpu": [132, 153], "path_pex_prefix": [132, 153, 167, 169], "upload_pex_cpu": [132, 153], "upload_pex_gpu": [132, 153], "upload_pex": [132, 153], "yarn_launch": [132, 164, 169], "yarnlauncherconfig": [132, 153, 167, 169], "hadoop_file_system": [132, 153], "num_cor": [132, 153], "yarn_train": [132, 164], "yarntrainerconfig": [132, 153, 167, 169], "get_task_spec": [132, 153], "nb_p": [132, 153], "nb_retri": [132, 153], "nb_worker": [132, 153], "pre_script_hook": [132, 153], "queue": [132, 153], "tf_yarn": [132, 153, 167], "tf_yarn_chief_cor": [132, 153], "tf_yarn_chief_memori": [132, 153], "tf_yarn_evaluator_cor": [132, 153], "tf_yarn_evaluator_memori": [132, 153], "tf_yarn_tensorboard_memori": [132, 153], "maskedbpr": [132, 154], "bpr_max": [132, 164], "maskedbprmax": [132, 154], "click_rank": [132, 164], "clickrank": [132, 154], "scope": [132, 154, 156, 166], "core": [132, 164, 165, 167, 168], "concat": [132, 154], "conv1d": [132, 154], "dotproduct": [132, 154], "expanddim": [132, 154], "logicaland": [132, 154], "logicalor": [132, 154], "normal": [132, 136, 137, 140, 154], "scale": [132, 154], "softmax": [132, 154], "spatialdropout1d": [132, 154], "combineembed": [132, 154], "lookupfromfil": [132, 154], "lookupfrommap": [132, 154], "booleanmask": [132, 154], "notequ": [132, 154], "multi": [132, 135, 136, 142, 164], "multi_css": [132, 164], "nce_loss": [132, 164], "maskednegativesampl": [132, 154], "negativesampl": [132, 136, 138, 154], "reduc": [132, 164], "weightedaverag": [132, 154], "slicefirst": [132, 154], "slicelast": [132, 154], "slicelastpad": [132, 154], "todens": [132, 154], "stringjoin": [132, 154], "top_on": [132, 164], "maskedtopon": [132, 154], "topon": [132, 154], "top_one_max": [132, 164], "maskedtoponemax": [132, 154], "toponemax": [132, 154], "attentionmask": [132, 154], "feedforward": [132, 154], "positionalencod": [132, 154], "selfmultiheadattent": [132, 154], "block_id": [132, 154], "dim_head": [132, 154], "num_head": [132, 154], "residual_connect": [132, 154], "join_head": [132, 154], "scaled_dot_attent": [132, 154], "split_head": [132, 154], "triplet_precis": [132, 164, 171], "graphite_init": [132, 164], "graphiteinit": [132, 155], "mlflow_init": [132, 164], "mlflowinit": [132, 155], "standard_url_formatt": [132, 155], "get_metric_vari": [132, 156], "sanitize_metric_nam": [132, 156], "maxvalu": [132, 156], "max_value_metr": [132, 156], "decaymean": [132, 156, 165, 171], "finitemean": [132, 156], "decay_mean_metr": [132, 156], "finite_mean_metr": [132, 156], "stepcount": [132, 156, 165, 171], "tensorflowoptim": [132, 157, 165, 167, 168, 169, 171], "feed_tensor": [132, 158], "fetch_tensor": [132, 158], "proto": [132, 164, 165], "protopredictor": [132, 158], "savedmodelpredictor": [132, 158], "get_latest_saved_model": [132, 158], "preprofn": [132, 159], "cach": [132, 159], "tf_predic": [132, 159], "tf_map_func": [132, 159], "paddedbatch": [132, 159], "prefetch": [132, 159], "datasetread": [132, 160], "as_dataset": [132, 136, 142, 160, 168], "generatorread": [132, 160, 167, 168], "bytes_featur": [132, 160], "float_featur": [132, 160, 167], "int64_featur": [132, 160], "int64_feature_list": [132, 160], "make_same_shap": [132, 161], "save_variables_in_ckpt": [132, 161], "datastruct": [132, 164], "dict_to_item": [132, 161], "item_to_dict": [132, 161], "to_flat_tupl": [132, 161], "handle_except": [132, 161], "as_placehold": [132, 161], "is_featuriz": [132, 161], "is_spars": [132, 161], "startswith": [132, 161], "tensortyp": [132, 161], "get_by_nam": [132, 161], "get_send": [132, 161], "clear_run": [132, 161], "download_artifact": [132, 161], "log_dict": [132, 161], "set_or_create_experi": [132, 161], "is_act": [132, 161], "table_from_fil": [132, 161], "tf2xla_pb2": [132, 164], "msb_lsb_to_str": [132, 161], "str_to_msb_lsb": [132, 161], "command": [133, 169, 170], "12dk242jd": 133, "written": 133, "subdirectori": 133, "magic": [133, 166], "highli": 133, "manual": 133, "match": [133, 152, 156], "config_no_stat": 133, "macros_no_stat": 133, "path_config": [133, 169], "path_macro": [133, 169], "download": [133, 161, 169, 170], "uri": 133, "artifact": [133, 161, 169, 171], "modifi": 134, "find": [134, 171], "alreadi": [134, 165, 167], "obj": 134, "resolv": [134, 150], "inter": 134, "doubl": 134, "those": [134, 153, 165, 168], "build_record": [135, 136], "init": [135, 136], "csv": [135, 136, 171], "buildrecord": [136, 137, 171], "min_length": [136, 137, 171], "min_rat": [136, 137, 171], "num_neg": [136, 137, 141, 154, 171], "path_ev": [136, 137, 171], "path_map": [136, 137, 171], "path_rat": [136, 137, 171], "path_test": [136, 137, 171], "path_train": [136, 137, 171], "shuffle_timelin": [136, 137, 171], "size_ev": [136, 137, 171], "size_test": [136, 137, 171], "target_ratio": [136, 137, 142, 171], "get_timelin": [136, 137], "records_gener": [136, 137], "write_record": [136, 137], "num_queri": [136, 137], "path_bias": [136, 137, 171], "path_embed": [136, 137, 171], "path_predict": [136, 137, 171], "compute_metr": [136, 137], "ndcg_score": [136, 137], "precision_recall_f1": [136, 137], "initcheckpoint": [136, 137], "normalize_count": [136, 137], "path_count": [136, 137], "use_log_count": [136, 137], "min_count": [136, 137], "path_csv": [136, 137, 142], "compute_coocurr": [136, 137], "compute_pmi": [136, 137], "addbia": [136, 138], "logit": [136, 138, 140, 154, 156], "userembed": [136, 138, 154], "bprloss": [136, 138, 171], "l2loss": [136, 138], "vaeloss": [136, 138], "transformermodel": [136, 138], "decod": [136, 138], "gaussiannois": [136, 138], "vaemodel": [136, 138], "weightedsum": [136, 138], "ndcgatk": [136, 140], "recallatk": [136, 140], "csvprepro": [136, 141], "randomneg": [136, 141], "sequencemask": [136, 141], "recordprepro": [136, 141, 171], "testcsvread": [136, 142], "traincsvread": [136, 142], "input_positives_one_hot": [136, 143], "target_positives_one_hot": [136, 143], "10000": [137, 154], "2020": [137, 166, 169, 170, 171], "timelin": [137, 171], "neg": [137, 138, 154], "sampl": [137, 138, 154, 169], "uid": 137, "inputposit": [137, 171], "size_input": 137, "targetposit": 137, "size_target": 137, "targetneg": 137, "50": [137, 141, 169, 171], "1000": [137, 145, 161, 165, 167, 168, 169, 171], "faiss": [137, 165, 167, 171], "remain": 137, "f1": [137, 171], "discount": [137, 140], "cumul": [137, 140], "gain": [137, 140], "f1_score": 137, "datasetv1": [137, 145, 153, 159, 160], "dataset_op": [137, 145], "600": [137, 138], "user_item": 137, "co": 137, "occurr": 137, "matrix": [137, 154, 171], "75": 137, "additive_smooth": 137, "pmi_pow": 137, "pmi": 137, "keep_prob": [138, 171], "share_embed": 138, "train_embed": 138, "train_bias": 138, "average_with_bia": 138, "b_i": 138, "transpos": 138, "symmetr": 138, "bias": [138, 154, 171], "beta_start": 138, "beta_end": 138, "beta_step": 138, "beta": [138, 150, 154], "kl": [138, 154], "complementar": [138, 154], "constraint": 138, "dims_encod": 138, "200": 138, "dims_decod": 138, "path_root": [139, 171], "num_class": [140, 154], "hot": [140, 154], "num_cass": 140, "512": 141, "repeat_s": [141, 148, 165, 167, 169, 171], "prefetch_s": [141, 171], "min_input_s": [141, 171], "min_target_s": [141, 171], "max_input_s": [141, 171], "max_target_s": [141, 171], "1024": [141, 171], "path_csv_tr": 142, "path_csv_t": 142, "paper": [142, 154], "dawenl": 142, "vae_cf": 142, "bucket_s": 142, "8192": 142, "take_ratio": 142, "num_exampl": [144, 145, 165, 167, 169], "path_dataset": [144, 145, 147, 165, 167, 169], "squaredl2": [144, 146, 165, 167, 168, 169], "defaultprepro": [144, 148, 165, 167, 169], "inferenceprepro": [144, 148, 165], "dummi": [145, 155, 160, 167], "random": [145, 165, 167, 168], "squar": [146, 168], "l2": [146, 168], "abc": [149, 150, 153, 154, 156, 157, 158, 159, 160, 163, 165], "enum": [149, 154], "eval_dir": 149, "reload": [149, 159, 165, 171], "model_dir": 149, "tensorlogginghook": 150, "statist": 150, "whitelist": 150, "blacklist": 150, "adam": [150, 157, 165, 167, 168, 169], "sessionrunhook": 150, "coord": 150, "zero": [150, 165], "been": 150, "essenti": 150, "situat": 150, "recov": 150, "overal": 150, "coordin": 150, "num_glob": 150, "num_train": 150, "stepcounterhook": 150, "rb": 152, "utf": 152, "filesystemfil": 152, "w": 152, "world": 152, "wb": 152, "load": [152, 165, 167, 171], "column": [152, 171], "use_thread": 152, "use_pandas_metadata": 152, "num_chunk": 152, "dest": 152, "dir": 152, "regular": 152, "exist_ok": [152, 171], "_": [153, 154, 167, 168], "target_shap": 153, "graph_def": 153, "under": [153, 161, 168], "access": [153, 165], "thu": 153, "limit": [153, 154, 165], "graphdef": 153, "hyper": [153, 170], "tune": [153, 165, 170], "inter_op_parallelism_thread": [153, 171], "intra_op_parallelism_thread": [153, 171], "log_device_plac": 153, "gpu_device_count": [153, 171], "cpu_device_count": [153, 171], "start_delay_sec": [153, 165, 171], "throttle_sec": [153, 165, 171], "max_step": [153, 165, 171], "experi": [153, 161, 165, 168, 169], "namedtupl": 153, "charg": [153, 165], "19": [153, 167, 168, 170], "runner": 153, "env": [153, 161, 167, 169], "path_pex": 153, "path_pex_exist": 153, "additional_packag": 153, "ignored_packag": 153, "2023": [153, 170], "03": [153, 169, 170], "07": [153, 170], "14": [153, 165, 167, 168, 171], "05": [153, 170], "28": [153, 167, 170], "48": [153, 171], "gib": 153, "profil": 153, "cuda": 153, "sh": 153, "setupcuda": 153, "setupcudnn": 153, "cuda10": 153, "1_v7": 153, "38": [153, 154], "task": 153, "add_on": 154, "mutat": 154, "place": 154, "exactli": [154, 168], "addoffset": [154, 159], "roughli": [154, 159, 168], "addoffsetintrain": [154, 159], "IN": [154, 159], "detail": 154, "arxiv": 154, "pdf": 154, "1205": 154, "2618": 154, "num_ev": 154, "bpt": 154, "bpr_max_regular": 154, "1706": 154, "03847": 154, "name_or_scop": 154, "linearli": 154, "kernel_s": 154, "use_bia": 154, "kernel_nam": 154, "bias_nam": 154, "kernel_reus": 154, "bias_reus": 154, "kernel_train": 154, "bias_train": 154, "kernel_initi": 154, "bias_initi": 154, "classic": 154, "ax": 154, "num_indic": 154, "logical_or": 154, "dropout_r": 154, "1d": 154, "output_dim": 154, "num_unit": 154, "bidirect": 154, "multinomi": 154, "likelihood": 154, "proceed": 154, "mlr": 154, "press": 154, "v54": 154, "botev17a": 154, "positive_logit": 154, "num_posit": 154, "negative_logit": 154, "positive_mask": 154, "negative_mask": 154, "nip": 154, "cc": 154, "5021": 154, "represent": [154, 171], "phrase": 154, "composition": 154, "use_look_ahead_mask": 154, "attent": 154, "sequence_length": 154, "ahead": 154, "units_inn": 154, "units_readout": 154, "epsilon": 154, "1e": 154, "08": [154, 170], "max_sequence_length": 154, "emb_dim": 154, "use_positional_encod": 154, "doesn": [154, 168], "exce": 154, "multihead": 154, "head": 154, "residu": 154, "invers": 154, "encoding_block": 154, "use_layer_norm": 154, "event_dropout_r": 154, "use_feedforward": 154, "ff_dropout_r": 154, "ff_normal": 154, "trainable_positional_encod": 154, "inputembed": 154, "inputmask": [154, 171], "triplet": [154, 171], "wrapper": [155, 165], "host": [155, 161], "port": [155, 161], "3341": 155, "interv": [155, 161], "gold": 156, "variablev1": 156, "sometim": [156, 167], "forbidden": 156, "_valid_scope_name_regex": 156, "tf_valid_regex": 156, "_valid_param_and_metric_nam": 156, "mlflow_valid_regex": 156, "kernel_variable_nam": 156, "my_lay": 156, "kernel": 156, "adagrad": 157, "adagradoptim": 157, "adamoptim": 157, "lazyadam": [157, 171], "opt": 157, "lazy_adam_optim": 157, "lazyadamoptim": 157, "momentum": 157, "momentumoptim": 157, "sgd": 157, "gradient_desc": 157, "gradientdescentoptim": 157, "saved_model_dir": 158, "latest": [158, 165], "from_tensor_slic": 159, "unless": 159, "over": [159, 161, 168], "outofrangeerror": 159, "consum": 159, "space": [159, 171], "10x": 159, "100x": 159, "seem": 159, "brittl": 159, "bytes_list": 160, "byte": 160, "float_list": 160, "int64_list": 160, "featurelist": [160, 161], "deal": 161, "than": [161, 165, 166], "ravel": 161, "row": 161, "major": 161, "len": 161, "postfix": 161, "timeout": 161, "queue_siz": 161, "log_send": 161, "protocol": 161, "tcp": 161, "sender": 161, "clear": 161, "unset": 161, "dst_path": 161, "subpackag": 164, "content": [164, 167, 168], "pip": [165, 166, 167, 168, 169, 171], "instal": [165, 166, 167, 168, 169, 170], "cover": [165, 168], "sy": [165, 166, 167, 168, 169], "basicconfig": [165, 166, 167, 168, 169, 171], "stream": [165, 166, 167, 168, 169], "stdout": [165, 166, 167, 168, 169], "setlevel": [165, 166, 167, 168, 169], "critic": [165, 166, 167, 168, 169], "let": [165, 167, 168, 169, 171], "build_job": [165, 167], "pair": 165, "2x": [165, 168], "our": [165, 167, 168, 169], "remind": 165, "original_trainer_job": 165, "y_pred": [165, 168], "did": [165, 167], "wa": [165, 167], "real": [165, 167], "life": [165, 167], "scenario": 165, "slightli": 165, "starter": 165, "often": 165, "along": [165, 166], "just": [165, 167], "monitor": 165, "There": [165, 168], "whole": 165, "exponenti": 165, "done": [165, 167], "sake": 165, "num_step": [165, 171], "98": [165, 171], "notimplementederror": 165, "last_valu": 165, "noth": 165, "about": [165, 167], "suggest": 165, "inject": [165, 166], "optionali": 165, "tensorboard": 165, "stat": 165, "speed": 165, "memory_gb": [165, 171], "max_memory_gb": [165, 171], "500": 165, "final_valid": [165, 171], "experienc": 165, "nativ": [165, 166], "obvious": 165, "earlystoppinghook": 165, "though": [165, 166, 167], "offici": 165, "tweak": 165, "why": [165, 170], "worker": 165, "know": [165, 168, 171], "chief": 165, "handi": 165, "thing": [165, 168, 169], "9": [165, 167, 168, 169, 170, 171], "ve": [165, 167], "trainer_job": [165, 167], "power": [165, 168], "review": 165, "sai": 165, "thousand": 165, "probabl": 165, "don": [165, 166], "11": [165, 167, 168, 169, 170, 171], "itself": 165, "suffici": 165, "few": [165, 167, 168], "drawback": 165, "compris": 165, "part": [165, 168], "mayb": 165, "intermedi": 165, "nlp": 165, "fine": [165, 168], "deploy": 165, "independ": 165, "bigger": 165, "2gb": 165, "too": 165, "abl": [165, 168], "12": [165, 167, 168, 170, 171], "optimized_saved_model": 165, "_model": 165, "technologi": 165, "even": 165, "fix": 165, "13": [165, 167, 168, 169, 170, 171], "_meta": 165, "pbtxt": 165, "usual": [165, 169], "sent": 165, "predict_proto": 165, "predict_saved_model": 165, "17": [165, 167, 168, 171], "wrote": [165, 167], "39": [165, 166, 167, 168, 169], "gt": [165, 168], "alpha_init_average_norm": 165, "5546354055404663": 165, "alpha_init_num_zero": 165, "116": 165, "3018036": 165, "3282471": 165, "372": 165, "45": [165, 169], "examples_per_sec": 165, "11918": 165, "43": 165, "101": 165, "21": [165, 167, 168], "0533333": 165, "3284912": 165, "329": 165, "49": 165, "10543": 165, "83": 165, "201": 165, "7921832": 165, "481": 165, "47": 165, "15406": 165, "301": 165, "3702988": 165, "320": [165, 167, 168], "0000000": 165, "average_loss": 165, "422635876631052e": 165, "4226359e": 165, "ckpt": 165, "meta": 165, "00000": 165, "00001": 165, "1595845092": 165, "successfulli": [165, 167], "init_all_t": 165, "58949345": 165, "1789867": 165, "9973951": 165, "9947897": 165, "hopefulli": 166, "translat": 166, "upon": [166, 167, 169, 171], "idea": 166, "arbirari": 166, "static": 166, "eg": 166, "themselv": 166, "deleg": 166, "registri": 166, "hidden": 166, "remot": 166, "ideal": 166, "enough": 166, "unic": 166, "necessarili": 166, "liter": 166, "singleton": 166, "mutipl": 166, "problem": 166, "solv": 166, "rather": 166, "describ": 166, "full": [166, 167, 170], "treat": 166, "__main__": [166, 169], "convent": 166, "inherit": 166, "datetim": [166, 169], "datemacro": 166, "super": [166, 167, 169], "year": 166, "strftime": [166, 169], "left": 166, "referenc": 166, "model_config": 166, "respons": 166, "unpars": 166, "mainli": [166, 168], "sparingli": 166, "goal": [167, 169], "ll": 167, "dataclass": 167, "shortli": 167, "introduc": 167, "_generator_fn": 167, "_dict_to_exampl": 167, "python_io": 167, "serializetostr": 167, "deseri": 167, "everyth": 167, "builddataset": [167, 169], "advantag": 167, "bodi": 167, "until": 167, "resourc": 167, "With": 167, "12249236": 167, "19407886": 167, "4287153": 167, "11553267": 167, "00252286": 167, "37583396": 167, "9285378": 167, "11992821": 167, "11691252": 167, "54549456": 167, "20779829": 167, "22857946": 167, "82357705": 167, "6685327": 167, "3074787": 167, "18468134": 167, "77053934": 167, "90410686": 167, "00688817": 167, "48377946": 167, "01943498": 167, "5244569": 167, "18175201": 167, "25505018": 167, "9191886": 167, "33966148": 167, "15110607": 167, "10617658": 167, "10038193": 167, "87724835": 167, "64753866": 167, "6283632": 167, "24498472": 167, "38815773": 167, "8574306": 167, "23106533": 167, "00504571": 167, "7516679": 167, "8570756": 167, "23985642": 167, "23382504": 167, "0909891": 167, "41559657": 167, "45715892": 167, "6471541": 167, "3370655": 167, "6149574": 167, "36936268": 167, "5410787": 167, "8082137": 167, "01377634": 167, "9675589": 167, "03886997": 167, "0489138": 167, "36350402": 167, "51010036": 167, "8383772": 167, "67932296": 167, "30221215": 167, "21235317": 167, "20076387": 167, "7544967": 167, "2950773": 167, "2567264": 167, "far": 167, "live": 167, "alongsid": 167, "build_dataset": 167, "anywher": 167, "replic": 167, "could": 167, "hoc": 167, "introduct": [167, 168], "tree": [167, 170], "build_job_config": 167, "reader_config": 167, "18": [167, 168, 171], "prepro_fn_config": 167, "pred_fn_config": 167, "20": [167, 168, 171], "loss_fn_config": 167, "trainer_job_config": 167, "22": 167, "23": 167, "abov": 167, "24": 167, "someth": 167, "leverag": 167, "launch": [167, 170], "25": [167, 168, 170], "yarn_launcher_config": 167, "job_config": 167, "pipeline_yarn": 167, "defaultyarnlauncherconfig": 167, "26": [167, 170], "has_hadoop": [167, 169], "27": [167, 170], "wait": 167, "finish": 167, "minut": 167, "ran": 167, "commit": 167, "reproduc": 167, "put": 167, "togeth": 167, "piplin": 167, "gentl": 168, "demonstr": 168, "stress": 168, "yet": 168, "neural": 168, "lazili": 168, "guid": 168, "synthet": 168, "lt": 168, "datasetv1adapt": 168, "fake": 168, "eager": 168, "hood": 168, "enumer": [168, 171], "026452266": 168, "05290453": 168, "22739638": 168, "45479277": 168, "5724985": 168, "144997": 168, "403317": 168, "806634": 168, "21341616": 168, "42683232": 168, "83121186": 168, "6624237": 168, "3990266": 168, "7980532": 168, "7587566": 168, "5175132": 168, "24581175": 168, "4916235": 168, "40846375": 168, "8169275": 168, "27732524": 168, "5546505": 168, "epoch": 168, "underli": 168, "38533640e": 168, "01": [168, 169, 170], "11415541e": 168, "91451062e": 168, "02": [168, 170], "71378195e": 168, "19314665e": 168, "07208991e": 168, "07405782e": 168, "14489564e": 168, "24138966e": 168, "16671121e": 168, "33591374e": 168, "04": [168, 170], "69159013e": 168, "05574089e": 168, "81275201e": 168, "54333931e": 168, "23030204e": 168, "02127731e": 168, "13016793e": 168, "41403484e": 168, "13585055e": 168, "33147994e": 168, "54389381e": 168, "09324920e": 168, "17527759e": 168, "62713879e": 168, "71976054e": 168, "55039740e": 168, "46606708e": 168, "55176270e": 168, "10764825e": 168, "98475403e": 168, "92478955e": 168, "6770673e": 168, "00": 168, "0228311e": 168, "8290212e": 168, "3427564e": 168, "4386293e": 168, "1441798e": 168, "2148116e": 168, "2897913e": 168, "4827793e": 168, "0333422e": 168, "6718275e": 168, "3831803e": 168, "1114818e": 168, "9625504e": 168, "0866786e": 168, "4606041e": 168, "2042555e": 168, "2603359e": 168, "6828070e": 168, "2271701e": 168, "6629599e": 168, "3087788e": 168, "6186498e": 168, "0350555e": 168, "2542776e": 168, "4395211e": 168, "1007948e": 168, "9321342e": 168, "7103525e": 168, "2152965e": 168, "9969508e": 168, "8495791e": 168, "quickli": 168, "pretti": 168, "alpha": 168, "isinst": 168, "34": 168, "mul": 168, "global_variables_initi": 168, "6913518": 168, "reduce_sum": 168, "sinc": 168, "5611915e": 168, "inde": 168, "get_variable_valu": 168, "0000005": 168, "hyperparamet": 169, "search": [169, 170, 171], "vari": 169, "hp": 169, "841d3f9f2ba4b69921b426a81fd": 169, "mlflow_tracking_uri": 169, "script": 169, "my_seeded_study_nam": 169, "logspac": 169, "num": 169, "sleep": 169, "06": [169, 170], "40": 169, "05994842503189409": 169, "007742636826811269": 169, "03593813663804626": 169, "001": [169, 171], "prepar": 170, "trainerjob": 170, "visual": 170, "knn": 170, "lint": 170, "tool": 170, "contribut": 170, "contributor": 170, "coverag": 170, "style": 170, "2021": 170, "29": 170, "09": 170, "page": 170, "dataset_path": 171, "getcwd": 171, "path_data": 171, "gz": 171, "100_000": 171, "10_000": 171, "tripl": 171, "hyperparam": 171, "consol": 171, "300": 171, "5_000": 171, "save_checkpoints_step": 171, "save_summary_step": 171, "keep_checkpoint_max": 171, "log_step_count_step": 171, "nearest": 171, "neighboor": 171, "15774000000000002": 171, "22966825396825397": 171, "17782589040302665": 171, "218460915855854": 171, "12564500000000003": 171, "29865131767226577": 171, "16083200785947185": 171, "24568841120719748": 171, "08614800000000002": 171, "44487653142758526": 171, "1303801216635994": 171, "3022301157999229": 171, "sens": 171, "titl": 171, "known": 171, "pq": 171, "pc": 171, "ipython": 171, "displai": 171, "panda": 171, "vstack": 171, "read_tabl": 171, "to_panda": 171, "to_numpi": 171, "mapp": 171, "movie_id": 171, "inversed_map": 171, "indexflatip": 171, "ascontiguousarrai": 171, "knn_queri": 171, "ksearch": 171, "expand_dim": 171, "distanc": 171, "product_indic": 171, "product_id": 171, "read_csv": 171, "display_results_df": 171, "movieid": 171, "genr": 171, "display_movi": 171, "p": 171, "star": 171, "war": 171, "action": 171, "adventur": 171, "sci": 171, "fi": 171, "episod": 171, "iv": 171, "hope": 171, "1977": 171, "765795": 171, "vi": 171, "jedi": 171, "1983": 171, "477997": 171, "v": 171, "empir": 171, "strike": 171, "back": 171, "837748": 171, "thriller": 171, "trek": 171, "contact": 171, "1996": 171, "092430": 171, "children": 171, "comedi": 171, "fantasi": 171, "music": 171, "willi": 171, "wonka": 171, "amp": 171, "chocol": 171, "1971": 171, "858896": 171, "relat": 171}, "objects": {"": [[132, 0, 0, "-", "deepr"]], "deepr": [[133, 0, 0, "-", "cli"], [134, 0, 0, "-", "config"], [135, 0, 0, "-", "examples"], [149, 0, 0, "-", "exporters"], [150, 0, 0, "-", "hooks"], [151, 0, 0, "-", "initializers"], [152, 0, 0, "-", "io"], [153, 0, 0, "-", "jobs"], [154, 0, 0, "-", "layers"], [155, 0, 0, "-", "macros"], [156, 0, 0, "-", "metrics"], [157, 0, 0, "-", "optimizers"], [158, 0, 0, "-", "predictors"], [159, 0, 0, "-", "prepros"], [160, 0, 0, "-", "readers"], [161, 0, 0, "-", "utils"], [132, 0, 0, "-", "version"], [162, 0, 0, "-", "vocab"], [163, 0, 0, "-", "writers"]], "deepr.cli": [[133, 0, 0, "-", "main"]], "deepr.cli.main": [[133, 1, 1, "", "add_macro"], [133, 1, 1, "", "download_config_and_macros_from_mlflow"], [133, 1, 1, "", "from_config_and_macros"], [133, 1, 1, "", "main"], [133, 1, 1, "", "run"]], "deepr.config": [[0, 1, 1, "", "assert_no_macros"], [134, 0, 0, "-", "base"], [134, 0, 0, "-", "experimental"], [1, 1, 1, "", "fill_macros"], [2, 1, 1, "", "fill_references"], [3, 1, 1, "", "from_config"], [4, 1, 1, "", "ismacro"], [5, 1, 1, "", "isreference"], [134, 0, 0, "-", "macros"], [6, 1, 1, "", "parse_config"], [134, 0, 0, "-", "references"]], "deepr.config.base": [[134, 1, 1, "", "from_config"], [134, 1, 1, "", "parse_config"]], "deepr.config.experimental": [[134, 1, 1, "", "add_macro_params"], [134, 1, 1, "", "find_values"], [134, 1, 1, "", "replace_values"], [134, 1, 1, "", "to_config"]], "deepr.config.macros": [[134, 1, 1, "", "assert_no_macros"], [134, 1, 1, "", "fill_macros"], [134, 1, 1, "", "find_macro_params"], [134, 1, 1, "", "get_macro_and_param"], [134, 1, 1, "", "ismacro"], [134, 1, 1, "", "macros_eval_order"]], "deepr.config.references": [[134, 1, 1, "", "default_references"], [134, 1, 1, "", "fill_references"], [134, 1, 1, "", "isreference"]], "deepr.examples": [[136, 0, 0, "-", "movielens"], [144, 0, 0, "-", "multiply"]], "deepr.examples.movielens": [[137, 0, 0, "-", "jobs"], [138, 0, 0, "-", "layers"], [139, 0, 0, "-", "macros"], [140, 0, 0, "-", "metrics"], [141, 0, 0, "-", "prepros"], [142, 0, 0, "-", "readers"], [143, 0, 0, "-", "utils"]], "deepr.examples.movielens.jobs": [[137, 0, 0, "-", "build_records"], [137, 0, 0, "-", "evaluate"], [137, 0, 0, "-", "init"], [137, 0, 0, "-", "predict"], [137, 0, 0, "-", "svd"]], "deepr.examples.movielens.jobs.build_records": [[137, 2, 1, "", "BuildRecords"], [137, 1, 1, "", "get_timelines"], [137, 1, 1, "", "records_generator"], [137, 1, 1, "", "write_records"]], "deepr.examples.movielens.jobs.build_records.BuildRecords": [[137, 3, 1, "", "min_length"], [137, 3, 1, "", "min_rating"], [137, 3, 1, "", "num_negatives"], [137, 3, 1, "", "path_eval"], [137, 3, 1, "", "path_mapping"], [137, 3, 1, "", "path_ratings"], [137, 3, 1, "", "path_test"], [137, 3, 1, "", "path_train"], [137, 4, 1, "", "run"], [137, 3, 1, "", "seed"], [137, 3, 1, "", "shuffle_timelines"], [137, 3, 1, "", "size_eval"], [137, 3, 1, "", "size_test"], [137, 3, 1, "", "target_ratio"]], "deepr.examples.movielens.jobs.evaluate": [[137, 2, 1, "", "Evaluate"], [137, 1, 1, "", "compute_metrics"], [137, 1, 1, "", "ndcg_score"], [137, 1, 1, "", "precision_recall_f1"]], "deepr.examples.movielens.jobs.evaluate.Evaluate": [[137, 3, 1, "", "k"], [137, 3, 1, "", "num_queries"], [137, 3, 1, "", "path_biases"], [137, 3, 1, "", "path_embeddings"], [137, 3, 1, "", "path_predictions"], [137, 4, 1, "", "run"], [137, 3, 1, "", "use_mlflow"]], "deepr.examples.movielens.jobs.init": [[137, 2, 1, "", "InitCheckpoint"]], "deepr.examples.movielens.jobs.init.InitCheckpoint": [[137, 3, 1, "", "normalize"], [137, 3, 1, "", "normalize_counts"], [137, 3, 1, "", "path_counts"], [137, 3, 1, "", "path_embeddings"], [137, 3, 1, "", "path_init_ckpt"], [137, 4, 1, "", "run"], [137, 3, 1, "", "use_log_counts"]], "deepr.examples.movielens.jobs.predict": [[137, 2, 1, "", "Predict"]], "deepr.examples.movielens.jobs.predict.Predict": [[137, 3, 1, "", "input_fn"], [137, 3, 1, "", "path_predictions"], [137, 3, 1, "", "path_saved_model"], [137, 3, 1, "", "prepro_fn"], [137, 4, 1, "", "run"]], "deepr.examples.movielens.jobs.svd": [[137, 2, 1, "", "SVD"], [137, 1, 1, "", "compute_coocurrence"], [137, 1, 1, "", "compute_pmi"]], "deepr.examples.movielens.jobs.svd.SVD": [[137, 3, 1, "", "dim"], [137, 3, 1, "", "min_count"], [137, 3, 1, "", "path_counts"], [137, 3, 1, "", "path_csv"], [137, 3, 1, "", "path_embeddings"], [137, 4, 1, "", "run"], [137, 3, 1, "", "vocab_size"]], "deepr.examples.movielens.layers": [[138, 0, 0, "-", "average"], [138, 0, 0, "-", "bpr"], [138, 0, 0, "-", "losses"], [138, 0, 0, "-", "multi"], [138, 0, 0, "-", "ns"], [138, 0, 0, "-", "transformer"], [138, 0, 0, "-", "vae"]], "deepr.examples.movielens.layers.average": [[138, 2, 1, "", "AddBias"], [138, 1, 1, "", "AverageModel"], [138, 2, 1, "", "Logits"], [138, 2, 1, "", "Projection"], [138, 2, 1, "", "UserEmbedding"]], "deepr.examples.movielens.layers.average.AddBias": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.average.Logits": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.average.Projection": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.average.UserEmbedding": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.bpr": [[138, 1, 1, "", "BPRLoss"]], "deepr.examples.movielens.layers.losses": [[138, 2, 1, "", "L2Loss"], [138, 1, 1, "", "Loss"], [138, 1, 1, "", "VAELoss"]], "deepr.examples.movielens.layers.losses.L2Loss": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.multi": [[138, 1, 1, "", "MultiLogLikelihoodCSS"]], "deepr.examples.movielens.layers.ns": [[138, 1, 1, "", "NegativeSampling"]], "deepr.examples.movielens.layers.transformer": [[138, 2, 1, "", "Logits"], [138, 1, 1, "", "TransformerModel"]], "deepr.examples.movielens.layers.transformer.Logits": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.vae": [[138, 2, 1, "", "AddBias"], [138, 2, 1, "", "Decode"], [138, 2, 1, "", "Encode"], [138, 2, 1, "", "GaussianNoise"], [138, 2, 1, "", "Logits"], [138, 2, 1, "", "Projection"], [138, 1, 1, "", "VAEModel"], [138, 2, 1, "", "WeightedSum"]], "deepr.examples.movielens.layers.vae.AddBias": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.vae.Decode": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.vae.Encode": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.vae.GaussianNoise": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.vae.Logits": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.vae.Projection": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.layers.vae.WeightedSum": [[138, 4, 1, "", "forward"]], "deepr.examples.movielens.macros": [[139, 0, 0, "-", "paths"]], "deepr.examples.movielens.macros.paths": [[139, 2, 1, "", "Paths"]], "deepr.examples.movielens.metrics": [[140, 0, 0, "-", "ndcg"], [140, 0, 0, "-", "recall"]], "deepr.examples.movielens.metrics.ndcg": [[140, 2, 1, "", "NDCGAtK"]], "deepr.examples.movielens.metrics.ndcg.NDCGAtK": [[140, 3, 1, "", "inputs"], [140, 3, 1, "", "k"], [140, 3, 1, "", "logits"], [140, 3, 1, "", "name"], [140, 3, 1, "", "targets"]], "deepr.examples.movielens.metrics.recall": [[140, 2, 1, "", "RecallAtK"]], "deepr.examples.movielens.metrics.recall.RecallAtK": [[140, 3, 1, "", "inputs"], [140, 3, 1, "", "k"], [140, 3, 1, "", "logits"], [140, 3, 1, "", "name"], [140, 3, 1, "", "targets"]], "deepr.examples.movielens.prepros": [[141, 0, 0, "-", "csv"], [141, 0, 0, "-", "record"]], "deepr.examples.movielens.prepros.csv": [[141, 1, 1, "", "CSVPrepro"], [141, 2, 1, "", "RandomNegatives"], [141, 2, 1, "", "SequenceMask"]], "deepr.examples.movielens.prepros.csv.RandomNegatives": [[141, 4, 1, "", "forward"]], "deepr.examples.movielens.prepros.csv.SequenceMask": [[141, 4, 1, "", "forward"]], "deepr.examples.movielens.prepros.record": [[141, 1, 1, "", "RecordPrepro"], [141, 2, 1, "", "SequenceMask"]], "deepr.examples.movielens.prepros.record.SequenceMask": [[141, 4, 1, "", "forward"]], "deepr.examples.movielens.readers": [[142, 0, 0, "-", "csv"]], "deepr.examples.movielens.readers.csv": [[142, 2, 1, "", "TestCSVReader"], [142, 2, 1, "", "TrainCSVReader"]], "deepr.examples.movielens.readers.csv.TestCSVReader": [[142, 4, 1, "", "as_dataset"]], "deepr.examples.movielens.readers.csv.TrainCSVReader": [[142, 4, 1, "", "as_dataset"]], "deepr.examples.movielens.utils": [[143, 0, 0, "-", "fields"]], "deepr.examples.movielens.utils.fields": [[143, 1, 1, "", "INPUT_POSITIVES_ONE_HOT"], [143, 1, 1, "", "TARGET_POSITIVES_ONE_HOT"]], "deepr.examples.multiply": [[145, 0, 0, "-", "jobs"], [146, 0, 0, "-", "layers"], [147, 0, 0, "-", "macros"], [148, 0, 0, "-", "prepros"]], "deepr.examples.multiply.jobs": [[145, 0, 0, "-", "build"], [145, 0, 0, "-", "predict"]], "deepr.examples.multiply.jobs.build": [[145, 2, 1, "", "Build"]], "deepr.examples.multiply.jobs.build.Build": [[145, 3, 1, "", "num_examples"], [145, 3, 1, "", "path_dataset"], [145, 4, 1, "", "run"]], "deepr.examples.multiply.jobs.predict": [[145, 2, 1, "", "PredictProto"], [145, 2, 1, "", "PredictSavedModel"]], "deepr.examples.multiply.jobs.predict.PredictProto": [[145, 3, 1, "", "feeds"], [145, 3, 1, "", "fetches"], [145, 3, 1, "", "graph_name"], [145, 3, 1, "", "input_fn"], [145, 3, 1, "", "path_model"], [145, 3, 1, "", "prepro_fn"], [145, 4, 1, "", "run"]], "deepr.examples.multiply.jobs.predict.PredictSavedModel": [[145, 3, 1, "", "feeds"], [145, 3, 1, "", "fetches"], [145, 3, 1, "", "input_fn"], [145, 3, 1, "", "path_saved_model"], [145, 3, 1, "", "prepro_fn"], [145, 4, 1, "", "run"]], "deepr.examples.multiply.layers": [[146, 0, 0, "-", "loss"], [146, 0, 0, "-", "model"]], "deepr.examples.multiply.layers.loss": [[146, 2, 1, "", "SquaredL2"]], "deepr.examples.multiply.layers.loss.SquaredL2": [[146, 4, 1, "", "forward"]], "deepr.examples.multiply.layers.model": [[146, 2, 1, "", "Multiply"]], "deepr.examples.multiply.layers.model.Multiply": [[146, 4, 1, "", "forward"]], "deepr.examples.multiply.macros": [[147, 0, 0, "-", "paths"]], "deepr.examples.multiply.macros.paths": [[147, 2, 1, "", "Paths"]], "deepr.examples.multiply.prepros": [[148, 0, 0, "-", "default"], [148, 0, 0, "-", "inference"]], "deepr.examples.multiply.prepros.default": [[148, 1, 1, "", "DefaultPrepro"]], "deepr.examples.multiply.prepros.inference": [[148, 1, 1, "", "InferencePrepro"]], "deepr.exporters": [[7, 2, 1, "", "BestCheckpoint"], [8, 2, 1, "", "Exporter"], [9, 2, 1, "", "SaveVariables"], [10, 2, 1, "", "SavedModel"], [149, 0, 0, "-", "base"], [149, 0, 0, "-", "best_checkpoint"], [149, 0, 0, "-", "save_variables"], [149, 0, 0, "-", "saved_model"]], "deepr.exporters.BestCheckpoint": [[7, 4, 1, "", "__init__"], [7, 3, 1, "", "metric"], [7, 3, 1, "", "mode"], [7, 3, 1, "", "tag"], [7, 3, 1, "", "use_mlflow"]], "deepr.exporters.Exporter": [[8, 4, 1, "", "__init__"]], "deepr.exporters.SaveVariables": [[9, 4, 1, "", "__init__"], [9, 3, 1, "", "chunk_size"], [9, 3, 1, "", "compression"], [9, 3, 1, "", "path_variables"], [9, 3, 1, "", "variable_names"]], "deepr.exporters.SavedModel": [[10, 4, 1, "", "__init__"], [10, 3, 1, "", "fields"], [10, 3, 1, "", "path_saved_model"]], "deepr.exporters.base": [[149, 2, 1, "", "Exporter"]], "deepr.exporters.base.Exporter": [[149, 4, 1, "", "export"]], "deepr.exporters.best_checkpoint": [[149, 2, 1, "", "BestCheckpoint"], [149, 2, 1, "", "BestMode"], [149, 1, 1, "", "read_eval_metrics"]], "deepr.exporters.best_checkpoint.BestCheckpoint": [[149, 4, 1, "", "export"], [149, 3, 1, "", "metric"], [149, 3, 1, "", "mode"], [149, 3, 1, "", "tag"], [149, 3, 1, "", "use_mlflow"]], "deepr.exporters.best_checkpoint.BestMode": [[149, 3, 1, "", "DECREASE"], [149, 3, 1, "", "INCREASE"]], "deepr.exporters.save_variables": [[149, 2, 1, "", "SaveVariables"]], "deepr.exporters.save_variables.SaveVariables": [[149, 3, 1, "", "chunk_size"], [149, 3, 1, "", "compression"], [149, 4, 1, "", "export"], [149, 3, 1, "", "path_variables"], [149, 3, 1, "", "variable_names"]], "deepr.exporters.saved_model": [[149, 2, 1, "", "SavedModel"]], "deepr.exporters.saved_model.SavedModel": [[149, 4, 1, "", "export"], [149, 3, 1, "", "fields"], [149, 3, 1, "", "path_saved_model"]], "deepr.hooks": [[11, 2, 1, "", "EarlyStoppingHookFactory"], [12, 2, 1, "", "EstimatorHookFactory"], [13, 2, 1, "", "LoggingTensorHookFactory"], [14, 2, 1, "", "MaxResidentMemory"], [15, 2, 1, "", "ResidentMemory"], [16, 2, 1, "", "StepsPerSecHook"], [17, 2, 1, "", "SummarySaverHookFactory"], [18, 2, 1, "", "TensorHookFactory"], [150, 0, 0, "-", "base"], [150, 0, 0, "-", "early_stopping"], [150, 0, 0, "-", "log_variables_init"], [150, 0, 0, "-", "logging_tensor"], [150, 0, 0, "-", "num_params"], [150, 0, 0, "-", "steps_per_sec"], [150, 0, 0, "-", "summary"]], "deepr.hooks.EarlyStoppingHookFactory": [[11, 4, 1, "", "__init__"], [11, 3, 1, "", "final_step"], [11, 3, 1, "", "max_steps_without_improvement"], [11, 3, 1, "", "metric"], [11, 3, 1, "", "min_steps"], [11, 3, 1, "", "mode"], [11, 3, 1, "", "run_every_secs"], [11, 3, 1, "", "run_every_steps"]], "deepr.hooks.EstimatorHookFactory": [[12, 4, 1, "", "__init__"]], "deepr.hooks.LoggingTensorHookFactory": [[13, 4, 1, "", "__init__"], [13, 3, 1, "", "formatter"], [13, 3, 1, "", "functions"], [13, 3, 1, "", "name"], [13, 3, 1, "", "skip_after_step"], [13, 3, 1, "", "tensors"], [13, 3, 1, "", "use_graphite"], [13, 3, 1, "", "use_mlflow"]], "deepr.hooks.MaxResidentMemory": [[14, 4, 1, "", "__init__"]], "deepr.hooks.ResidentMemory": [[15, 4, 1, "", "__init__"]], "deepr.hooks.StepsPerSecHook": [[16, 4, 1, "", "__init__"], [16, 3, 1, "", "batch_size"], [16, 3, 1, "", "prefix"], [16, 3, 1, "", "skip_after_step"], [16, 3, 1, "", "use_graphite"], [16, 3, 1, "", "use_mlflow"]], "deepr.hooks.SummarySaverHookFactory": [[17, 4, 1, "", "__init__"]], "deepr.hooks.TensorHookFactory": [[18, 4, 1, "", "__init__"]], "deepr.hooks.base": [[150, 2, 1, "", "EstimatorHookFactory"], [150, 2, 1, "", "TensorHookFactory"]], "deepr.hooks.early_stopping": [[150, 2, 1, "", "EarlyStoppingHookFactory"]], "deepr.hooks.early_stopping.EarlyStoppingHookFactory": [[150, 3, 1, "", "final_step"], [150, 3, 1, "", "max_steps_without_improvement"], [150, 3, 1, "", "metric"], [150, 3, 1, "", "min_steps"], [150, 3, 1, "", "mode"], [150, 3, 1, "", "run_every_secs"], [150, 3, 1, "", "run_every_steps"]], "deepr.hooks.log_variables_init": [[150, 2, 1, "", "LogVariablesInitHook"]], "deepr.hooks.log_variables_init.LogVariablesInitHook": [[150, 4, 1, "", "after_create_session"]], "deepr.hooks.logging_tensor": [[150, 2, 1, "", "LoggingTensorHook"], [150, 2, 1, "", "LoggingTensorHookFactory"], [150, 2, 1, "", "MaxResidentMemory"], [150, 2, 1, "", "ResidentMemory"]], "deepr.hooks.logging_tensor.LoggingTensorHookFactory": [[150, 3, 1, "", "formatter"], [150, 3, 1, "", "functions"], [150, 3, 1, "", "name"], [150, 3, 1, "", "skip_after_step"], [150, 3, 1, "", "tensors"], [150, 3, 1, "", "use_graphite"], [150, 3, 1, "", "use_mlflow"]], "deepr.hooks.num_params": [[150, 2, 1, "", "NumParamsHook"], [150, 1, 1, "", "get_num_params"]], "deepr.hooks.num_params.NumParamsHook": [[150, 4, 1, "", "after_create_session"]], "deepr.hooks.steps_per_sec": [[150, 2, 1, "", "StepsPerSecHook"]], "deepr.hooks.steps_per_sec.StepsPerSecHook": [[150, 3, 1, "", "batch_size"], [150, 3, 1, "", "prefix"], [150, 3, 1, "", "skip_after_step"], [150, 3, 1, "", "use_graphite"], [150, 3, 1, "", "use_mlflow"]], "deepr.hooks.summary": [[150, 2, 1, "", "SummarySaverHookFactory"]], "deepr.initializers": [[19, 2, 1, "", "CheckpointInitializer"], [151, 0, 0, "-", "checkpoint_initializer"]], "deepr.initializers.CheckpointInitializer": [[19, 4, 1, "", "__init__"]], "deepr.initializers.checkpoint_initializer": [[151, 2, 1, "", "CheckpointInitializer"]], "deepr.io": [[20, 2, 1, "", "HDFSFileSystem"], [21, 2, 1, "", "ParquetDataset"], [22, 2, 1, "", "Path"], [152, 0, 0, "-", "hdfs"], [152, 0, 0, "-", "json"], [152, 0, 0, "-", "parquet"], [152, 0, 0, "-", "path"], [23, 1, 1, "", "read_json"]], "deepr.io.HDFSFileSystem": [[20, 4, 1, "", "__init__"]], "deepr.io.ParquetDataset": [[21, 4, 1, "", "__init__"], [21, 3, 1, "", "filesystem"], [21, 3, 1, "", "path_or_paths"]], "deepr.io.Path": [[22, 4, 1, "", "__init__"]], "deepr.io.hdfs": [[152, 2, 1, "", "HDFSFile"], [152, 2, 1, "", "HDFSFileSystem"]], "deepr.io.hdfs.HDFSFile": [[152, 3, 1, "", "filesystem"], [152, 3, 1, "", "mode"], [152, 3, 1, "", "path"], [152, 4, 1, "", "read"], [152, 4, 1, "", "readlines"], [152, 4, 1, "", "write"]], "deepr.io.json": [[152, 1, 1, "", "is_json"], [152, 1, 1, "", "load_json"], [152, 1, 1, "", "read_json"], [152, 1, 1, "", "write_json"]], "deepr.io.parquet": [[152, 2, 1, "", "ParquetDataset"]], "deepr.io.parquet.ParquetDataset": [[152, 3, 1, "", "filesystem"], [152, 5, 1, "", "is_hdfs"], [152, 5, 1, "", "is_local"], [152, 4, 1, "", "open"], [152, 3, 1, "", "path_or_paths"], [152, 5, 1, "", "pq_dataset"], [152, 4, 1, "", "read"], [152, 4, 1, "", "read_pandas"], [152, 4, 1, "", "write"], [152, 4, 1, "", "write_pandas"]], "deepr.io.path": [[152, 2, 1, "", "Path"]], "deepr.io.path.Path": [[152, 4, 1, "", "copy_dir"], [152, 4, 1, "", "copy_file"], [152, 4, 1, "", "delete"], [152, 4, 1, "", "delete_dir"], [152, 4, 1, "", "exists"], [152, 4, 1, "", "glob"], [152, 4, 1, "", "is_dir"], [152, 4, 1, "", "is_file"], [152, 5, 1, "", "is_hdfs"], [152, 5, 1, "", "is_local"], [152, 4, 1, "", "iterdir"], [152, 4, 1, "", "mkdir"], [152, 5, 1, "", "name"], [152, 4, 1, "", "open"], [152, 5, 1, "", "parent"], [152, 5, 1, "", "suffix"]], "deepr.jobs": [[24, 2, 1, "", "CleanupCheckpoints"], [25, 2, 1, "", "CopyDir"], [26, 2, 1, "", "ExportXlaModelMetadata"], [27, 2, 1, "", "GridSampler"], [28, 2, 1, "", "Job"], [29, 2, 1, "", "LogMetric"], [30, 2, 1, "", "MLFlowSaveConfigs"], [31, 2, 1, "", "MLFlowSaveInfo"], [32, 2, 1, "", "OptimizeSavedModel"], [33, 2, 1, "", "ParamsSampler"], [34, 2, 1, "", "ParamsTuner"], [35, 2, 1, "", "Pipeline"], [36, 2, 1, "", "Sampler"], [37, 2, 1, "", "SaveDataset"], [38, 2, 1, "", "Trainer"], [39, 2, 1, "", "YarnLauncher"], [40, 2, 1, "", "YarnTrainer"], [153, 0, 0, "-", "base"], [153, 0, 0, "-", "cleanup_checkpoints"], [153, 0, 0, "-", "combinators"], [153, 0, 0, "-", "copy_dir"], [153, 0, 0, "-", "evaluate"], [153, 0, 0, "-", "export_xla_model_metadata"], [153, 0, 0, "-", "log_metric"], [153, 0, 0, "-", "mlflow_save_configs"], [153, 0, 0, "-", "mlflow_save_info"], [153, 0, 0, "-", "optimize_saved_model"], [153, 0, 0, "-", "params_tuner"], [153, 0, 0, "-", "save_dataset"], [153, 0, 0, "-", "trainer"], [153, 0, 0, "-", "trainer_base"], [153, 0, 0, "-", "trainer_keras"], [153, 0, 0, "-", "yarn_config"], [153, 0, 0, "-", "yarn_launcher"], [153, 0, 0, "-", "yarn_trainer"]], "deepr.jobs.CleanupCheckpoints": [[24, 4, 1, "", "__init__"]], "deepr.jobs.CopyDir": [[25, 4, 1, "", "__init__"]], "deepr.jobs.ExportXlaModelMetadata": [[26, 4, 1, "", "__init__"], [26, 3, 1, "", "feed_shapes"], [26, 3, 1, "", "fetch_shapes"], [26, 3, 1, "", "graph_name"], [26, 3, 1, "", "metadata_name"], [26, 3, 1, "", "path_metadata"], [26, 3, 1, "", "path_optimized_model"]], "deepr.jobs.GridSampler": [[27, 4, 1, "", "__init__"]], "deepr.jobs.Job": [[28, 4, 1, "", "__init__"]], "deepr.jobs.LogMetric": [[29, 4, 1, "", "__init__"]], "deepr.jobs.MLFlowSaveConfigs": [[30, 4, 1, "", "__init__"]], "deepr.jobs.MLFlowSaveInfo": [[31, 4, 1, "", "__init__"]], "deepr.jobs.OptimizeSavedModel": [[32, 4, 1, "", "__init__"], [32, 3, 1, "", "blacklisted_variables"], [32, 3, 1, "", "feeds"], [32, 3, 1, "", "fetch"], [32, 3, 1, "", "graph_name"], [32, 3, 1, "", "new_names"], [32, 3, 1, "", "path_optimized_model"], [32, 3, 1, "", "path_saved_model"]], "deepr.jobs.ParamsSampler": [[33, 4, 1, "", "__init__"]], "deepr.jobs.ParamsTuner": [[34, 4, 1, "", "__init__"]], "deepr.jobs.Pipeline": [[35, 4, 1, "", "__init__"]], "deepr.jobs.Sampler": [[36, 4, 1, "", "__init__"]], "deepr.jobs.SaveDataset": [[37, 4, 1, "", "__init__"]], "deepr.jobs.Trainer": [[38, 4, 1, "", "__init__"], [38, 3, 1, "", "config_proto"], [38, 3, 1, "", "eval_hooks"], [38, 3, 1, "", "eval_input_fn"], [38, 3, 1, "", "eval_metrics"], [38, 3, 1, "", "eval_spec"], [38, 3, 1, "", "exporters"], [38, 3, 1, "", "initializer_fn"], [38, 3, 1, "", "loss_fn"], [38, 3, 1, "", "optimizer_fn"], [38, 3, 1, "", "path_model"], [38, 3, 1, "", "pred_fn"], [38, 3, 1, "", "prepro_fn"], [38, 3, 1, "", "run_config"], [38, 3, 1, "", "train_hooks"], [38, 3, 1, "", "train_input_fn"], [38, 3, 1, "", "train_metrics"], [38, 3, 1, "", "train_spec"]], "deepr.jobs.YarnLauncher": [[39, 4, 1, "", "__init__"]], "deepr.jobs.YarnTrainer": [[40, 4, 1, "", "__init__"]], "deepr.jobs.base": [[153, 2, 1, "", "Job"]], "deepr.jobs.base.Job": [[153, 4, 1, "", "run"]], "deepr.jobs.cleanup_checkpoints": [[153, 2, 1, "", "CleanupCheckpoints"]], "deepr.jobs.cleanup_checkpoints.CleanupCheckpoints": [[153, 3, 1, "", "path_checkpoints"], [153, 3, 1, "", "path_model"], [153, 4, 1, "", "run"]], "deepr.jobs.combinators": [[153, 2, 1, "", "Pipeline"]], "deepr.jobs.combinators.Pipeline": [[153, 3, 1, "", "jobs"], [153, 4, 1, "", "run"]], "deepr.jobs.copy_dir": [[153, 2, 1, "", "CopyDir"]], "deepr.jobs.copy_dir.CopyDir": [[153, 3, 1, "", "overwrite"], [153, 4, 1, "", "run"], [153, 3, 1, "", "skip_copy"], [153, 3, 1, "", "source"], [153, 3, 1, "", "target"]], "deepr.jobs.evaluate": [[153, 2, 1, "", "Evaluate"]], "deepr.jobs.evaluate.Evaluate": [[153, 3, 1, "", "hooks"], [153, 3, 1, "", "input_fn"], [153, 3, 1, "", "loss_fn"], [153, 3, 1, "", "metrics"], [153, 3, 1, "", "path_model"], [153, 3, 1, "", "pred_fn"], [153, 4, 1, "", "prepro_fn"], [153, 4, 1, "", "run"], [153, 3, 1, "", "spec"]], "deepr.jobs.export_xla_model_metadata": [[153, 2, 1, "", "ExportXlaModelMetadata"], [153, 1, 1, "", "add_metadata_item"], [153, 1, 1, "", "get_nodes"]], "deepr.jobs.export_xla_model_metadata.ExportXlaModelMetadata": [[153, 3, 1, "id0", "feed_shapes"], [153, 3, 1, "id1", "fetch_shapes"], [153, 3, 1, "id2", "graph_name"], [153, 3, 1, "id3", "metadata_name"], [153, 3, 1, "id4", "path_metadata"], [153, 3, 1, "id5", "path_optimized_model"], [153, 4, 1, "", "run"]], "deepr.jobs.log_metric": [[153, 2, 1, "", "LogMetric"]], "deepr.jobs.log_metric.LogMetric": [[153, 3, 1, "", "key"], [153, 4, 1, "", "run"], [153, 3, 1, "", "use_mlflow"], [153, 3, 1, "", "value"]], "deepr.jobs.mlflow_save_configs": [[153, 2, 1, "", "MLFlowFormatter"], [153, 2, 1, "", "MLFlowSaveConfigs"]], "deepr.jobs.mlflow_save_configs.MLFlowFormatter": [[153, 3, 1, "", "include_keys"], [153, 3, 1, "", "skip_keys"], [153, 3, 1, "", "skip_values"]], "deepr.jobs.mlflow_save_configs.MLFlowSaveConfigs": [[153, 3, 1, "", "config"], [153, 3, 1, "", "formatter"], [153, 3, 1, "", "macros"], [153, 3, 1, "", "macros_eval"], [153, 4, 1, "", "run"], [153, 3, 1, "", "use_mlflow"]], "deepr.jobs.mlflow_save_info": [[153, 2, 1, "", "MLFlowSaveInfo"]], "deepr.jobs.mlflow_save_info.MLFlowSaveInfo": [[153, 3, 1, "", "experiment_id"], [153, 3, 1, "", "path_mlflow"], [153, 4, 1, "", "run"], [153, 3, 1, "", "run_id"], [153, 3, 1, "", "run_uuid"], [153, 3, 1, "", "use_mlflow"]], "deepr.jobs.optimize_saved_model": [[153, 2, 1, "", "OptimizeSavedModel"], [153, 6, 1, "", "TensorsNotFoundError"], [153, 1, 1, "", "make_placeholders"], [153, 1, 1, "", "rename_nodes"]], "deepr.jobs.optimize_saved_model.OptimizeSavedModel": [[153, 3, 1, "id6", "blacklisted_variables"], [153, 3, 1, "id7", "feeds"], [153, 3, 1, "id8", "fetch"], [153, 3, 1, "id9", "graph_name"], [153, 3, 1, "id10", "new_names"], [153, 3, 1, "id11", "path_optimized_model"], [153, 3, 1, "id12", "path_saved_model"], [153, 4, 1, "", "run"]], "deepr.jobs.params_tuner": [[153, 2, 1, "", "GridSampler"], [153, 2, 1, "", "ParamsSampler"], [153, 2, 1, "", "ParamsTuner"], [153, 2, 1, "", "Sampler"]], "deepr.jobs.params_tuner.ParamsTuner": [[153, 3, 1, "", "job"], [153, 3, 1, "", "macros"], [153, 4, 1, "", "run"], [153, 3, 1, "", "sampler"]], "deepr.jobs.save_dataset": [[153, 2, 1, "", "SaveDataset"]], "deepr.jobs.save_dataset.SaveDataset": [[153, 3, 1, "", "chunk_size"], [153, 3, 1, "", "compression_type"], [153, 3, 1, "", "fields"], [153, 3, 1, "", "input_fn"], [153, 3, 1, "", "mode"], [153, 3, 1, "", "num_parallel_calls"], [153, 3, 1, "", "path"], [153, 4, 1, "", "prepro_fn"], [153, 4, 1, "", "run"], [153, 3, 1, "", "secs"]], "deepr.jobs.trainer": [[153, 2, 1, "", "ConfigProto"], [153, 2, 1, "", "EvalSpec"], [153, 2, 1, "", "FinalSpec"], [153, 2, 1, "", "RunConfig"], [153, 2, 1, "", "TrainSpec"], [153, 2, 1, "", "Trainer"], [153, 1, 1, "", "model_fn"]], "deepr.jobs.trainer.Trainer": [[153, 3, 1, "id13", "config_proto"], [153, 4, 1, "", "create_experiment"], [153, 3, 1, "id14", "eval_hooks"], [153, 3, 1, "id15", "eval_input_fn"], [153, 3, 1, "id16", "eval_metrics"], [153, 3, 1, "id17", "eval_spec"], [153, 3, 1, "id18", "exporters"], [153, 3, 1, "", "final_hooks"], [153, 3, 1, "", "final_metrics"], [153, 3, 1, "", "final_spec"], [153, 4, 1, "id19", "initializer_fn"], [153, 3, 1, "id20", "loss_fn"], [153, 3, 1, "id21", "optimizer_fn"], [153, 3, 1, "id22", "path_model"], [153, 3, 1, "id23", "pred_fn"], [153, 3, 1, "", "preds"], [153, 4, 1, "id24", "prepro_fn"], [153, 3, 1, "", "random_seed"], [153, 3, 1, "id25", "run_config"], [153, 4, 1, "", "run_final_evaluation"], [153, 3, 1, "id26", "train_hooks"], [153, 3, 1, "id27", "train_input_fn"], [153, 3, 1, "id28", "train_metrics"], [153, 3, 1, "id29", "train_spec"]], "deepr.jobs.trainer_base": [[153, 2, 1, "", "TrainerBase"]], "deepr.jobs.trainer_base.TrainerBase": [[153, 4, 1, "", "create_experiment"], [153, 4, 1, "", "run"], [153, 4, 1, "", "run_final_evaluation"]], "deepr.jobs.trainer_keras": [[153, 2, 1, "", "TrainerKeras"]], "deepr.jobs.trainer_keras.TrainerKeras": [[153, 3, 1, "", "config_proto"], [153, 4, 1, "", "create_experiment"], [153, 3, 1, "", "eval_hooks"], [153, 3, 1, "", "eval_input_fn"], [153, 3, 1, "", "eval_spec"], [153, 3, 1, "", "exporters"], [153, 3, 1, "", "final_hooks"], [153, 3, 1, "", "final_spec"], [153, 3, 1, "", "model"], [153, 3, 1, "", "path_model"], [153, 4, 1, "", "prepro_fn"], [153, 3, 1, "", "random_seed"], [153, 3, 1, "", "run_config"], [153, 4, 1, "", "run_final_evaluation"], [153, 3, 1, "", "train_hooks"], [153, 3, 1, "", "train_input_fn"], [153, 3, 1, "", "train_spec"]], "deepr.jobs.yarn_config": [[153, 2, 1, "", "YarnConfig"], [153, 1, 1, "", "upload_pex"]], "deepr.jobs.yarn_config.YarnConfig": [[153, 3, 1, "", "cpu_ignored_packages"], [153, 4, 1, "", "get_env_vars"], [153, 3, 1, "", "gpu_additional_packages"], [153, 3, 1, "", "gpu_ignored_packages"], [153, 3, 1, "", "gpu_to_use"], [153, 3, 1, "", "jvm_memory_in_gb"], [153, 3, 1, "", "name"], [153, 3, 1, "", "path_pex_cpu"], [153, 3, 1, "", "path_pex_gpu"], [153, 3, 1, "", "path_pex_prefix"], [153, 4, 1, "", "upload_pex_cpu"], [153, 4, 1, "", "upload_pex_gpu"]], "deepr.jobs.yarn_launcher": [[153, 2, 1, "", "YarnLauncher"], [153, 2, 1, "", "YarnLauncherConfig"]], "deepr.jobs.yarn_launcher.YarnLauncher": [[153, 3, 1, "", "config"], [153, 3, 1, "", "job"], [153, 4, 1, "", "run"], [153, 3, 1, "", "run_on_yarn"], [153, 3, 1, "", "use_mlflow"]], "deepr.jobs.yarn_launcher.YarnLauncherConfig": [[153, 3, 1, "", "hadoop_file_systems"], [153, 3, 1, "", "memory"], [153, 3, 1, "", "name"], [153, 3, 1, "", "num_cores"]], "deepr.jobs.yarn_trainer": [[153, 2, 1, "", "YarnTrainer"], [153, 2, 1, "", "YarnTrainerConfig"]], "deepr.jobs.yarn_trainer.YarnTrainer": [[153, 3, 1, "", "config"], [153, 4, 1, "", "run"], [153, 3, 1, "", "train_on_yarn"], [153, 3, 1, "", "trainer"]], "deepr.jobs.yarn_trainer.YarnTrainerConfig": [[153, 4, 1, "", "get_task_specs"], [153, 3, 1, "", "name"], [153, 3, 1, "", "nb_ps"], [153, 3, 1, "", "nb_retries"], [153, 3, 1, "", "nb_workers"], [153, 3, 1, "", "pre_script_hook"], [153, 3, 1, "", "queue"], [153, 3, 1, "", "tf_yarn"], [153, 3, 1, "", "tf_yarn_chief_cores"], [153, 3, 1, "", "tf_yarn_chief_memory"], [153, 3, 1, "", "tf_yarn_evaluator_cores"], [153, 3, 1, "", "tf_yarn_evaluator_memory"], [153, 3, 1, "", "tf_yarn_tensorboard_memory"]], "deepr.layers": [[41, 2, 1, "", "ActiveMode"], [42, 2, 1, "", "Add"], [43, 2, 1, "", "Average"], [44, 2, 1, "", "BPR"], [45, 2, 1, "", "BooleanMask"], [46, 2, 1, "", "ClickRank"], [47, 2, 1, "", "Concat"], [48, 2, 1, "", "DAG"], [49, 2, 1, "", "Dense"], [50, 2, 1, "", "DotProduct"], [51, 2, 1, "", "Embedding"], [52, 2, 1, "", "Equal"], [53, 2, 1, "", "Identity"], [54, 2, 1, "", "IsMinSize"], [55, 2, 1, "", "Layer"], [56, 2, 1, "", "LogicalAnd"], [57, 2, 1, "", "Lookup"], [58, 2, 1, "", "LookupFromFile"], [59, 2, 1, "", "LookupFromMapping"], [60, 2, 1, "", "LookupIndexToString"], [61, 2, 1, "", "MaskedBPR"], [62, 2, 1, "", "NotEqual"], [63, 2, 1, "", "Parallel"], [64, 2, 1, "", "Product"], [65, 2, 1, "", "Rename"], [66, 2, 1, "", "Select"], [67, 3, 1, "", "Sequential"], [68, 2, 1, "", "Slice"], [69, 2, 1, "", "SliceFirst"], [70, 2, 1, "", "SliceLast"], [71, 2, 1, "", "StringJoin"], [72, 2, 1, "", "Sum"], [73, 2, 1, "", "ToDense"], [74, 2, 1, "", "ToFloat"], [75, 2, 1, "", "WeightedAverage"], [154, 0, 0, "-", "base"], [154, 0, 0, "-", "bpr"], [154, 0, 0, "-", "bpr_max"], [154, 0, 0, "-", "click_rank"], [154, 0, 0, "-", "combinators"], [154, 0, 0, "-", "core"], [154, 0, 0, "-", "dropout"], [154, 0, 0, "-", "embedding"], [154, 0, 0, "-", "lookup"], [154, 0, 0, "-", "lstm"], [154, 0, 0, "-", "mask"], [154, 0, 0, "-", "multi"], [154, 0, 0, "-", "multi_css"], [154, 0, 0, "-", "nce_loss"], [154, 0, 0, "-", "reduce"], [154, 0, 0, "-", "size"], [154, 0, 0, "-", "slice"], [154, 0, 0, "-", "sparse"], [154, 0, 0, "-", "string"], [154, 0, 0, "-", "top_one"], [154, 0, 0, "-", "top_one_max"], [154, 0, 0, "-", "transformer"], [154, 0, 0, "-", "triplet_precision"]], "deepr.layers.ActiveMode": [[41, 4, 1, "", "__init__"]], "deepr.layers.Add": [[42, 4, 1, "", "__init__"]], "deepr.layers.Average": [[43, 4, 1, "", "__init__"]], "deepr.layers.BPR": [[44, 4, 1, "", "__init__"]], "deepr.layers.BooleanMask": [[45, 4, 1, "", "__init__"]], "deepr.layers.ClickRank": [[46, 4, 1, "", "__init__"]], "deepr.layers.Concat": [[47, 4, 1, "", "__init__"]], "deepr.layers.DAG": [[48, 4, 1, "", "__init__"]], "deepr.layers.Dense": [[49, 4, 1, "", "__init__"]], "deepr.layers.DotProduct": [[50, 4, 1, "", "__init__"]], "deepr.layers.Embedding": [[51, 4, 1, "", "__init__"]], "deepr.layers.Equal": [[52, 4, 1, "", "__init__"]], "deepr.layers.Identity": [[53, 4, 1, "", "__init__"]], "deepr.layers.IsMinSize": [[54, 4, 1, "", "__init__"]], "deepr.layers.Layer": [[55, 4, 1, "", "__init__"], [55, 3, 1, "", "inputs"], [55, 3, 1, "", "n_in"], [55, 3, 1, "", "n_out"], [55, 3, 1, "", "name"], [55, 3, 1, "", "outputs"]], "deepr.layers.LogicalAnd": [[56, 4, 1, "", "__init__"]], "deepr.layers.Lookup": [[57, 4, 1, "", "__init__"], [57, 3, 1, "", "table_initializer_fn"]], "deepr.layers.LookupFromFile": [[58, 4, 1, "", "__init__"], [58, 3, 1, "", "key_dtype"], [58, 3, 1, "", "path"], [58, 3, 1, "", "reuse"], [58, 3, 1, "", "table_name"]], "deepr.layers.LookupFromMapping": [[59, 4, 1, "", "__init__"], [59, 3, 1, "", "default_value"], [59, 3, 1, "", "key_dtype"], [59, 3, 1, "", "mapping"], [59, 3, 1, "", "reuse"], [59, 3, 1, "", "table_name"], [59, 3, 1, "", "value_dtype"]], "deepr.layers.LookupIndexToString": [[60, 4, 1, "", "__init__"], [60, 3, 1, "", "default_value"], [60, 3, 1, "", "path"], [60, 3, 1, "", "reuse"], [60, 3, 1, "", "table_name"], [60, 3, 1, "", "vocab_size"]], "deepr.layers.MaskedBPR": [[61, 4, 1, "", "__init__"]], "deepr.layers.NotEqual": [[62, 4, 1, "", "__init__"]], "deepr.layers.Parallel": [[63, 4, 1, "", "__init__"]], "deepr.layers.Product": [[64, 4, 1, "", "__init__"]], "deepr.layers.Rename": [[65, 4, 1, "", "__init__"]], "deepr.layers.Select": [[66, 4, 1, "", "__init__"]], "deepr.layers.Slice": [[68, 4, 1, "", "__init__"]], "deepr.layers.SliceFirst": [[69, 4, 1, "", "__init__"]], "deepr.layers.SliceLast": [[70, 4, 1, "", "__init__"]], "deepr.layers.StringJoin": [[71, 4, 1, "", "__init__"]], "deepr.layers.Sum": [[72, 4, 1, "", "__init__"]], "deepr.layers.ToDense": [[73, 4, 1, "", "__init__"]], "deepr.layers.ToFloat": [[74, 4, 1, "", "__init__"]], "deepr.layers.WeightedAverage": [[75, 4, 1, "", "__init__"]], "deepr.layers.base": [[154, 2, 1, "", "Lambda"], [154, 2, 1, "", "Layer"], [154, 1, 1, "", "layer"]], "deepr.layers.base.Lambda": [[154, 4, 1, "", "forward"]], "deepr.layers.base.Layer": [[154, 4, 1, "", "forward"], [154, 4, 1, "", "forward_as_dict"], [154, 3, 1, "", "inputs"], [154, 3, 1, "", "n_in"], [154, 3, 1, "", "n_out"], [154, 3, 1, "", "name"], [154, 3, 1, "", "outputs"]], "deepr.layers.bpr": [[154, 2, 1, "", "BPR"], [154, 2, 1, "", "MaskedBPR"]], "deepr.layers.bpr.BPR": [[154, 4, 1, "", "forward"]], "deepr.layers.bpr.MaskedBPR": [[154, 4, 1, "", "forward"]], "deepr.layers.bpr_max": [[154, 2, 1, "", "BPRMax"], [154, 2, 1, "", "MaskedBPRMax"]], "deepr.layers.bpr_max.BPRMax": [[154, 4, 1, "", "forward"]], "deepr.layers.bpr_max.MaskedBPRMax": [[154, 4, 1, "", "forward"]], "deepr.layers.click_rank": [[154, 2, 1, "", "ClickRank"]], "deepr.layers.click_rank.ClickRank": [[154, 4, 1, "", "forward"]], "deepr.layers.combinators": [[154, 2, 1, "", "ActiveMode"], [154, 2, 1, "", "DAG"], [154, 2, 1, "", "Parallel"], [154, 2, 1, "", "Rename"], [154, 2, 1, "", "Scope"], [154, 2, 1, "", "Select"], [154, 3, 1, "", "Sequential"]], "deepr.layers.combinators.ActiveMode": [[154, 4, 1, "", "forward"]], "deepr.layers.combinators.DAG": [[154, 4, 1, "", "forward_as_dict"]], "deepr.layers.combinators.Parallel": [[154, 4, 1, "", "forward"]], "deepr.layers.combinators.Rename": [[154, 4, 1, "", "forward"]], "deepr.layers.combinators.Scope": [[154, 4, 1, "", "forward"]], "deepr.layers.combinators.Select": [[154, 4, 1, "", "forward"]], "deepr.layers.core": [[154, 2, 1, "", "Add"], [154, 2, 1, "", "AddWithWeight"], [154, 2, 1, "", "Concat"], [154, 2, 1, "", "Conv1d"], [154, 2, 1, "", "Dense"], [154, 2, 1, "", "DenseIndex"], [154, 2, 1, "", "DotProduct"], [154, 2, 1, "", "ExpandDims"], [154, 2, 1, "", "Identity"], [154, 2, 1, "", "LogicalAnd"], [154, 2, 1, "", "LogicalOr"], [154, 2, 1, "", "Normalize"], [154, 2, 1, "", "Product"], [154, 2, 1, "", "Scale"], [154, 2, 1, "", "Softmax"], [154, 2, 1, "", "Sum"], [154, 2, 1, "", "ToFloat"]], "deepr.layers.core.Add": [[154, 4, 1, "", "forward"]], "deepr.layers.core.AddWithWeight": [[154, 4, 1, "", "forward"]], "deepr.layers.core.Concat": [[154, 4, 1, "", "forward"]], "deepr.layers.core.Conv1d": [[154, 4, 1, "", "forward"]], "deepr.layers.core.Dense": [[154, 4, 1, "", "forward"]], "deepr.layers.core.DenseIndex": [[154, 4, 1, "", "forward"]], "deepr.layers.core.DotProduct": [[154, 4, 1, "", "forward"]], "deepr.layers.core.ExpandDims": [[154, 4, 1, "", "forward"]], "deepr.layers.core.Identity": [[154, 4, 1, "", "forward"]], "deepr.layers.core.LogicalAnd": [[154, 4, 1, "", "forward"]], "deepr.layers.core.LogicalOr": [[154, 4, 1, "", "forward"]], "deepr.layers.core.Normalize": [[154, 4, 1, "", "forward"]], "deepr.layers.core.Product": [[154, 4, 1, "", "forward"]], "deepr.layers.core.Scale": [[154, 4, 1, "", "forward"]], "deepr.layers.core.Softmax": [[154, 4, 1, "", "forward"]], "deepr.layers.core.Sum": [[154, 4, 1, "", "forward"]], "deepr.layers.core.ToFloat": [[154, 4, 1, "", "forward"]], "deepr.layers.dropout": [[154, 2, 1, "", "Dropout"], [154, 2, 1, "", "SpatialDropout1D"]], "deepr.layers.dropout.Dropout": [[154, 4, 1, "", "forward"]], "deepr.layers.dropout.SpatialDropout1D": [[154, 4, 1, "", "forward"]], "deepr.layers.embedding": [[154, 2, 1, "", "CombineEmbeddings"], [154, 2, 1, "", "Embedding"]], "deepr.layers.embedding.CombineEmbeddings": [[154, 4, 1, "", "forward"]], "deepr.layers.embedding.Embedding": [[154, 4, 1, "", "forward"]], "deepr.layers.lookup": [[154, 2, 1, "", "Lookup"], [154, 2, 1, "", "LookupFromFile"], [154, 2, 1, "", "LookupFromMapping"], [154, 2, 1, "", "LookupIndexToString"]], "deepr.layers.lookup.Lookup": [[154, 4, 1, "", "forward"], [154, 3, 1, "", "table_initializer_fn"]], "deepr.layers.lookup.LookupFromFile": [[154, 3, 1, "", "key_dtype"], [154, 3, 1, "", "path"], [154, 3, 1, "", "reuse"], [154, 3, 1, "", "table_name"]], "deepr.layers.lookup.LookupFromMapping": [[154, 3, 1, "", "default_value"], [154, 3, 1, "", "key_dtype"], [154, 3, 1, "", "mapping"], [154, 3, 1, "", "reuse"], [154, 3, 1, "", "table_name"], [154, 3, 1, "", "value_dtype"]], "deepr.layers.lookup.LookupIndexToString": [[154, 3, 1, "", "default_value"], [154, 3, 1, "", "path"], [154, 3, 1, "", "reuse"], [154, 3, 1, "", "table_name"], [154, 3, 1, "", "vocab_size"]], "deepr.layers.lstm": [[154, 2, 1, "", "LSTM"]], "deepr.layers.lstm.LSTM": [[154, 4, 1, "", "forward"]], "deepr.layers.mask": [[154, 2, 1, "", "BooleanMask"], [154, 2, 1, "", "BooleanReduceMode"], [154, 2, 1, "", "Equal"], [154, 2, 1, "", "NotEqual"]], "deepr.layers.mask.BooleanMask": [[154, 4, 1, "", "forward"]], "deepr.layers.mask.BooleanReduceMode": [[154, 3, 1, "", "AND"], [154, 3, 1, "", "OR"]], "deepr.layers.mask.Equal": [[154, 4, 1, "", "forward"]], "deepr.layers.mask.NotEqual": [[154, 4, 1, "", "forward"]], "deepr.layers.multi": [[154, 2, 1, "", "MultiLogLikelihood"]], "deepr.layers.multi.MultiLogLikelihood": [[154, 4, 1, "", "forward"]], "deepr.layers.multi_css": [[154, 2, 1, "", "MultiLogLikelihoodCSS"]], "deepr.layers.multi_css.MultiLogLikelihoodCSS": [[154, 4, 1, "", "forward"]], "deepr.layers.nce_loss": [[154, 2, 1, "", "MaskedNegativeSampling"], [154, 2, 1, "", "NegativeSampling"]], "deepr.layers.nce_loss.MaskedNegativeSampling": [[154, 4, 1, "", "forward"]], "deepr.layers.nce_loss.NegativeSampling": [[154, 4, 1, "", "forward"]], "deepr.layers.reduce": [[154, 2, 1, "", "Average"], [154, 2, 1, "", "WeightedAverage"]], "deepr.layers.reduce.Average": [[154, 4, 1, "", "forward"]], "deepr.layers.reduce.WeightedAverage": [[154, 4, 1, "", "forward"]], "deepr.layers.size": [[154, 2, 1, "", "IsMinSize"]], "deepr.layers.size.IsMinSize": [[154, 4, 1, "", "forward"]], "deepr.layers.slice": [[154, 2, 1, "", "Slice"], [154, 2, 1, "", "SliceFirst"], [154, 2, 1, "", "SliceLast"], [154, 2, 1, "", "SliceLastPadded"]], "deepr.layers.slice.Slice": [[154, 4, 1, "", "forward"]], "deepr.layers.slice.SliceFirst": [[154, 4, 1, "", "forward"]], "deepr.layers.slice.SliceLast": [[154, 4, 1, "", "forward"]], "deepr.layers.slice.SliceLastPadded": [[154, 4, 1, "", "forward"]], "deepr.layers.sparse": [[154, 2, 1, "", "ToDense"]], "deepr.layers.sparse.ToDense": [[154, 4, 1, "", "forward"]], "deepr.layers.string": [[154, 2, 1, "", "StringJoin"]], "deepr.layers.string.StringJoin": [[154, 4, 1, "", "forward"]], "deepr.layers.top_one": [[154, 2, 1, "", "MaskedTopOne"], [154, 2, 1, "", "TopOne"]], "deepr.layers.top_one.MaskedTopOne": [[154, 4, 1, "", "forward"]], "deepr.layers.top_one.TopOne": [[154, 4, 1, "", "forward"]], "deepr.layers.top_one_max": [[154, 2, 1, "", "MaskedTopOneMax"], [154, 2, 1, "", "TopOneMax"]], "deepr.layers.top_one_max.MaskedTopOneMax": [[154, 4, 1, "", "forward"]], "deepr.layers.top_one_max.TopOneMax": [[154, 4, 1, "", "forward"]], "deepr.layers.transformer": [[154, 2, 1, "", "AttentionMask"], [154, 1, 1, "", "FeedForward"], [154, 2, 1, "", "Normalization"], [154, 2, 1, "", "PositionalEncoding"], [154, 2, 1, "", "SelfMultiheadAttention"], [154, 1, 1, "", "Transformer"]], "deepr.layers.transformer.AttentionMask": [[154, 4, 1, "", "forward"]], "deepr.layers.transformer.Normalization": [[154, 4, 1, "", "forward"]], "deepr.layers.transformer.PositionalEncoding": [[154, 4, 1, "", "forward"]], "deepr.layers.transformer.SelfMultiheadAttention": [[154, 3, 1, "", "block_id"], [154, 3, 1, "", "dim_head"], [154, 4, 1, "", "forward"], [154, 4, 1, "", "join_heads"], [154, 3, 1, "", "num_heads"], [154, 3, 1, "", "residual_connection"], [154, 4, 1, "", "scaled_dot_attention"], [154, 4, 1, "", "split_heads"]], "deepr.layers.triplet_precision": [[154, 2, 1, "", "TripletPrecision"]], "deepr.layers.triplet_precision.TripletPrecision": [[154, 4, 1, "", "forward"]], "deepr.macros": [[76, 2, 1, "", "MLFlowInit"], [155, 0, 0, "-", "dynamic"], [155, 0, 0, "-", "graphite_init"], [155, 0, 0, "-", "mlflow_init"]], "deepr.macros.MLFlowInit": [[76, 4, 1, "", "__init__"]], "deepr.macros.dynamic": [[155, 2, 1, "", "Dynamic"]], "deepr.macros.graphite_init": [[155, 2, 1, "", "GraphiteInit"]], "deepr.macros.mlflow_init": [[155, 2, 1, "", "MLFlowInit"], [155, 1, 1, "", "internal_url_formatter"], [155, 1, 1, "", "standard_url_formatter"]], "deepr.metrics": [[77, 2, 1, "", "DecayMean"], [78, 2, 1, "", "FiniteMean"], [79, 2, 1, "", "LastValue"], [80, 2, 1, "", "MaxValue"], [81, 2, 1, "", "Mean"], [82, 2, 1, "", "Metric"], [83, 2, 1, "", "StepCounter"], [84, 2, 1, "", "VariableValue"], [156, 0, 0, "-", "accuracy"], [156, 0, 0, "-", "base"], [156, 0, 0, "-", "core"], [156, 0, 0, "-", "mean"], [156, 0, 0, "-", "step"], [156, 0, 0, "-", "variable"]], "deepr.metrics.DecayMean": [[77, 4, 1, "", "__init__"]], "deepr.metrics.FiniteMean": [[78, 4, 1, "", "__init__"]], "deepr.metrics.LastValue": [[79, 4, 1, "", "__init__"]], "deepr.metrics.MaxValue": [[80, 4, 1, "", "__init__"]], "deepr.metrics.Mean": [[81, 4, 1, "", "__init__"]], "deepr.metrics.Metric": [[82, 4, 1, "", "__init__"]], "deepr.metrics.StepCounter": [[83, 4, 1, "", "__init__"]], "deepr.metrics.VariableValue": [[84, 4, 1, "", "__init__"], [84, 3, 1, "", "name"]], "deepr.metrics.accuracy": [[156, 2, 1, "", "Accuracy"], [156, 2, 1, "", "AccuracyAtK"]], "deepr.metrics.base": [[156, 2, 1, "", "Metric"], [156, 1, 1, "", "get_metric_variable"], [156, 1, 1, "", "get_scalars"], [156, 1, 1, "", "get_tensors"], [156, 1, 1, "", "keep_scalars"], [156, 1, 1, "", "sanitize_metric_name"]], "deepr.metrics.core": [[156, 2, 1, "", "LastValue"], [156, 2, 1, "", "MaxValue"], [156, 1, 1, "", "max_value_metric"]], "deepr.metrics.mean": [[156, 2, 1, "", "DecayMean"], [156, 2, 1, "", "FiniteMean"], [156, 2, 1, "", "Mean"], [156, 1, 1, "", "decay_mean_metric"], [156, 1, 1, "", "finite_mean_metric"]], "deepr.metrics.step": [[156, 2, 1, "", "StepCounter"]], "deepr.metrics.variable": [[156, 2, 1, "", "VariableValue"]], "deepr.metrics.variable.VariableValue": [[156, 3, 1, "", "name"]], "deepr.optimizers": [[85, 2, 1, "", "Optimizer"], [86, 2, 1, "", "TensorflowOptimizer"], [157, 0, 0, "-", "base"], [157, 0, 0, "-", "core"]], "deepr.optimizers.Optimizer": [[85, 4, 1, "", "__init__"]], "deepr.optimizers.TensorflowOptimizer": [[86, 4, 1, "", "__init__"], [86, 3, 1, "", "kwargs"], [86, 3, 1, "", "learning_rate"], [86, 3, 1, "", "optimizer"]], "deepr.optimizers.base": [[157, 2, 1, "", "Optimizer"]], "deepr.optimizers.core": [[157, 2, 1, "", "TensorflowOptimizer"]], "deepr.optimizers.core.TensorflowOptimizer": [[157, 3, 1, "", "OPTIMIZERS"], [157, 3, 1, "", "kwargs"], [157, 3, 1, "", "learning_rate"], [157, 3, 1, "", "optimizer"]], "deepr.predictors": [[158, 0, 0, "-", "base"], [158, 0, 0, "-", "proto"], [158, 0, 0, "-", "saved_model"]], "deepr.predictors.base": [[158, 2, 1, "", "Predictor"]], "deepr.predictors.base.Predictor": [[158, 3, 1, "", "feed_tensors"], [158, 3, 1, "", "fetch_tensors"], [158, 3, 1, "", "session"]], "deepr.predictors.proto": [[158, 2, 1, "", "ProtoPredictor"]], "deepr.predictors.proto.ProtoPredictor": [[158, 3, 1, "", "feeds"], [158, 3, 1, "", "fetches"], [158, 3, 1, "", "path"]], "deepr.predictors.saved_model": [[158, 2, 1, "", "SavedModelPredictor"], [158, 1, 1, "", "get_latest_saved_model"]], "deepr.predictors.saved_model.SavedModelPredictor": [[158, 3, 1, "", "feeds"], [158, 3, 1, "", "fetches"], [158, 3, 1, "", "path"]], "deepr.prepros": [[87, 2, 1, "", "Batch"], [88, 2, 1, "", "Filter"], [89, 2, 1, "", "FromExample"], [90, 2, 1, "", "Map"], [91, 2, 1, "", "PaddedBatch"], [92, 2, 1, "", "Prefetch"], [93, 2, 1, "", "Prepro"], [94, 2, 1, "", "Repeat"], [95, 2, 1, "", "Serial"], [96, 2, 1, "", "Shuffle"], [97, 3, 1, "", "TFRecordSequenceExample"], [98, 2, 1, "", "TableInitializer"], [99, 2, 1, "", "Take"], [100, 2, 1, "", "ToExample"], [159, 0, 0, "-", "base"], [159, 0, 0, "-", "combinators"], [159, 0, 0, "-", "core"], [159, 0, 0, "-", "lookup"], [159, 0, 0, "-", "record"]], "deepr.prepros.Batch": [[87, 4, 1, "", "__init__"], [87, 3, 1, "", "count"], [87, 3, 1, "", "modes"]], "deepr.prepros.Filter": [[88, 4, 1, "", "__init__"], [88, 3, 1, "", "modes"], [88, 3, 1, "", "on_dict"], [88, 3, 1, "", "predicate"]], "deepr.prepros.FromExample": [[89, 4, 1, "", "__init__"]], "deepr.prepros.Map": [[90, 4, 1, "", "__init__"], [90, 3, 1, "", "map_func"], [90, 3, 1, "", "modes"], [90, 3, 1, "", "num_parallel_calls"], [90, 3, 1, "", "on_dict"], [90, 3, 1, "", "update"]], "deepr.prepros.PaddedBatch": [[91, 4, 1, "", "__init__"], [91, 3, 1, "", "batch_size"], [91, 3, 1, "", "fields"], [91, 3, 1, "", "modes"]], "deepr.prepros.Prefetch": [[92, 4, 1, "", "__init__"], [92, 3, 1, "", "buffer_size"]], "deepr.prepros.Prepro": [[93, 4, 1, "", "__init__"]], "deepr.prepros.Repeat": [[94, 4, 1, "", "__init__"], [94, 3, 1, "", "count"], [94, 3, 1, "", "modes"]], "deepr.prepros.Serial": [[95, 4, 1, "", "__init__"], [95, 3, 1, "", "fuse"], [95, 3, 1, "", "preprocessors"]], "deepr.prepros.Shuffle": [[96, 4, 1, "", "__init__"], [96, 3, 1, "", "buffer_size"], [96, 3, 1, "", "modes"]], "deepr.prepros.TableInitializer": [[98, 4, 1, "", "__init__"]], "deepr.prepros.Take": [[99, 4, 1, "", "__init__"], [99, 3, 1, "", "count"]], "deepr.prepros.ToExample": [[100, 4, 1, "", "__init__"]], "deepr.prepros.base": [[159, 2, 1, "", "Prepro"], [159, 2, 1, "", "PreproFn"], [159, 1, 1, "", "prepro"]], "deepr.prepros.base.Prepro": [[159, 4, 1, "", "apply"]], "deepr.prepros.base.PreproFn": [[159, 4, 1, "", "apply"]], "deepr.prepros.combinators": [[159, 2, 1, "", "Serial"]], "deepr.prepros.combinators.Serial": [[159, 4, 1, "", "apply"], [159, 3, 1, "", "fuse"], [159, 3, 1, "", "preprocessors"]], "deepr.prepros.core": [[159, 2, 1, "", "Batch"], [159, 2, 1, "", "Cache"], [159, 2, 1, "", "Filter"], [159, 2, 1, "", "Map"], [159, 2, 1, "", "PaddedBatch"], [159, 2, 1, "", "Prefetch"], [159, 2, 1, "", "Repeat"], [159, 2, 1, "", "Shuffle"], [159, 2, 1, "", "Take"]], "deepr.prepros.core.Batch": [[159, 4, 1, "", "apply"], [159, 3, 1, "", "count"], [159, 3, 1, "", "modes"]], "deepr.prepros.core.Cache": [[159, 4, 1, "", "apply"], [159, 3, 1, "", "filename"]], "deepr.prepros.core.Filter": [[159, 4, 1, "", "apply"], [159, 3, 1, "", "modes"], [159, 3, 1, "", "on_dict"], [159, 3, 1, "", "predicate"], [159, 5, 1, "", "tf_predicate"]], "deepr.prepros.core.Map": [[159, 4, 1, "", "apply"], [159, 3, 1, "", "map_func"], [159, 3, 1, "", "modes"], [159, 3, 1, "", "num_parallel_calls"], [159, 3, 1, "", "on_dict"], [159, 5, 1, "", "tf_map_func"], [159, 3, 1, "", "update"]], "deepr.prepros.core.PaddedBatch": [[159, 4, 1, "", "apply"], [159, 3, 1, "", "batch_size"], [159, 3, 1, "", "fields"], [159, 3, 1, "", "modes"]], "deepr.prepros.core.Prefetch": [[159, 4, 1, "", "apply"], [159, 3, 1, "", "buffer_size"]], "deepr.prepros.core.Repeat": [[159, 4, 1, "", "apply"], [159, 3, 1, "", "count"], [159, 3, 1, "", "modes"]], "deepr.prepros.core.Shuffle": [[159, 4, 1, "", "apply"], [159, 3, 1, "", "buffer_size"], [159, 3, 1, "", "modes"]], "deepr.prepros.core.Take": [[159, 4, 1, "", "apply"], [159, 3, 1, "", "count"]], "deepr.prepros.lookup": [[159, 2, 1, "", "TableInitializer"]], "deepr.prepros.lookup.TableInitializer": [[159, 4, 1, "", "apply"]], "deepr.prepros.record": [[159, 2, 1, "", "FromExample"], [159, 3, 1, "", "TFRecordSequenceExample"], [159, 2, 1, "", "ToExample"], [159, 1, 1, "", "arrays_to_example"]], "deepr.readers": [[101, 2, 1, "", "GeneratorReader"], [102, 2, 1, "", "Reader"], [103, 2, 1, "", "TFRecordReader"], [160, 0, 0, "-", "base"], [160, 0, 0, "-", "generator"], [160, 0, 0, "-", "record"]], "deepr.readers.GeneratorReader": [[101, 4, 1, "", "__init__"], [101, 3, 1, "", "generator_fn"], [101, 3, 1, "", "output_shapes"], [101, 3, 1, "", "output_types"]], "deepr.readers.Reader": [[102, 4, 1, "", "__init__"]], "deepr.readers.TFRecordReader": [[103, 4, 1, "", "__init__"], [103, 3, 1, "", "num_parallel_calls"], [103, 3, 1, "", "num_parallel_reads"], [103, 3, 1, "", "path"], [103, 3, 1, "", "shuffle"]], "deepr.readers.base": [[160, 2, 1, "", "DatasetReader"], [160, 2, 1, "", "Reader"], [160, 1, 1, "", "from_dataset"]], "deepr.readers.base.DatasetReader": [[160, 4, 1, "", "as_dataset"]], "deepr.readers.base.Reader": [[160, 4, 1, "", "as_dataset"]], "deepr.readers.generator": [[160, 2, 1, "", "GeneratorReader"]], "deepr.readers.generator.GeneratorReader": [[160, 4, 1, "", "as_dataset"], [160, 3, 1, "", "generator_fn"], [160, 3, 1, "", "output_shapes"], [160, 3, 1, "", "output_types"]], "deepr.readers.record": [[160, 2, 1, "", "TFRecordReader"], [160, 1, 1, "", "bytes_feature"], [160, 1, 1, "", "float_feature"], [160, 1, 1, "", "int64_feature"], [160, 1, 1, "", "int64_feature_list"]], "deepr.readers.record.TFRecordReader": [[160, 4, 1, "", "as_dataset"], [160, 5, 1, "", "compression_type"], [160, 5, 1, "", "filenames"], [160, 3, 1, "", "num_parallel_calls"], [160, 3, 1, "", "num_parallel_reads"], [160, 3, 1, "", "path"], [160, 3, 1, "", "shuffle"]], "deepr.utils": [[104, 2, 1, "", "Field"], [105, 2, 1, "", "TableContext"], [106, 1, 1, "", "TensorType"], [161, 0, 0, "-", "broadcasting"], [161, 0, 0, "-", "checkpoint"], [107, 1, 1, "", "chunks"], [161, 0, 0, "-", "datastruct"], [108, 1, 1, "", "dict_to_item"], [161, 0, 0, "-", "exceptions"], [161, 0, 0, "-", "field"], [109, 1, 1, "", "get_feedable_tensors"], [110, 1, 1, "", "get_fetchable_tensors"], [161, 0, 0, "-", "graph"], [161, 0, 0, "-", "graphite"], [111, 1, 1, "", "handle_exceptions"], [112, 1, 1, "", "import_graph_def"], [113, 1, 1, "", "index_to_string_table_from_file"], [114, 1, 1, "", "item_to_dict"], [161, 0, 0, "-", "iter"], [115, 1, 1, "", "make_same_shape"], [161, 0, 0, "-", "mlflow"], [116, 1, 1, "", "msb_lsb_to_str"], [117, 1, 1, "", "progress"], [118, 1, 1, "", "save_variables_in_ckpt"], [119, 1, 1, "", "str_to_msb_lsb"], [120, 1, 1, "", "table_from_file"], [121, 1, 1, "", "table_from_mapping"], [161, 0, 0, "-", "tables"], [161, 0, 0, "-", "tf2xla_pb2"], [122, 1, 1, "", "to_flat_tuple"], [161, 0, 0, "-", "uuid"]], "deepr.utils.Field": [[104, 4, 1, "", "__init__"], [104, 3, 1, "", "default"], [104, 3, 1, "", "dtype"], [104, 3, 1, "", "name"], [104, 3, 1, "", "sequence"], [104, 3, 1, "", "shape"]], "deepr.utils.TableContext": [[105, 4, 1, "", "__init__"]], "deepr.utils.broadcasting": [[161, 1, 1, "", "make_same_shape"]], "deepr.utils.checkpoint": [[161, 1, 1, "", "save_variables_in_ckpt"]], "deepr.utils.datastruct": [[161, 1, 1, "", "dict_to_item"], [161, 1, 1, "", "item_to_dict"], [161, 1, 1, "", "to_flat_tuple"]], "deepr.utils.exceptions": [[161, 1, 1, "", "handle_exceptions"]], "deepr.utils.field": [[161, 2, 1, "", "Field"], [161, 1, 1, "", "TensorType"]], "deepr.utils.field.Field": [[161, 4, 1, "", "as_placeholder"], [161, 5, 1, "", "batch_shape"], [161, 3, 1, "", "default"], [161, 3, 1, "", "dtype"], [161, 5, 1, "", "feature_specs"], [161, 4, 1, "", "is_featurizable"], [161, 4, 1, "", "is_sparse"], [161, 3, 1, "", "name"], [161, 3, 1, "", "sequence"], [161, 3, 1, "", "shape"], [161, 4, 1, "", "startswith"], [161, 4, 1, "", "to_feature"]], "deepr.utils.graph": [[161, 1, 1, "", "get_by_name"], [161, 1, 1, "", "get_feedable_tensors"], [161, 1, 1, "", "get_fetchable_tensors"], [161, 1, 1, "", "import_graph_def"]], "deepr.utils.graphite": [[161, 1, 1, "", "get_sender"], [161, 1, 1, "", "log_metric"], [161, 1, 1, "", "log_metrics"]], "deepr.utils.iter": [[161, 1, 1, "", "chunks"], [161, 1, 1, "", "progress"]], "deepr.utils.mlflow": [[161, 1, 1, "", "clear_run"], [161, 1, 1, "", "download_artifacts"], [161, 1, 1, "", "log_dict"], [161, 1, 1, "", "set_or_create_experiment"]], "deepr.utils.tables": [[161, 2, 1, "", "TableContext"], [161, 1, 1, "", "index_to_string_table_from_file"], [161, 1, 1, "", "table_from_file"], [161, 1, 1, "", "table_from_mapping"]], "deepr.utils.tables.TableContext": [[161, 4, 1, "", "active"], [161, 4, 1, "", "close"], [161, 4, 1, "", "get"], [161, 4, 1, "", "is_active"], [161, 4, 1, "", "set"]], "deepr.utils.uuid": [[161, 1, 1, "", "msb_lsb_to_str"], [161, 1, 1, "", "str_to_msb_lsb"]], "deepr.vocab": [[162, 0, 0, "-", "base"], [123, 1, 1, "", "read"], [124, 1, 1, "", "size"], [125, 1, 1, "", "write"]], "deepr.vocab.base": [[162, 1, 1, "", "read"], [162, 1, 1, "", "size"], [162, 1, 1, "", "write"]], "deepr.writers": [[126, 2, 1, "", "TFRecordWriter"], [127, 2, 1, "", "Writer"], [163, 0, 0, "-", "base"], [163, 0, 0, "-", "record"]], "deepr.writers.TFRecordWriter": [[126, 4, 1, "", "__init__"]], "deepr.writers.Writer": [[127, 4, 1, "", "__init__"]], "deepr.writers.base": [[163, 2, 1, "", "Writer"]], "deepr.writers.base.Writer": [[163, 4, 1, "", "write"]], "deepr.writers.record": [[163, 2, 1, "", "TFRecordWriter"]], "deepr.writers.record.TFRecordWriter": [[163, 4, 1, "", "write"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:property", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"deepr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 170], "config": [0, 1, 2, 3, 4, 5, 6, 128, 134, 166, 167, 169], "assert_no_macro": 0, "fill_macro": 1, "fill_refer": 2, "from_config": 3, "ismacro": 4, "isrefer": 5, "parse_config": 6, "export": [7, 8, 9, 10, 128, 149, 165], "bestcheckpoint": 7, "savevari": 9, "savedmodel": 10, "hook": [11, 12, 13, 14, 15, 16, 17, 18, 128, 150, 165], "earlystoppinghookfactori": 11, "estimatorhookfactori": 12, "loggingtensorhookfactori": 13, "maxresidentmemori": 14, "residentmemori": 15, "stepspersechook": 16, "summarysaverhookfactori": 17, "tensorhookfactori": 18, "initi": [19, 128, 151], "checkpointiniti": 19, "io": [20, 21, 22, 23, 128, 152], "hdfsfilesystem": 20, "parquetdataset": 21, "path": [22, 139, 147, 152], "read_json": 23, "job": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 128, 137, 145, 153, 165, 167, 168, 171], "cleanupcheckpoint": 24, "copydir": 25, "exportxlamodelmetadata": [26, 165], "gridsampl": 27, "logmetr": 29, "mlflowsaveconfig": 30, "mlflowsaveinfo": 31, "optimizesavedmodel": [32, 165], "paramssampl": 33, "paramstun": 34, "pipelin": [35, 131, 165, 167, 171], "sampler": 36, "savedataset": 37, "trainer": [38, 153, 167, 168], "yarnlaunch": 39, "yarntrain": 40, "layer": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 128, 138, 146, 154], "activemod": 41, "add": 42, "averag": [43, 138], "bpr": [44, 138, 154], "booleanmask": 45, "clickrank": 46, "concat": 47, "dag": 48, "dens": 49, "dotproduct": 50, "embed": [51, 154, 171], "equal": 52, "ident": 53, "ismins": 54, "logicaland": 56, "lookup": [57, 154, 159], "lookupfromfil": 58, "lookupfrommap": 59, "lookupindextostr": 60, "maskedbpr": 61, "notequ": 62, "parallel": 63, "product": [64, 131], "renam": 65, "select": 66, "sequenti": 67, "slice": [68, 154], "slicefirst": 69, "slicelast": 70, "stringjoin": 71, "sum": 72, "todens": 73, "tofloat": 74, "weightedaverag": 75, "macro": [76, 128, 134, 139, 147, 155, 166], "mlflowinit": 76, "metric": [77, 78, 79, 80, 81, 82, 83, 84, 128, 140, 156, 165], "decaymean": 77, "finitemean": 78, "lastvalu": 79, "maxvalu": 80, "mean": [81, 156], "stepcount": 83, "variablevalu": 84, "optim": [85, 86, 128, 157, 168], "tensorflowoptim": 86, "prepro": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 128, 141, 148, 159, 167, 168], "batch": 87, "filter": 88, "fromexampl": 89, "map": 90, "paddedbatch": 91, "prefetch": 92, "repeat": 94, "serial": 95, "shuffl": 96, "tfrecordsequenceexampl": 97, "tableiniti": 98, "take": 99, "toexampl": 100, "reader": [101, 102, 103, 128, 142, 160, 167], "generatorread": 101, "tfrecordread": 103, "util": [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 128, 143, 161], "field": [104, 143, 161], "tablecontext": 105, "tensortyp": 106, "chunk": 107, "dict_to_item": 108, "get_feedable_tensor": 109, "get_fetchable_tensor": 110, "handle_except": 111, "import_graph_def": 112, "index_to_string_table_from_fil": 113, "item_to_dict": 114, "make_same_shap": 115, "msb_lsb_to_str": 116, "progress": 117, "save_variables_in_ckpt": 118, "str_to_msb_lsb": 119, "table_from_fil": 120, "table_from_map": 121, "to_flat_tupl": 122, "vocab": [123, 124, 125, 128, 162], "read": 123, "size": [124, 154], "write": 125, "writer": [126, 127, 128, 163], "tfrecordwrit": 126, "changelog": 129, "2": [129, 167, 171], "13": 129, "0": 129, "2023": 129, "01": 129, "07": 129, "ad": 129, "chang": [129, 131], "deprec": 129, "remov": 129, "fix": 129, "secur": 129, "12": 129, "2021": 129, "04": 129, "29": 129, "11": 129, "2020": 129, "10": 129, "28": 129, "9": 129, "1": [129, 167, 171], "8": 129, "09": 129, "03": 129, "7": 129, "08": 129, "6": 129, "02": 129, "5": 129, "4": [129, 171], "06": 129, "19": 129, "15": 129, "3": [129, 167, 171], "05": 129, "27": 129, "26": 129, "25": 129, "contribut": [130, 131], "test": [130, 131], "coverag": 130, "python": 130, "code": 130, "style": 130, "gener": [130, 160], "import": 130, "order": 130, "method": 130, "docstr": 130, "exampl": [130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 170, 171], "function": [130, 167, 168], "class": 130, "build": [131, 145, 167, 171], "train": [131, 167, 171], "deep": 131, "learn": 131, "why": 131, "librari": 131, "base": [131, 134, 149, 150, 153, 154, 156, 157, 158, 159, 160, 162, 163], "tf1": 131, "x": 131, "us": [131, 167], "movielen": [131, 136, 137, 138, 139, 140, 141, 142, 143, 171], "instal": [131, 171], "prerequisit": 131, "pip": 131, "from": 131, "sourc": 131, "lint": 131, "command": 131, "line": 131, "tool": 131, "log": 131, "main": [131, 133], "contributor": 131, "packag": [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "subpackag": [132, 135, 136, 144], "submodul": [132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "version": 132, "modul": [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "content": [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "cli": 133, "experiment": 134, "refer": [134, 166, 170], "build_record": 137, "evalu": [137, 153, 171], "init": 137, "predict": [137, 145, 165, 167, 171], "svd": 137, "loss": [138, 146, 167, 168], "multi": [138, 154], "n": 138, "transform": [138, 154], "vae": 138, "ndcg": 140, "recal": 140, "csv": [141, 142], "record": [141, 159, 160, 163, 171], "multipli": [144, 145, 146, 147, 148], "model": [146, 168], "default": 148, "infer": 148, "best_checkpoint": 149, "save_vari": 149, "saved_model": [149, 158], "early_stop": 150, "log_variables_init": 150, "logging_tensor": 150, "num_param": 150, "steps_per_sec": 150, "summari": 150, "checkpoint_initi": 151, "hdf": 152, "json": 152, "parquet": 152, "cleanup_checkpoint": 153, "combin": [153, 154, 159], "copy_dir": 153, "export_xla_model_metadata": 153, "log_metr": 153, "mlflow_save_config": 153, "mlflow_save_info": 153, "optimize_saved_model": 153, "params_tun": 153, "save_dataset": 153, "trainer_bas": 153, "trainer_kera": 153, "yarn_config": 153, "yarn_launch": 153, "yarn_train": 153, "bpr_max": 154, "click_rank": 154, "core": [154, 156, 157, 159], "dropout": 154, "lstm": 154, "mask": 154, "multi_css": 154, "nce_loss": 154, "reduc": 154, "spars": 154, "string": 154, "top_on": 154, "top_one_max": 154, "triplet_precis": 154, "dynam": [155, 166], "graphite_init": 155, "mlflow_init": 155, "accuraci": 156, "step": [156, 171], "variabl": 156, "predictor": 158, "proto": 158, "broadcast": 161, "checkpoint": 161, "datastruct": 161, "except": 161, "graph": 161, "graphit": 161, "iter": 161, "mlflow": 161, "tabl": [161, 170], "tf2xla_pb2": 161, "uuid": 161, "advanc": 165, "origin": 165, "trainerjob": 165, "trainspec": 165, "evalspec": 165, "full": 165, "cleanup": 165, "design": 166, "requir": 166, "arbitrari": 166, "tree": 166, "object": 166, "posit": 166, "argument": 166, "custom": 167, "dataset": [167, 168, 171], "defin": 167, "run": [167, 171], "yarn": 167, "local": 167, "file": 167, "quickstart": 168, "pred": 168, "hyper": 169, "paramet": 169, "tune": 169, "prepar": 169, "launch": 169, "document": 170, "get": 170, "start": 170, "developp": 170, "api": 170, "indic": 170, "download": 171, "tf": 171, "visual": 171, "knn": 171}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"deepr.config.assert_no_macros": [[0, "deepr-config-assert-no-macros"]], "deepr.config.fill_macros": [[1, "deepr-config-fill-macros"]], "deepr.config.fill_references": [[2, "deepr-config-fill-references"]], "deepr.config.from_config": [[3, "deepr-config-from-config"]], "deepr.config.ismacro": [[4, "deepr-config-ismacro"]], "deepr.config.isreference": [[5, "deepr-config-isreference"]], "deepr.config.parse_config": [[6, "deepr-config-parse-config"]], "deepr.exporters.BestCheckpoint": [[7, "deepr-exporters-bestcheckpoint"]], "deepr.exporters.Exporter": [[8, "deepr-exporters-exporter"]], "deepr.exporters.SaveVariables": [[9, "deepr-exporters-savevariables"]], "deepr.exporters.SavedModel": [[10, "deepr-exporters-savedmodel"]], "deepr.hooks.EarlyStoppingHookFactory": [[11, "deepr-hooks-earlystoppinghookfactory"]], "deepr.hooks.EstimatorHookFactory": [[12, "deepr-hooks-estimatorhookfactory"]], "deepr.hooks.LoggingTensorHookFactory": [[13, "deepr-hooks-loggingtensorhookfactory"]], "deepr.hooks.MaxResidentMemory": [[14, "deepr-hooks-maxresidentmemory"]], "deepr.hooks.ResidentMemory": [[15, "deepr-hooks-residentmemory"]], "deepr.hooks.StepsPerSecHook": [[16, "deepr-hooks-stepspersechook"]], "deepr.hooks.SummarySaverHookFactory": [[17, "deepr-hooks-summarysaverhookfactory"]], "deepr.hooks.TensorHookFactory": [[18, "deepr-hooks-tensorhookfactory"]], "deepr.initializers.CheckpointInitializer": [[19, "deepr-initializers-checkpointinitializer"]], "deepr.io.HDFSFileSystem": [[20, "deepr-io-hdfsfilesystem"]], "deepr.io.ParquetDataset": [[21, "deepr-io-parquetdataset"]], "deepr.io.Path": [[22, "deepr-io-path"]], "deepr.io.read_json": [[23, "deepr-io-read-json"]], "deepr.jobs.CleanupCheckpoints": [[24, "deepr-jobs-cleanupcheckpoints"]], "deepr.jobs.CopyDir": [[25, "deepr-jobs-copydir"]], "deepr.jobs.ExportXlaModelMetadata": [[26, "deepr-jobs-exportxlamodelmetadata"]], "deepr.jobs.GridSampler": [[27, "deepr-jobs-gridsampler"]], "deepr.jobs.Job": [[28, "deepr-jobs-job"]], "deepr.jobs.LogMetric": [[29, "deepr-jobs-logmetric"]], "deepr.jobs.MLFlowSaveConfigs": [[30, "deepr-jobs-mlflowsaveconfigs"]], "deepr.jobs.MLFlowSaveInfo": [[31, "deepr-jobs-mlflowsaveinfo"]], "deepr.jobs.OptimizeSavedModel": [[32, "deepr-jobs-optimizesavedmodel"]], "deepr.jobs.ParamsSampler": [[33, "deepr-jobs-paramssampler"]], "deepr.jobs.ParamsTuner": [[34, "deepr-jobs-paramstuner"]], "deepr.jobs.Pipeline": [[35, "deepr-jobs-pipeline"]], "deepr.jobs.Sampler": [[36, "deepr-jobs-sampler"]], "deepr.jobs.SaveDataset": [[37, "deepr-jobs-savedataset"]], "deepr.jobs.Trainer": [[38, "deepr-jobs-trainer"]], "deepr.jobs.YarnLauncher": [[39, "deepr-jobs-yarnlauncher"]], "deepr.jobs.YarnTrainer": [[40, "deepr-jobs-yarntrainer"]], "deepr.layers.ActiveMode": [[41, "deepr-layers-activemode"]], "deepr.layers.Add": [[42, "deepr-layers-add"]], "deepr.layers.Average": [[43, "deepr-layers-average"]], "deepr.layers.BPR": [[44, "deepr-layers-bpr"]], "deepr.layers.BooleanMask": [[45, "deepr-layers-booleanmask"]], "deepr.layers.ClickRank": [[46, "deepr-layers-clickrank"]], "deepr.layers.Concat": [[47, "deepr-layers-concat"]], "deepr.layers.DAG": [[48, "deepr-layers-dag"]], "deepr.layers.Dense": [[49, "deepr-layers-dense"]], "deepr.layers.DotProduct": [[50, "deepr-layers-dotproduct"]], "deepr.layers.Embedding": [[51, "deepr-layers-embedding"]], "deepr.layers.Equal": [[52, "deepr-layers-equal"]], "deepr.layers.Identity": [[53, "deepr-layers-identity"]], "deepr.layers.IsMinSize": [[54, "deepr-layers-isminsize"]], "deepr.layers.Layer": [[55, "deepr-layers-layer"]], "deepr.layers.LogicalAnd": [[56, "deepr-layers-logicaland"]], "deepr.layers.Lookup": [[57, "deepr-layers-lookup"]], "deepr.layers.LookupFromFile": [[58, "deepr-layers-lookupfromfile"]], "deepr.layers.LookupFromMapping": [[59, "deepr-layers-lookupfrommapping"]], "deepr.layers.LookupIndexToString": [[60, "deepr-layers-lookupindextostring"]], "deepr.layers.MaskedBPR": [[61, "deepr-layers-maskedbpr"]], "deepr.layers.NotEqual": [[62, "deepr-layers-notequal"]], "deepr.layers.Parallel": [[63, "deepr-layers-parallel"]], "deepr.layers.Product": [[64, "deepr-layers-product"]], "deepr.layers.Rename": [[65, "deepr-layers-rename"]], "deepr.layers.Select": [[66, "deepr-layers-select"]], "deepr.layers.Sequential": [[67, "deepr-layers-sequential"]], "deepr.layers.Slice": [[68, "deepr-layers-slice"]], "deepr.layers.SliceFirst": [[69, "deepr-layers-slicefirst"]], "deepr.layers.SliceLast": [[70, "deepr-layers-slicelast"]], "deepr.layers.StringJoin": [[71, "deepr-layers-stringjoin"]], "deepr.layers.Sum": [[72, "deepr-layers-sum"]], "deepr.layers.ToDense": [[73, "deepr-layers-todense"]], "deepr.layers.ToFloat": [[74, "deepr-layers-tofloat"]], "deepr.layers.WeightedAverage": [[75, "deepr-layers-weightedaverage"]], "deepr.macros.MLFlowInit": [[76, "deepr-macros-mlflowinit"]], "deepr.metrics.DecayMean": [[77, "deepr-metrics-decaymean"]], "deepr.metrics.FiniteMean": [[78, "deepr-metrics-finitemean"]], "deepr.metrics.LastValue": [[79, "deepr-metrics-lastvalue"]], "deepr.metrics.MaxValue": [[80, "deepr-metrics-maxvalue"]], "deepr.metrics.Mean": [[81, "deepr-metrics-mean"]], "deepr.metrics.Metric": [[82, "deepr-metrics-metric"]], "deepr.metrics.StepCounter": [[83, "deepr-metrics-stepcounter"]], "deepr.metrics.VariableValue": [[84, "deepr-metrics-variablevalue"]], "deepr.optimizers.Optimizer": [[85, "deepr-optimizers-optimizer"]], "deepr.optimizers.TensorflowOptimizer": [[86, "deepr-optimizers-tensorflowoptimizer"]], "deepr.prepros.Batch": [[87, "deepr-prepros-batch"]], "deepr.prepros.Filter": [[88, "deepr-prepros-filter"]], "deepr.prepros.FromExample": [[89, "deepr-prepros-fromexample"]], "deepr.prepros.Map": [[90, "deepr-prepros-map"]], "deepr.prepros.PaddedBatch": [[91, "deepr-prepros-paddedbatch"]], "deepr.prepros.Prefetch": [[92, "deepr-prepros-prefetch"]], "deepr.prepros.Prepro": [[93, "deepr-prepros-prepro"]], "deepr.prepros.Repeat": [[94, "deepr-prepros-repeat"]], "deepr.prepros.Serial": [[95, "deepr-prepros-serial"]], "deepr.prepros.Shuffle": [[96, "deepr-prepros-shuffle"]], "deepr.prepros.TFRecordSequenceExample": [[97, "deepr-prepros-tfrecordsequenceexample"]], "deepr.prepros.TableInitializer": [[98, "deepr-prepros-tableinitializer"]], "deepr.prepros.Take": [[99, "deepr-prepros-take"]], "deepr.prepros.ToExample": [[100, "deepr-prepros-toexample"]], "deepr.readers.GeneratorReader": [[101, "deepr-readers-generatorreader"]], "deepr.readers.Reader": [[102, "deepr-readers-reader"]], "deepr.readers.TFRecordReader": [[103, "deepr-readers-tfrecordreader"]], "deepr.utils.Field": [[104, "deepr-utils-field"]], "deepr.utils.TableContext": [[105, "deepr-utils-tablecontext"]], "deepr.utils.TensorType": [[106, "deepr-utils-tensortype"]], "deepr.utils.chunks": [[107, "deepr-utils-chunks"]], "deepr.utils.dict_to_item": [[108, "deepr-utils-dict-to-item"]], "deepr.utils.get_feedable_tensors": [[109, "deepr-utils-get-feedable-tensors"]], "deepr.utils.get_fetchable_tensors": [[110, "deepr-utils-get-fetchable-tensors"]], "deepr.utils.handle_exceptions": [[111, "deepr-utils-handle-exceptions"]], "deepr.utils.import_graph_def": [[112, "deepr-utils-import-graph-def"]], "deepr.utils.index_to_string_table_from_file": [[113, "deepr-utils-index-to-string-table-from-file"]], "deepr.utils.item_to_dict": [[114, "deepr-utils-item-to-dict"]], "deepr.utils.make_same_shape": [[115, "deepr-utils-make-same-shape"]], "deepr.utils.msb_lsb_to_str": [[116, "deepr-utils-msb-lsb-to-str"]], "deepr.utils.progress": [[117, "deepr-utils-progress"]], "deepr.utils.save_variables_in_ckpt": [[118, "deepr-utils-save-variables-in-ckpt"]], "deepr.utils.str_to_msb_lsb": [[119, "deepr-utils-str-to-msb-lsb"]], "deepr.utils.table_from_file": [[120, "deepr-utils-table-from-file"]], "deepr.utils.table_from_mapping": [[121, "deepr-utils-table-from-mapping"]], "deepr.utils.to_flat_tuple": [[122, "deepr-utils-to-flat-tuple"]], "deepr.vocab.read": [[123, "deepr-vocab-read"]], "deepr.vocab.size": [[124, "deepr-vocab-size"]], "deepr.vocab.write": [[125, "deepr-vocab-write"]], "deepr.writers.TFRecordWriter": [[126, "deepr-writers-tfrecordwriter"]], "deepr.writers.Writer": [[127, "deepr-writers-writer"]], "DeepR": [[128, "deepr"]], "Config": [[128, "config"], [166, "Config"]], "Exporter": [[128, "exporter"]], "Hook": [[128, "hook"]], "Initializer": [[128, "initializer"]], "Io": [[128, "io"]], "Job": [[128, "job"]], "Layer": [[128, "layer"]], "Macros": [[128, "macros"], [166, "Macros"]], "Metrics": [[128, "metrics"], [165, "Metrics"]], "Optimizer": [[128, "optimizer"], [168, "Optimizer"]], "Prepro": [[128, "prepro"], [167, "Prepro"], [167, "id3"], [168, "Prepro"]], "Reader": [[128, "reader"], [167, "Reader"], [167, "id2"]], "Utils": [[128, "utils"]], "Vocab": [[128, "vocab"]], "Writer": [[128, "writer"]], "Changelog": [[129, "changelog"]], "[2.13.0] - 2023-01-07": [[129, "id1"]], "Added": [[129, "added"], [129, "id3"], [129, "id10"], [129, "id17"], [129, "id21"], [129, "id28"], [129, "id32"], [129, "id39"], [129, "id43"], [129, "id50"], [129, "id54"], [129, "id57"], [129, "id64"], [129, "id66"], [129, "id73"], [129, "id80"], [129, "id87"], [129, "id94"], [129, "id101"], [129, "id103"]], "Changed": [[129, "changed"], [129, "id4"], [129, "id11"], [129, "id22"], [129, "id29"], [129, "id33"], [129, "id44"], [129, "id55"], [129, "id58"], [129, "id67"], [129, "id74"], [129, "id81"], [129, "id88"], [129, "id95"]], "Deprecated": [[129, "deprecated"], [129, "id5"], [129, "id12"], [129, "id34"], [129, "id45"], [129, "id59"], [129, "id68"], [129, "id75"], [129, "id82"], [129, "id89"], [129, "id96"]], "Removed": [[129, "removed"], [129, "id6"], [129, "id13"], [129, "id35"], [129, "id46"], [129, "id60"], [129, "id69"], [129, "id76"], [129, "id83"], [129, "id90"], [129, "id97"]], "Fixed": [[129, "fixed"], [129, "id7"], [129, "id14"], [129, "id19"], [129, "id24"], [129, "id26"], [129, "id30"], [129, "id36"], [129, "id41"], [129, "id47"], [129, "id52"], [129, "id61"], [129, "id70"], [129, "id77"], [129, "id84"], [129, "id91"], [129, "id98"]], "Security": [[129, "security"], [129, "id8"], [129, "id15"], [129, "id37"], [129, "id48"], [129, "id62"], [129, "id71"], [129, "id78"], [129, "id85"], [129, "id92"], [129, "id99"]], "[2.12.0] - 2021-04-29": [[129, "id2"]], "[2.11.0] - 2020-12-11": [[129, "id9"]], "[2.10.0] - 2020-10-28": [[129, "id16"]], "[2.9.1] - 2020-10-01": [[129, "id18"]], "[2.9.0] - 2020-10-01": [[129, "id20"]], "[2.8.2] - 2020-09-07": [[129, "id23"]], "[2.8.1] - 2020-09-03": [[129, "id25"]], "[2.8.0] - 2020-09-03": [[129, "id27"]], "[2.7.0] - 2020-08-04": [[129, "id31"]], "[2.6.0] - 2020-07-02": [[129, "id38"]], "[2.5.1] - 2020-07-01": [[129, "id40"]], "[2.5.0] - 2020-07-01": [[129, "id42"]], "[2.4.2] - 2020-06-19": [[129, "id49"]], "[2.4.1] - 2020-06-15": [[129, "id51"]], "[2.4.0] - 2020-06-10": [[129, "id53"]], "[2.3.0] - 2020-06-10": [[129, "id56"]], "[2.2.0] - 2020-06-08": [[129, "id63"]], "[2.1.1] - 2020-06-05": [[129, "id65"]], "[2.1.0] - 2020-06-04": [[129, "id72"]], "[2.0.0] - 2020-06-03": [[129, "id79"]], "[1.2.1] - 2020-05-27": [[129, "id86"]], "[1.2.0] - 2020-05-26": [[129, "id93"]], "[1.1.0] - 2020-05-25": [[129, "id100"]], "[1.0.0] - 2020-05-19": [[129, "id102"]], "Contributing": [[130, "contributing"], [131, "contributing"]], "Testing and Coverage": [[130, "testing-and-coverage"]], "Python Code Style": [[130, "python-code-style"]], "Generalities": [[130, "generalities"]], "Imports": [[130, "imports"]], "Order of Methods": [[130, "order-of-methods"]], "Docstrings": [[130, "docstrings"]], "Example: functions": [[130, "example-functions"]], "Example: classes": [[130, "example-classes"]], "DeepR: Build and Train Deep Learning Pipelines for Production": [[131, "deepr-build-and-train-deep-learning-pipelines-for-production"]], "Why a Deep Learning Library based on TF1.x": [[131, "why-a-deep-learning-library-based-on-tf1-x"]], "Use DeepR": [[131, "use-deepr"]], "MovieLens Example": [[131, "movielens-example"], [171, "MovieLens-Example"]], "Installation": [[131, "installation"]], "Prerequisites": [[131, "prerequisites"]], "Using Pip": [[131, "using-pip"]], "From Source": [[131, "from-source"]], "Test": [[131, "test"]], "Lint": [[131, "lint"]], "Command Line Tools": [[131, "command-line-tools"]], "Change log": [[131, "change-log"]], "Main contributors": [[131, "main-contributors"]], "deepr package": [[132, "deepr-package"]], "Subpackages": [[132, "subpackages"], [135, "subpackages"], [136, "subpackages"], [144, "subpackages"]], "Submodules": [[132, "submodules"], [133, "submodules"], [134, "submodules"], [137, "submodules"], [138, "submodules"], [139, "submodules"], [140, "submodules"], [141, "submodules"], [142, "submodules"], [143, "submodules"], [145, "submodules"], [146, "submodules"], [147, "submodules"], [148, "submodules"], [149, "submodules"], [150, "submodules"], [151, "submodules"], [152, "submodules"], [153, "submodules"], [154, "submodules"], [155, "submodules"], [156, "submodules"], [157, "submodules"], [158, "submodules"], [159, "submodules"], [160, "submodules"], [161, "submodules"], [162, "submodules"], [163, "submodules"]], "deepr.version module": [[132, "module-deepr.version"]], "Module contents": [[132, "module-deepr"], [133, "module-deepr.cli"], [134, "module-deepr.config"], [135, "module-deepr.examples"], [136, "module-deepr.examples.movielens"], [137, "module-deepr.examples.movielens.jobs"], [138, "module-deepr.examples.movielens.layers"], [139, "module-deepr.examples.movielens.macros"], [140, "module-deepr.examples.movielens.metrics"], [141, "module-deepr.examples.movielens.prepros"], [142, "module-deepr.examples.movielens.readers"], [143, "module-deepr.examples.movielens.utils"], [144, "module-deepr.examples.multiply"], [145, "module-deepr.examples.multiply.jobs"], [146, "module-deepr.examples.multiply.layers"], [147, "module-deepr.examples.multiply.macros"], [148, "module-deepr.examples.multiply.prepros"], [149, "module-deepr.exporters"], [150, "module-deepr.hooks"], [151, "module-deepr.initializers"], [152, "module-deepr.io"], [153, "module-deepr.jobs"], [154, "module-deepr.layers"], [155, "module-deepr.macros"], [156, "module-deepr.metrics"], [157, "module-deepr.optimizers"], [158, "module-deepr.predictors"], [159, "module-deepr.prepros"], [160, "module-deepr.readers"], [161, "module-deepr.utils"], [162, "module-deepr.vocab"], [163, "module-deepr.writers"]], "deepr.cli package": [[133, "deepr-cli-package"]], "deepr.cli.main module": [[133, "module-deepr.cli.main"]], "deepr.config package": [[134, "deepr-config-package"]], "deepr.config.base module": [[134, "module-deepr.config.base"]], "deepr.config.experimental module": [[134, "module-deepr.config.experimental"]], "deepr.config.macros module": [[134, "module-deepr.config.macros"]], "deepr.config.references module": [[134, "module-deepr.config.references"]], "deepr.examples package": [[135, "deepr-examples-package"]], "deepr.examples.movielens package": [[136, "deepr-examples-movielens-package"]], "deepr.examples.movielens.jobs package": [[137, "deepr-examples-movielens-jobs-package"]], "deepr.examples.movielens.jobs.build_records module": [[137, "module-deepr.examples.movielens.jobs.build_records"]], "deepr.examples.movielens.jobs.evaluate module": [[137, "module-deepr.examples.movielens.jobs.evaluate"]], "deepr.examples.movielens.jobs.init module": [[137, "module-deepr.examples.movielens.jobs.init"]], "deepr.examples.movielens.jobs.predict module": [[137, "module-deepr.examples.movielens.jobs.predict"]], "deepr.examples.movielens.jobs.svd module": [[137, "module-deepr.examples.movielens.jobs.svd"]], "deepr.examples.movielens.layers package": [[138, "deepr-examples-movielens-layers-package"]], "deepr.examples.movielens.layers.average module": [[138, "module-deepr.examples.movielens.layers.average"]], "deepr.examples.movielens.layers.bpr module": [[138, "module-deepr.examples.movielens.layers.bpr"]], "deepr.examples.movielens.layers.losses module": [[138, "module-deepr.examples.movielens.layers.losses"]], "deepr.examples.movielens.layers.multi module": [[138, "module-deepr.examples.movielens.layers.multi"]], "deepr.examples.movielens.layers.ns module": [[138, "module-deepr.examples.movielens.layers.ns"]], "deepr.examples.movielens.layers.transformer module": [[138, "module-deepr.examples.movielens.layers.transformer"]], "deepr.examples.movielens.layers.vae module": [[138, "module-deepr.examples.movielens.layers.vae"]], "deepr.examples.movielens.macros package": [[139, "deepr-examples-movielens-macros-package"]], "deepr.examples.movielens.macros.paths module": [[139, "module-deepr.examples.movielens.macros.paths"]], "deepr.examples.movielens.metrics package": [[140, "deepr-examples-movielens-metrics-package"]], "deepr.examples.movielens.metrics.ndcg module": [[140, "module-deepr.examples.movielens.metrics.ndcg"]], "deepr.examples.movielens.metrics.recall module": [[140, "module-deepr.examples.movielens.metrics.recall"]], "deepr.examples.movielens.prepros package": [[141, "deepr-examples-movielens-prepros-package"]], "deepr.examples.movielens.prepros.csv module": [[141, "module-deepr.examples.movielens.prepros.csv"]], "deepr.examples.movielens.prepros.record module": [[141, "module-deepr.examples.movielens.prepros.record"]], "deepr.examples.movielens.readers package": [[142, "deepr-examples-movielens-readers-package"]], "deepr.examples.movielens.readers.csv module": [[142, "module-deepr.examples.movielens.readers.csv"]], "deepr.examples.movielens.utils package": [[143, "deepr-examples-movielens-utils-package"]], "deepr.examples.movielens.utils.fields module": [[143, "module-deepr.examples.movielens.utils.fields"]], "deepr.examples.multiply package": [[144, "deepr-examples-multiply-package"]], "deepr.examples.multiply.jobs package": [[145, "deepr-examples-multiply-jobs-package"]], "deepr.examples.multiply.jobs.build module": [[145, "module-deepr.examples.multiply.jobs.build"]], "deepr.examples.multiply.jobs.predict module": [[145, "module-deepr.examples.multiply.jobs.predict"]], "deepr.examples.multiply.layers package": [[146, "deepr-examples-multiply-layers-package"]], "deepr.examples.multiply.layers.loss module": [[146, "module-deepr.examples.multiply.layers.loss"]], "deepr.examples.multiply.layers.model module": [[146, "module-deepr.examples.multiply.layers.model"]], "deepr.examples.multiply.macros package": [[147, "deepr-examples-multiply-macros-package"]], "deepr.examples.multiply.macros.paths module": [[147, "module-deepr.examples.multiply.macros.paths"]], "deepr.examples.multiply.prepros package": [[148, "deepr-examples-multiply-prepros-package"]], "deepr.examples.multiply.prepros.default module": [[148, "module-deepr.examples.multiply.prepros.default"]], "deepr.examples.multiply.prepros.inference module": [[148, "module-deepr.examples.multiply.prepros.inference"]], "deepr.exporters package": [[149, "deepr-exporters-package"]], "deepr.exporters.base module": [[149, "module-deepr.exporters.base"]], "deepr.exporters.best_checkpoint module": [[149, "module-deepr.exporters.best_checkpoint"]], "deepr.exporters.save_variables module": [[149, "module-deepr.exporters.save_variables"]], "deepr.exporters.saved_model module": [[149, "module-deepr.exporters.saved_model"]], "deepr.hooks package": [[150, "deepr-hooks-package"]], "deepr.hooks.base module": [[150, "module-deepr.hooks.base"]], "deepr.hooks.early_stopping module": [[150, "module-deepr.hooks.early_stopping"]], "deepr.hooks.log_variables_init module": [[150, "module-deepr.hooks.log_variables_init"]], "deepr.hooks.logging_tensor module": [[150, "module-deepr.hooks.logging_tensor"]], "deepr.hooks.num_params module": [[150, "module-deepr.hooks.num_params"]], "deepr.hooks.steps_per_sec module": [[150, "module-deepr.hooks.steps_per_sec"]], "deepr.hooks.summary module": [[150, "module-deepr.hooks.summary"]], "deepr.initializers package": [[151, "deepr-initializers-package"]], "deepr.initializers.checkpoint_initializer module": [[151, "module-deepr.initializers.checkpoint_initializer"]], "deepr.io package": [[152, "deepr-io-package"]], "deepr.io.hdfs module": [[152, "module-deepr.io.hdfs"]], "deepr.io.json module": [[152, "module-deepr.io.json"]], "deepr.io.parquet module": [[152, "module-deepr.io.parquet"]], "deepr.io.path module": [[152, "module-deepr.io.path"]], "deepr.jobs package": [[153, "deepr-jobs-package"]], "deepr.jobs.base module": [[153, "module-deepr.jobs.base"]], "deepr.jobs.cleanup_checkpoints module": [[153, "module-deepr.jobs.cleanup_checkpoints"]], "deepr.jobs.combinators module": [[153, "module-deepr.jobs.combinators"]], "deepr.jobs.copy_dir module": [[153, "module-deepr.jobs.copy_dir"]], "deepr.jobs.evaluate module": [[153, "module-deepr.jobs.evaluate"]], "deepr.jobs.export_xla_model_metadata module": [[153, "module-deepr.jobs.export_xla_model_metadata"]], "deepr.jobs.log_metric module": [[153, "module-deepr.jobs.log_metric"]], "deepr.jobs.mlflow_save_configs module": [[153, "module-deepr.jobs.mlflow_save_configs"]], "deepr.jobs.mlflow_save_info module": [[153, "module-deepr.jobs.mlflow_save_info"]], "deepr.jobs.optimize_saved_model module": [[153, "module-deepr.jobs.optimize_saved_model"]], "deepr.jobs.params_tuner module": [[153, "module-deepr.jobs.params_tuner"]], "deepr.jobs.save_dataset module": [[153, "module-deepr.jobs.save_dataset"]], "deepr.jobs.trainer module": [[153, "module-deepr.jobs.trainer"]], "deepr.jobs.trainer_base module": [[153, "module-deepr.jobs.trainer_base"]], "deepr.jobs.trainer_keras module": [[153, "module-deepr.jobs.trainer_keras"]], "deepr.jobs.yarn_config module": [[153, "module-deepr.jobs.yarn_config"]], "deepr.jobs.yarn_launcher module": [[153, "module-deepr.jobs.yarn_launcher"]], "deepr.jobs.yarn_trainer module": [[153, "module-deepr.jobs.yarn_trainer"]], "deepr.layers package": [[154, "deepr-layers-package"]], "deepr.layers.base module": [[154, "module-deepr.layers.base"]], "deepr.layers.bpr module": [[154, "module-deepr.layers.bpr"]], "deepr.layers.bpr_max module": [[154, "module-deepr.layers.bpr_max"]], "deepr.layers.click_rank module": [[154, "module-deepr.layers.click_rank"]], "deepr.layers.combinators module": [[154, "module-deepr.layers.combinators"]], "deepr.layers.core module": [[154, "module-deepr.layers.core"]], "deepr.layers.dropout module": [[154, "module-deepr.layers.dropout"]], "deepr.layers.embedding module": [[154, "module-deepr.layers.embedding"]], "deepr.layers.lookup module": [[154, "module-deepr.layers.lookup"]], "deepr.layers.lstm module": [[154, "module-deepr.layers.lstm"]], "deepr.layers.mask module": [[154, "module-deepr.layers.mask"]], "deepr.layers.multi module": [[154, "module-deepr.layers.multi"]], "deepr.layers.multi_css module": [[154, "module-deepr.layers.multi_css"]], "deepr.layers.nce_loss module": [[154, "module-deepr.layers.nce_loss"]], "deepr.layers.reduce module": [[154, "module-deepr.layers.reduce"]], "deepr.layers.size module": [[154, "module-deepr.layers.size"]], "deepr.layers.slice module": [[154, "module-deepr.layers.slice"]], "deepr.layers.sparse module": [[154, "module-deepr.layers.sparse"]], "deepr.layers.string module": [[154, "module-deepr.layers.string"]], "deepr.layers.top_one module": [[154, "module-deepr.layers.top_one"]], "deepr.layers.top_one_max module": [[154, "module-deepr.layers.top_one_max"]], "deepr.layers.transformer module": [[154, "module-deepr.layers.transformer"]], "deepr.layers.triplet_precision module": [[154, "module-deepr.layers.triplet_precision"]], "deepr.macros package": [[155, "deepr-macros-package"]], "deepr.macros.dynamic module": [[155, "module-deepr.macros.dynamic"]], "deepr.macros.graphite_init module": [[155, "module-deepr.macros.graphite_init"]], "deepr.macros.mlflow_init module": [[155, "module-deepr.macros.mlflow_init"]], "deepr.metrics package": [[156, "deepr-metrics-package"]], "deepr.metrics.accuracy module": [[156, "module-deepr.metrics.accuracy"]], "deepr.metrics.base module": [[156, "module-deepr.metrics.base"]], "deepr.metrics.core module": [[156, "module-deepr.metrics.core"]], "deepr.metrics.mean module": [[156, "module-deepr.metrics.mean"]], "deepr.metrics.step module": [[156, "module-deepr.metrics.step"]], "deepr.metrics.variable module": [[156, "module-deepr.metrics.variable"]], "deepr.optimizers package": [[157, "deepr-optimizers-package"]], "deepr.optimizers.base module": [[157, "module-deepr.optimizers.base"]], "deepr.optimizers.core module": [[157, "module-deepr.optimizers.core"]], "deepr.predictors package": [[158, "deepr-predictors-package"]], "deepr.predictors.base module": [[158, "module-deepr.predictors.base"]], "deepr.predictors.proto module": [[158, "module-deepr.predictors.proto"]], "deepr.predictors.saved_model module": [[158, "module-deepr.predictors.saved_model"]], "deepr.prepros package": [[159, "deepr-prepros-package"]], "deepr.prepros.base module": [[159, "module-deepr.prepros.base"]], "deepr.prepros.combinators module": [[159, "module-deepr.prepros.combinators"]], "deepr.prepros.core module": [[159, "module-deepr.prepros.core"]], "deepr.prepros.lookup module": [[159, "module-deepr.prepros.lookup"]], "deepr.prepros.record module": [[159, "module-deepr.prepros.record"]], "deepr.readers package": [[160, "deepr-readers-package"]], "deepr.readers.base module": [[160, "module-deepr.readers.base"]], "deepr.readers.generator module": [[160, "module-deepr.readers.generator"]], "deepr.readers.record module": [[160, "module-deepr.readers.record"]], "deepr.utils package": [[161, "deepr-utils-package"]], "deepr.utils.broadcasting module": [[161, "module-deepr.utils.broadcasting"]], "deepr.utils.checkpoint module": [[161, "module-deepr.utils.checkpoint"]], "deepr.utils.datastruct module": [[161, "module-deepr.utils.datastruct"]], "deepr.utils.exceptions module": [[161, "module-deepr.utils.exceptions"]], "deepr.utils.field module": [[161, "module-deepr.utils.field"]], "deepr.utils.graph module": [[161, "module-deepr.utils.graph"]], "deepr.utils.graphite module": [[161, "module-deepr.utils.graphite"]], "deepr.utils.iter module": [[161, "module-deepr.utils.iter"]], "deepr.utils.mlflow module": [[161, "module-deepr.utils.mlflow"]], "deepr.utils.tables module": [[161, "module-deepr.utils.tables"]], "deepr.utils.tf2xla_pb2 module": [[161, "module-deepr.utils.tf2xla_pb2"]], "deepr.utils.uuid module": [[161, "module-deepr.utils.uuid"]], "deepr.vocab package": [[162, "deepr-vocab-package"]], "deepr.vocab.base module": [[162, "module-deepr.vocab.base"]], "deepr.writers package": [[163, "deepr-writers-package"]], "deepr.writers.base module": [[163, "module-deepr.writers.base"]], "deepr.writers.record module": [[163, "module-deepr.writers.record"]], "deepr": [[164, "deepr"]], "Advanced": [[165, "Advanced"]], "Original TrainerJob": [[165, "Original-TrainerJob"]], "TrainSpec and EvalSpec": [[165, "TrainSpec-and-EvalSpec"]], "Hooks": [[165, "Hooks"]], "Exporters": [[165, "Exporters"]], "Full TrainerJob": [[165, "Full-TrainerJob"]], "Cleanup Job": [[165, "Cleanup-Job"]], "OptimizeSavedModel": [[165, "OptimizeSavedModel"]], "ExportXlaModelMetadata": [[165, "ExportXlaModelMetadata"]], "Predict Job": [[165, "Predict-Job"]], "Full Pipeline": [[165, "Full-Pipeline"]], "Design Requirements": [[166, "Design-Requirements"]], "Arbitrary tree of objects": [[166, "Arbitrary-tree-of-objects"]], "Dynamic Macros": [[166, "Dynamic-Macros"]], "Positional Arguments": [[166, "Positional-Arguments"]], "Argument as config": [[166, "Argument-as-config"]], "References": [[166, "References"]], "Pipeline": [[167, "Pipeline"]], "1. Custom Build Dataset Job": [[167, "1.-Custom-Build-Dataset-Job"]], "Build Job": [[167, "Build-Job"], [167, "id1"]], "2. Define a Pipeline": [[167, "2.-Define-a-Pipeline"]], "3. Run on Yarn": [[167, "3.-Run-on-Yarn"]], "Prediction Function": [[167, "Prediction-Function"]], "Loss Function": [[167, "Loss-Function"]], "Trainer Job": [[167, "Trainer-Job"]], "Train Locally": [[167, "Train-Locally"]], "Train on Yarn": [[167, "Train-on-Yarn"]], "Using config files": [[167, "Using-config-files"]], "Quickstart": [[168, "Quickstart"]], "Dataset": [[168, "Dataset"]], "Model": [[168, "Model"]], "Pred function": [[168, "Pred-function"]], "Loss function": [[168, "Loss-function"]], "Trainer job": [[168, "Trainer-job"]], "Hyper Parameter Tuning": [[169, "Hyper-Parameter-Tuning"]], "Prepare config": [[169, "Prepare-config"]], "Launch": [[169, "Launch"]], "DeepR reference documentation": [[170, "deepr-reference-documentation"]], "Getting started": [[170, null]], "Examples": [[170, null]], "Developper documentation": [[170, null]], "API documentation": [[170, null]], "Indices and tables": [[170, "indices-and-tables"]], "Install": [[171, "Install"]], "Download the dataset": [[171, "Download-the-dataset"]], "Step 1 - Build TF Records": [[171, "Step-1---Build-TF-Records"]], "Step 2 - Training": [[171, "Step-2---Training"]], "Step 3 - Predict job": [[171, "Step-3---Predict-job"]], "Step 4 - Evaluation job": [[171, "Step-4---Evaluation-job"]], "Run the pipeline": [[171, "Run-the-pipeline"]], "Visualize embeddings with a KNN": [[171, "Visualize-embeddings-with-a-KNN"]]}, "indexentries": {"assert_no_macros() (in module deepr.config)": [[0, "deepr.config.assert_no_macros"]], "fill_macros() (in module deepr.config)": [[1, "deepr.config.fill_macros"]], "fill_references() (in module deepr.config)": [[2, "deepr.config.fill_references"]], "from_config() (in module deepr.config)": [[3, "deepr.config.from_config"]], "ismacro() (in module deepr.config)": [[4, "deepr.config.ismacro"]], "isreference() (in module deepr.config)": [[5, "deepr.config.isreference"]], "parse_config() (in module deepr.config)": [[6, "deepr.config.parse_config"]], "bestcheckpoint (class in deepr.exporters)": [[7, "deepr.exporters.BestCheckpoint"]], "__init__() (deepr.exporters.bestcheckpoint method)": [[7, "deepr.exporters.BestCheckpoint.__init__"]], "metric (deepr.exporters.bestcheckpoint attribute)": [[7, "deepr.exporters.BestCheckpoint.metric"]], "mode (deepr.exporters.bestcheckpoint attribute)": [[7, "deepr.exporters.BestCheckpoint.mode"]], "tag (deepr.exporters.bestcheckpoint attribute)": [[7, "deepr.exporters.BestCheckpoint.tag"]], "use_mlflow (deepr.exporters.bestcheckpoint attribute)": [[7, "deepr.exporters.BestCheckpoint.use_mlflow"]], "exporter (class in deepr.exporters)": [[8, "deepr.exporters.Exporter"]], "__init__() (deepr.exporters.exporter method)": [[8, "deepr.exporters.Exporter.__init__"]], "savevariables (class in deepr.exporters)": [[9, "deepr.exporters.SaveVariables"]], "__init__() (deepr.exporters.savevariables method)": [[9, "deepr.exporters.SaveVariables.__init__"]], "chunk_size (deepr.exporters.savevariables attribute)": [[9, "deepr.exporters.SaveVariables.chunk_size"]], "compression (deepr.exporters.savevariables attribute)": [[9, "deepr.exporters.SaveVariables.compression"]], "path_variables (deepr.exporters.savevariables attribute)": [[9, "deepr.exporters.SaveVariables.path_variables"]], "variable_names (deepr.exporters.savevariables attribute)": [[9, "deepr.exporters.SaveVariables.variable_names"]], "savedmodel (class in deepr.exporters)": [[10, "deepr.exporters.SavedModel"]], "__init__() (deepr.exporters.savedmodel method)": [[10, "deepr.exporters.SavedModel.__init__"]], "fields (deepr.exporters.savedmodel attribute)": [[10, "deepr.exporters.SavedModel.fields"]], "path_saved_model (deepr.exporters.savedmodel attribute)": [[10, "deepr.exporters.SavedModel.path_saved_model"]], "earlystoppinghookfactory (class in deepr.hooks)": [[11, "deepr.hooks.EarlyStoppingHookFactory"]], "__init__() (deepr.hooks.earlystoppinghookfactory method)": [[11, "deepr.hooks.EarlyStoppingHookFactory.__init__"]], "final_step (deepr.hooks.earlystoppinghookfactory attribute)": [[11, "deepr.hooks.EarlyStoppingHookFactory.final_step"]], "max_steps_without_improvement (deepr.hooks.earlystoppinghookfactory attribute)": [[11, "deepr.hooks.EarlyStoppingHookFactory.max_steps_without_improvement"]], "metric (deepr.hooks.earlystoppinghookfactory attribute)": [[11, "deepr.hooks.EarlyStoppingHookFactory.metric"]], "min_steps (deepr.hooks.earlystoppinghookfactory attribute)": [[11, "deepr.hooks.EarlyStoppingHookFactory.min_steps"]], "mode (deepr.hooks.earlystoppinghookfactory attribute)": [[11, "deepr.hooks.EarlyStoppingHookFactory.mode"]], "run_every_secs (deepr.hooks.earlystoppinghookfactory attribute)": [[11, "deepr.hooks.EarlyStoppingHookFactory.run_every_secs"]], "run_every_steps (deepr.hooks.earlystoppinghookfactory attribute)": [[11, "deepr.hooks.EarlyStoppingHookFactory.run_every_steps"]], "estimatorhookfactory (class in deepr.hooks)": [[12, "deepr.hooks.EstimatorHookFactory"]], "__init__() (deepr.hooks.estimatorhookfactory method)": [[12, "deepr.hooks.EstimatorHookFactory.__init__"]], "loggingtensorhookfactory (class in deepr.hooks)": [[13, "deepr.hooks.LoggingTensorHookFactory"]], "__init__() (deepr.hooks.loggingtensorhookfactory method)": [[13, "deepr.hooks.LoggingTensorHookFactory.__init__"]], "formatter (deepr.hooks.loggingtensorhookfactory attribute)": [[13, "deepr.hooks.LoggingTensorHookFactory.formatter"]], "functions (deepr.hooks.loggingtensorhookfactory attribute)": [[13, "deepr.hooks.LoggingTensorHookFactory.functions"]], "name (deepr.hooks.loggingtensorhookfactory attribute)": [[13, "deepr.hooks.LoggingTensorHookFactory.name"]], "skip_after_step (deepr.hooks.loggingtensorhookfactory attribute)": [[13, "deepr.hooks.LoggingTensorHookFactory.skip_after_step"]], "tensors (deepr.hooks.loggingtensorhookfactory attribute)": [[13, "deepr.hooks.LoggingTensorHookFactory.tensors"]], "use_graphite (deepr.hooks.loggingtensorhookfactory attribute)": [[13, "deepr.hooks.LoggingTensorHookFactory.use_graphite"]], "use_mlflow (deepr.hooks.loggingtensorhookfactory attribute)": [[13, "deepr.hooks.LoggingTensorHookFactory.use_mlflow"]], "maxresidentmemory (class in deepr.hooks)": [[14, "deepr.hooks.MaxResidentMemory"]], "__init__() (deepr.hooks.maxresidentmemory method)": [[14, "deepr.hooks.MaxResidentMemory.__init__"]], "residentmemory (class in deepr.hooks)": [[15, "deepr.hooks.ResidentMemory"]], "__init__() (deepr.hooks.residentmemory method)": [[15, "deepr.hooks.ResidentMemory.__init__"]], "stepspersechook (class in deepr.hooks)": [[16, "deepr.hooks.StepsPerSecHook"]], "__init__() (deepr.hooks.stepspersechook method)": [[16, "deepr.hooks.StepsPerSecHook.__init__"]], "batch_size (deepr.hooks.stepspersechook attribute)": [[16, "deepr.hooks.StepsPerSecHook.batch_size"]], "prefix (deepr.hooks.stepspersechook attribute)": [[16, "deepr.hooks.StepsPerSecHook.prefix"]], "skip_after_step (deepr.hooks.stepspersechook attribute)": [[16, "deepr.hooks.StepsPerSecHook.skip_after_step"]], "use_graphite (deepr.hooks.stepspersechook attribute)": [[16, "deepr.hooks.StepsPerSecHook.use_graphite"]], "use_mlflow (deepr.hooks.stepspersechook attribute)": [[16, "deepr.hooks.StepsPerSecHook.use_mlflow"]], "summarysaverhookfactory (class in deepr.hooks)": [[17, "deepr.hooks.SummarySaverHookFactory"]], "__init__() (deepr.hooks.summarysaverhookfactory method)": [[17, "deepr.hooks.SummarySaverHookFactory.__init__"]], "tensorhookfactory (class in deepr.hooks)": [[18, "deepr.hooks.TensorHookFactory"]], "__init__() (deepr.hooks.tensorhookfactory method)": [[18, "deepr.hooks.TensorHookFactory.__init__"]], "checkpointinitializer (class in deepr.initializers)": [[19, "deepr.initializers.CheckpointInitializer"]], "__init__() (deepr.initializers.checkpointinitializer method)": [[19, "deepr.initializers.CheckpointInitializer.__init__"]], "hdfsfilesystem (class in deepr.io)": [[20, "deepr.io.HDFSFileSystem"]], "__init__() (deepr.io.hdfsfilesystem method)": [[20, "deepr.io.HDFSFileSystem.__init__"]], "parquetdataset (class in deepr.io)": [[21, "deepr.io.ParquetDataset"]], "__init__() (deepr.io.parquetdataset method)": [[21, "deepr.io.ParquetDataset.__init__"]], "filesystem (deepr.io.parquetdataset attribute)": [[21, "deepr.io.ParquetDataset.filesystem"]], "path_or_paths (deepr.io.parquetdataset attribute)": [[21, "deepr.io.ParquetDataset.path_or_paths"]], "path (class in deepr.io)": [[22, "deepr.io.Path"]], "__init__() (deepr.io.path method)": [[22, "deepr.io.Path.__init__"]], "read_json() (in module deepr.io)": [[23, "deepr.io.read_json"]], "cleanupcheckpoints (class in deepr.jobs)": [[24, "deepr.jobs.CleanupCheckpoints"]], "__init__() (deepr.jobs.cleanupcheckpoints method)": [[24, "deepr.jobs.CleanupCheckpoints.__init__"]], "copydir (class in deepr.jobs)": [[25, "deepr.jobs.CopyDir"]], "__init__() (deepr.jobs.copydir method)": [[25, "deepr.jobs.CopyDir.__init__"]], "exportxlamodelmetadata (class in deepr.jobs)": [[26, "deepr.jobs.ExportXlaModelMetadata"]], "__init__() (deepr.jobs.exportxlamodelmetadata method)": [[26, "deepr.jobs.ExportXlaModelMetadata.__init__"]], "feed_shapes (deepr.jobs.exportxlamodelmetadata attribute)": [[26, "deepr.jobs.ExportXlaModelMetadata.feed_shapes"]], "fetch_shapes (deepr.jobs.exportxlamodelmetadata attribute)": [[26, "deepr.jobs.ExportXlaModelMetadata.fetch_shapes"]], "graph_name (deepr.jobs.exportxlamodelmetadata attribute)": [[26, "deepr.jobs.ExportXlaModelMetadata.graph_name"]], "metadata_name (deepr.jobs.exportxlamodelmetadata attribute)": [[26, "deepr.jobs.ExportXlaModelMetadata.metadata_name"]], "path_metadata (deepr.jobs.exportxlamodelmetadata attribute)": [[26, "deepr.jobs.ExportXlaModelMetadata.path_metadata"]], "path_optimized_model (deepr.jobs.exportxlamodelmetadata attribute)": [[26, "deepr.jobs.ExportXlaModelMetadata.path_optimized_model"]], "gridsampler (class in deepr.jobs)": [[27, "deepr.jobs.GridSampler"]], "__init__() (deepr.jobs.gridsampler method)": [[27, "deepr.jobs.GridSampler.__init__"]], "job (class in deepr.jobs)": [[28, "deepr.jobs.Job"]], "__init__() (deepr.jobs.job method)": [[28, "deepr.jobs.Job.__init__"]], "logmetric (class in deepr.jobs)": [[29, "deepr.jobs.LogMetric"]], "__init__() (deepr.jobs.logmetric method)": [[29, "deepr.jobs.LogMetric.__init__"]], "mlflowsaveconfigs (class in deepr.jobs)": [[30, "deepr.jobs.MLFlowSaveConfigs"]], "__init__() (deepr.jobs.mlflowsaveconfigs method)": [[30, "deepr.jobs.MLFlowSaveConfigs.__init__"]], "mlflowsaveinfo (class in deepr.jobs)": [[31, "deepr.jobs.MLFlowSaveInfo"]], "__init__() (deepr.jobs.mlflowsaveinfo method)": [[31, "deepr.jobs.MLFlowSaveInfo.__init__"]], "optimizesavedmodel (class in deepr.jobs)": [[32, "deepr.jobs.OptimizeSavedModel"]], "__init__() (deepr.jobs.optimizesavedmodel method)": [[32, "deepr.jobs.OptimizeSavedModel.__init__"]], "blacklisted_variables (deepr.jobs.optimizesavedmodel attribute)": [[32, "deepr.jobs.OptimizeSavedModel.blacklisted_variables"]], "feeds (deepr.jobs.optimizesavedmodel attribute)": [[32, "deepr.jobs.OptimizeSavedModel.feeds"]], "fetch (deepr.jobs.optimizesavedmodel attribute)": [[32, "deepr.jobs.OptimizeSavedModel.fetch"]], "graph_name (deepr.jobs.optimizesavedmodel attribute)": [[32, "deepr.jobs.OptimizeSavedModel.graph_name"]], "new_names (deepr.jobs.optimizesavedmodel attribute)": [[32, "deepr.jobs.OptimizeSavedModel.new_names"]], "path_optimized_model (deepr.jobs.optimizesavedmodel attribute)": [[32, "deepr.jobs.OptimizeSavedModel.path_optimized_model"]], "path_saved_model (deepr.jobs.optimizesavedmodel attribute)": [[32, "deepr.jobs.OptimizeSavedModel.path_saved_model"]], "paramssampler (class in deepr.jobs)": [[33, "deepr.jobs.ParamsSampler"]], "__init__() (deepr.jobs.paramssampler method)": [[33, "deepr.jobs.ParamsSampler.__init__"]], "paramstuner (class in deepr.jobs)": [[34, "deepr.jobs.ParamsTuner"]], "__init__() (deepr.jobs.paramstuner method)": [[34, "deepr.jobs.ParamsTuner.__init__"]], "pipeline (class in deepr.jobs)": [[35, "deepr.jobs.Pipeline"]], "__init__() (deepr.jobs.pipeline method)": [[35, "deepr.jobs.Pipeline.__init__"]], "sampler (class in deepr.jobs)": [[36, "deepr.jobs.Sampler"]], "__init__() (deepr.jobs.sampler method)": [[36, "deepr.jobs.Sampler.__init__"]], "savedataset (class in deepr.jobs)": [[37, "deepr.jobs.SaveDataset"]], "__init__() (deepr.jobs.savedataset method)": [[37, "deepr.jobs.SaveDataset.__init__"]], "trainer (class in deepr.jobs)": [[38, "deepr.jobs.Trainer"]], "__init__() (deepr.jobs.trainer method)": [[38, "deepr.jobs.Trainer.__init__"]], "config_proto (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.config_proto"]], "eval_hooks (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.eval_hooks"]], "eval_input_fn (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.eval_input_fn"]], "eval_metrics (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.eval_metrics"]], "eval_spec (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.eval_spec"]], "exporters (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.exporters"]], "initializer_fn (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.initializer_fn"]], "loss_fn (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.loss_fn"]], "optimizer_fn (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.optimizer_fn"]], "path_model (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.path_model"]], "pred_fn (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.pred_fn"]], "prepro_fn (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.prepro_fn"]], "run_config (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.run_config"]], "train_hooks (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.train_hooks"]], "train_input_fn (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.train_input_fn"]], "train_metrics (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.train_metrics"]], "train_spec (deepr.jobs.trainer attribute)": [[38, "deepr.jobs.Trainer.train_spec"]], "yarnlauncher (class in deepr.jobs)": [[39, "deepr.jobs.YarnLauncher"]], "__init__() (deepr.jobs.yarnlauncher method)": [[39, "deepr.jobs.YarnLauncher.__init__"]], "yarntrainer (class in deepr.jobs)": [[40, "deepr.jobs.YarnTrainer"]], "__init__() (deepr.jobs.yarntrainer method)": [[40, "deepr.jobs.YarnTrainer.__init__"]], "activemode (class in deepr.layers)": [[41, "deepr.layers.ActiveMode"]], "__init__() (deepr.layers.activemode method)": [[41, "deepr.layers.ActiveMode.__init__"]], "add (class in deepr.layers)": [[42, "deepr.layers.Add"]], "__init__() (deepr.layers.add method)": [[42, "deepr.layers.Add.__init__"]], "average (class in deepr.layers)": [[43, "deepr.layers.Average"]], "__init__() (deepr.layers.average method)": [[43, "deepr.layers.Average.__init__"]], "bpr (class in deepr.layers)": [[44, "deepr.layers.BPR"]], "__init__() (deepr.layers.bpr method)": [[44, "deepr.layers.BPR.__init__"]], "booleanmask (class in deepr.layers)": [[45, "deepr.layers.BooleanMask"]], "__init__() (deepr.layers.booleanmask method)": [[45, "deepr.layers.BooleanMask.__init__"]], "clickrank (class in deepr.layers)": [[46, "deepr.layers.ClickRank"]], "__init__() (deepr.layers.clickrank method)": [[46, "deepr.layers.ClickRank.__init__"]], "concat (class in deepr.layers)": [[47, "deepr.layers.Concat"]], "__init__() (deepr.layers.concat method)": [[47, "deepr.layers.Concat.__init__"]], "dag (class in deepr.layers)": [[48, "deepr.layers.DAG"]], "__init__() (deepr.layers.dag method)": [[48, "deepr.layers.DAG.__init__"]], "dense (class in deepr.layers)": [[49, "deepr.layers.Dense"]], "__init__() (deepr.layers.dense method)": [[49, "deepr.layers.Dense.__init__"]], "dotproduct (class in deepr.layers)": [[50, "deepr.layers.DotProduct"]], "__init__() (deepr.layers.dotproduct method)": [[50, "deepr.layers.DotProduct.__init__"]], "embedding (class in deepr.layers)": [[51, "deepr.layers.Embedding"]], "__init__() (deepr.layers.embedding method)": [[51, "deepr.layers.Embedding.__init__"]], "equal (class in deepr.layers)": [[52, "deepr.layers.Equal"]], "__init__() (deepr.layers.equal method)": [[52, "deepr.layers.Equal.__init__"]], "identity (class in deepr.layers)": [[53, "deepr.layers.Identity"]], "__init__() (deepr.layers.identity method)": [[53, "deepr.layers.Identity.__init__"]], "isminsize (class in deepr.layers)": [[54, "deepr.layers.IsMinSize"]], "__init__() (deepr.layers.isminsize method)": [[54, "deepr.layers.IsMinSize.__init__"]], "layer (class in deepr.layers)": [[55, "deepr.layers.Layer"]], "__init__() (deepr.layers.layer method)": [[55, "deepr.layers.Layer.__init__"]], "inputs (deepr.layers.layer attribute)": [[55, "deepr.layers.Layer.inputs"]], "n_in (deepr.layers.layer attribute)": [[55, "deepr.layers.Layer.n_in"]], "n_out (deepr.layers.layer attribute)": [[55, "deepr.layers.Layer.n_out"]], "name (deepr.layers.layer attribute)": [[55, "deepr.layers.Layer.name"]], "outputs (deepr.layers.layer attribute)": [[55, "deepr.layers.Layer.outputs"]], "logicaland (class in deepr.layers)": [[56, "deepr.layers.LogicalAnd"]], "__init__() (deepr.layers.logicaland method)": [[56, "deepr.layers.LogicalAnd.__init__"]], "lookup (class in deepr.layers)": [[57, "deepr.layers.Lookup"]], "__init__() (deepr.layers.lookup method)": [[57, "deepr.layers.Lookup.__init__"]], "table_initializer_fn (deepr.layers.lookup attribute)": [[57, "deepr.layers.Lookup.table_initializer_fn"]], "lookupfromfile (class in deepr.layers)": [[58, "deepr.layers.LookupFromFile"]], "__init__() (deepr.layers.lookupfromfile method)": [[58, "deepr.layers.LookupFromFile.__init__"]], "key_dtype (deepr.layers.lookupfromfile attribute)": [[58, "deepr.layers.LookupFromFile.key_dtype"]], "path (deepr.layers.lookupfromfile attribute)": [[58, "deepr.layers.LookupFromFile.path"]], "reuse (deepr.layers.lookupfromfile attribute)": [[58, "deepr.layers.LookupFromFile.reuse"]], "table_name (deepr.layers.lookupfromfile attribute)": [[58, "deepr.layers.LookupFromFile.table_name"]], "lookupfrommapping (class in deepr.layers)": [[59, "deepr.layers.LookupFromMapping"]], "__init__() (deepr.layers.lookupfrommapping method)": [[59, "deepr.layers.LookupFromMapping.__init__"]], "default_value (deepr.layers.lookupfrommapping attribute)": [[59, "deepr.layers.LookupFromMapping.default_value"]], "key_dtype (deepr.layers.lookupfrommapping attribute)": [[59, "deepr.layers.LookupFromMapping.key_dtype"]], "mapping (deepr.layers.lookupfrommapping attribute)": [[59, "deepr.layers.LookupFromMapping.mapping"]], "reuse (deepr.layers.lookupfrommapping attribute)": [[59, "deepr.layers.LookupFromMapping.reuse"]], "table_name (deepr.layers.lookupfrommapping attribute)": [[59, "deepr.layers.LookupFromMapping.table_name"]], "value_dtype (deepr.layers.lookupfrommapping attribute)": [[59, "deepr.layers.LookupFromMapping.value_dtype"]], "lookupindextostring (class in deepr.layers)": [[60, "deepr.layers.LookupIndexToString"]], "__init__() (deepr.layers.lookupindextostring method)": [[60, "deepr.layers.LookupIndexToString.__init__"]], "default_value (deepr.layers.lookupindextostring attribute)": [[60, "deepr.layers.LookupIndexToString.default_value"]], "path (deepr.layers.lookupindextostring attribute)": [[60, "deepr.layers.LookupIndexToString.path"]], "reuse (deepr.layers.lookupindextostring attribute)": [[60, "deepr.layers.LookupIndexToString.reuse"]], "table_name (deepr.layers.lookupindextostring attribute)": [[60, "deepr.layers.LookupIndexToString.table_name"]], "vocab_size (deepr.layers.lookupindextostring attribute)": [[60, "deepr.layers.LookupIndexToString.vocab_size"]], "maskedbpr (class in deepr.layers)": [[61, "deepr.layers.MaskedBPR"]], "__init__() (deepr.layers.maskedbpr method)": [[61, "deepr.layers.MaskedBPR.__init__"]], "notequal (class in deepr.layers)": [[62, "deepr.layers.NotEqual"]], "__init__() (deepr.layers.notequal method)": [[62, "deepr.layers.NotEqual.__init__"]], "parallel (class in deepr.layers)": [[63, "deepr.layers.Parallel"]], "__init__() (deepr.layers.parallel method)": [[63, "deepr.layers.Parallel.__init__"]], "product (class in deepr.layers)": [[64, "deepr.layers.Product"]], "__init__() (deepr.layers.product method)": [[64, "deepr.layers.Product.__init__"]], "rename (class in deepr.layers)": [[65, "deepr.layers.Rename"]], "__init__() (deepr.layers.rename method)": [[65, "deepr.layers.Rename.__init__"]], "select (class in deepr.layers)": [[66, "deepr.layers.Select"]], "__init__() (deepr.layers.select method)": [[66, "deepr.layers.Select.__init__"]], "sequential (in module deepr.layers)": [[67, "deepr.layers.Sequential"]], "slice (class in deepr.layers)": [[68, "deepr.layers.Slice"]], "__init__() (deepr.layers.slice method)": [[68, "deepr.layers.Slice.__init__"]], "slicefirst (class in deepr.layers)": [[69, "deepr.layers.SliceFirst"]], "__init__() (deepr.layers.slicefirst method)": [[69, "deepr.layers.SliceFirst.__init__"]], "slicelast (class in deepr.layers)": [[70, "deepr.layers.SliceLast"]], "__init__() (deepr.layers.slicelast method)": [[70, "deepr.layers.SliceLast.__init__"]], "stringjoin (class in deepr.layers)": [[71, "deepr.layers.StringJoin"]], "__init__() (deepr.layers.stringjoin method)": [[71, "deepr.layers.StringJoin.__init__"]], "sum (class in deepr.layers)": [[72, "deepr.layers.Sum"]], "__init__() (deepr.layers.sum method)": [[72, "deepr.layers.Sum.__init__"]], "todense (class in deepr.layers)": [[73, "deepr.layers.ToDense"]], "__init__() (deepr.layers.todense method)": [[73, "deepr.layers.ToDense.__init__"]], "tofloat (class in deepr.layers)": [[74, "deepr.layers.ToFloat"]], "__init__() (deepr.layers.tofloat method)": [[74, "deepr.layers.ToFloat.__init__"]], "weightedaverage (class in deepr.layers)": [[75, "deepr.layers.WeightedAverage"]], "__init__() (deepr.layers.weightedaverage method)": [[75, "deepr.layers.WeightedAverage.__init__"]], "mlflowinit (class in deepr.macros)": [[76, "deepr.macros.MLFlowInit"]], "__init__() (deepr.macros.mlflowinit method)": [[76, "deepr.macros.MLFlowInit.__init__"]], "decaymean (class in deepr.metrics)": [[77, "deepr.metrics.DecayMean"]], "__init__() (deepr.metrics.decaymean method)": [[77, "deepr.metrics.DecayMean.__init__"]], "finitemean (class in deepr.metrics)": [[78, "deepr.metrics.FiniteMean"]], "__init__() (deepr.metrics.finitemean method)": [[78, "deepr.metrics.FiniteMean.__init__"]], "lastvalue (class in deepr.metrics)": [[79, "deepr.metrics.LastValue"]], "__init__() (deepr.metrics.lastvalue method)": [[79, "deepr.metrics.LastValue.__init__"]], "maxvalue (class in deepr.metrics)": [[80, "deepr.metrics.MaxValue"]], "__init__() (deepr.metrics.maxvalue method)": [[80, "deepr.metrics.MaxValue.__init__"]], "mean (class in deepr.metrics)": [[81, "deepr.metrics.Mean"]], "__init__() (deepr.metrics.mean method)": [[81, "deepr.metrics.Mean.__init__"]], "metric (class in deepr.metrics)": [[82, "deepr.metrics.Metric"]], "__init__() (deepr.metrics.metric method)": [[82, "deepr.metrics.Metric.__init__"]], "stepcounter (class in deepr.metrics)": [[83, "deepr.metrics.StepCounter"]], "__init__() (deepr.metrics.stepcounter method)": [[83, "deepr.metrics.StepCounter.__init__"]], "variablevalue (class in deepr.metrics)": [[84, "deepr.metrics.VariableValue"]], "__init__() (deepr.metrics.variablevalue method)": [[84, "deepr.metrics.VariableValue.__init__"]], "name (deepr.metrics.variablevalue attribute)": [[84, "deepr.metrics.VariableValue.name"]], "optimizer (class in deepr.optimizers)": [[85, "deepr.optimizers.Optimizer"]], "__init__() (deepr.optimizers.optimizer method)": [[85, "deepr.optimizers.Optimizer.__init__"]], "tensorflowoptimizer (class in deepr.optimizers)": [[86, "deepr.optimizers.TensorflowOptimizer"]], "__init__() (deepr.optimizers.tensorflowoptimizer method)": [[86, "deepr.optimizers.TensorflowOptimizer.__init__"]], "kwargs (deepr.optimizers.tensorflowoptimizer attribute)": [[86, "deepr.optimizers.TensorflowOptimizer.kwargs"]], "learning_rate (deepr.optimizers.tensorflowoptimizer attribute)": [[86, "deepr.optimizers.TensorflowOptimizer.learning_rate"]], "optimizer (deepr.optimizers.tensorflowoptimizer attribute)": [[86, "deepr.optimizers.TensorflowOptimizer.optimizer"]], "batch (class in deepr.prepros)": [[87, "deepr.prepros.Batch"]], "__init__() (deepr.prepros.batch method)": [[87, "deepr.prepros.Batch.__init__"]], "count (deepr.prepros.batch attribute)": [[87, "deepr.prepros.Batch.count"]], "modes (deepr.prepros.batch attribute)": [[87, "deepr.prepros.Batch.modes"]], "filter (class in deepr.prepros)": [[88, "deepr.prepros.Filter"]], "__init__() (deepr.prepros.filter method)": [[88, "deepr.prepros.Filter.__init__"]], "modes (deepr.prepros.filter attribute)": [[88, "deepr.prepros.Filter.modes"]], "on_dict (deepr.prepros.filter attribute)": [[88, "deepr.prepros.Filter.on_dict"]], "predicate (deepr.prepros.filter attribute)": [[88, "deepr.prepros.Filter.predicate"]], "fromexample (class in deepr.prepros)": [[89, "deepr.prepros.FromExample"]], "__init__() (deepr.prepros.fromexample method)": [[89, "deepr.prepros.FromExample.__init__"]], "map (class in deepr.prepros)": [[90, "deepr.prepros.Map"]], "__init__() (deepr.prepros.map method)": [[90, "deepr.prepros.Map.__init__"]], "map_func (deepr.prepros.map attribute)": [[90, "deepr.prepros.Map.map_func"]], "modes (deepr.prepros.map attribute)": [[90, "deepr.prepros.Map.modes"]], "num_parallel_calls (deepr.prepros.map attribute)": [[90, "deepr.prepros.Map.num_parallel_calls"]], "on_dict (deepr.prepros.map attribute)": [[90, "deepr.prepros.Map.on_dict"]], "update (deepr.prepros.map attribute)": [[90, "deepr.prepros.Map.update"]], "paddedbatch (class in deepr.prepros)": [[91, "deepr.prepros.PaddedBatch"]], "__init__() (deepr.prepros.paddedbatch method)": [[91, "deepr.prepros.PaddedBatch.__init__"]], "batch_size (deepr.prepros.paddedbatch attribute)": [[91, "deepr.prepros.PaddedBatch.batch_size"]], "fields (deepr.prepros.paddedbatch attribute)": [[91, "deepr.prepros.PaddedBatch.fields"]], "modes (deepr.prepros.paddedbatch attribute)": [[91, "deepr.prepros.PaddedBatch.modes"]], "prefetch (class in deepr.prepros)": [[92, "deepr.prepros.Prefetch"]], "__init__() (deepr.prepros.prefetch method)": [[92, "deepr.prepros.Prefetch.__init__"]], "buffer_size (deepr.prepros.prefetch attribute)": [[92, "deepr.prepros.Prefetch.buffer_size"]], "prepro (class in deepr.prepros)": [[93, "deepr.prepros.Prepro"]], "__init__() (deepr.prepros.prepro method)": [[93, "deepr.prepros.Prepro.__init__"]], "repeat (class in deepr.prepros)": [[94, "deepr.prepros.Repeat"]], "__init__() (deepr.prepros.repeat method)": [[94, "deepr.prepros.Repeat.__init__"]], "count (deepr.prepros.repeat attribute)": [[94, "deepr.prepros.Repeat.count"]], "modes (deepr.prepros.repeat attribute)": [[94, "deepr.prepros.Repeat.modes"]], "serial (class in deepr.prepros)": [[95, "deepr.prepros.Serial"]], "__init__() (deepr.prepros.serial method)": [[95, "deepr.prepros.Serial.__init__"]], "fuse (deepr.prepros.serial attribute)": [[95, "deepr.prepros.Serial.fuse"]], "preprocessors (deepr.prepros.serial attribute)": [[95, "deepr.prepros.Serial.preprocessors"]], "shuffle (class in deepr.prepros)": [[96, "deepr.prepros.Shuffle"]], "__init__() (deepr.prepros.shuffle method)": [[96, "deepr.prepros.Shuffle.__init__"]], "buffer_size (deepr.prepros.shuffle attribute)": [[96, "deepr.prepros.Shuffle.buffer_size"]], "modes (deepr.prepros.shuffle attribute)": [[96, "deepr.prepros.Shuffle.modes"]], "tfrecordsequenceexample (in module deepr.prepros)": [[97, "deepr.prepros.TFRecordSequenceExample"]], "tableinitializer (class in deepr.prepros)": [[98, "deepr.prepros.TableInitializer"]], "__init__() (deepr.prepros.tableinitializer method)": [[98, "deepr.prepros.TableInitializer.__init__"]], "take (class in deepr.prepros)": [[99, "deepr.prepros.Take"]], "__init__() (deepr.prepros.take method)": [[99, "deepr.prepros.Take.__init__"]], "count (deepr.prepros.take attribute)": [[99, "deepr.prepros.Take.count"]], "toexample (class in deepr.prepros)": [[100, "deepr.prepros.ToExample"]], "__init__() (deepr.prepros.toexample method)": [[100, "deepr.prepros.ToExample.__init__"]], "generatorreader (class in deepr.readers)": [[101, "deepr.readers.GeneratorReader"]], "__init__() (deepr.readers.generatorreader method)": [[101, "deepr.readers.GeneratorReader.__init__"]], "generator_fn (deepr.readers.generatorreader attribute)": [[101, "deepr.readers.GeneratorReader.generator_fn"]], "output_shapes (deepr.readers.generatorreader attribute)": [[101, "deepr.readers.GeneratorReader.output_shapes"]], "output_types (deepr.readers.generatorreader attribute)": [[101, "deepr.readers.GeneratorReader.output_types"]], "reader (class in deepr.readers)": [[102, "deepr.readers.Reader"]], "__init__() (deepr.readers.reader method)": [[102, "deepr.readers.Reader.__init__"]], "tfrecordreader (class in deepr.readers)": [[103, "deepr.readers.TFRecordReader"]], "__init__() (deepr.readers.tfrecordreader method)": [[103, "deepr.readers.TFRecordReader.__init__"]], "num_parallel_calls (deepr.readers.tfrecordreader attribute)": [[103, "deepr.readers.TFRecordReader.num_parallel_calls"]], "num_parallel_reads (deepr.readers.tfrecordreader attribute)": [[103, "deepr.readers.TFRecordReader.num_parallel_reads"]], "path (deepr.readers.tfrecordreader attribute)": [[103, "deepr.readers.TFRecordReader.path"]], "shuffle (deepr.readers.tfrecordreader attribute)": [[103, "deepr.readers.TFRecordReader.shuffle"]], "field (class in deepr.utils)": [[104, "deepr.utils.Field"]], "__init__() (deepr.utils.field method)": [[104, "deepr.utils.Field.__init__"]], "default (deepr.utils.field attribute)": [[104, "deepr.utils.Field.default"]], "dtype (deepr.utils.field attribute)": [[104, "deepr.utils.Field.dtype"]], "name (deepr.utils.field attribute)": [[104, "deepr.utils.Field.name"]], "sequence (deepr.utils.field attribute)": [[104, "deepr.utils.Field.sequence"]], "shape (deepr.utils.field attribute)": [[104, "deepr.utils.Field.shape"]], "tablecontext (class in deepr.utils)": [[105, "deepr.utils.TableContext"]], "__init__() (deepr.utils.tablecontext method)": [[105, "deepr.utils.TableContext.__init__"]], "tensortype() (in module deepr.utils)": [[106, "deepr.utils.TensorType"]], "chunks() (in module deepr.utils)": [[107, "deepr.utils.chunks"]], "dict_to_item() (in module deepr.utils)": [[108, "deepr.utils.dict_to_item"]], "get_feedable_tensors() (in module deepr.utils)": [[109, "deepr.utils.get_feedable_tensors"]], "get_fetchable_tensors() (in module deepr.utils)": [[110, "deepr.utils.get_fetchable_tensors"]], "handle_exceptions() (in module deepr.utils)": [[111, "deepr.utils.handle_exceptions"]], "import_graph_def() (in module deepr.utils)": [[112, "deepr.utils.import_graph_def"]], "index_to_string_table_from_file() (in module deepr.utils)": [[113, "deepr.utils.index_to_string_table_from_file"]], "item_to_dict() (in module deepr.utils)": [[114, "deepr.utils.item_to_dict"]], "make_same_shape() (in module deepr.utils)": [[115, "deepr.utils.make_same_shape"]], "msb_lsb_to_str() (in module deepr.utils)": [[116, "deepr.utils.msb_lsb_to_str"]], "progress() (in module deepr.utils)": [[117, "deepr.utils.progress"]], "save_variables_in_ckpt() (in module deepr.utils)": [[118, "deepr.utils.save_variables_in_ckpt"]], "str_to_msb_lsb() (in module deepr.utils)": [[119, "deepr.utils.str_to_msb_lsb"]], "table_from_file() (in module deepr.utils)": [[120, "deepr.utils.table_from_file"]], "table_from_mapping() (in module deepr.utils)": [[121, "deepr.utils.table_from_mapping"]], "to_flat_tuple() (in module deepr.utils)": [[122, "deepr.utils.to_flat_tuple"]], "read() (in module deepr.vocab)": [[123, "deepr.vocab.read"]], "size() (in module deepr.vocab)": [[124, "deepr.vocab.size"]], "write() (in module deepr.vocab)": [[125, "deepr.vocab.write"]], "tfrecordwriter (class in deepr.writers)": [[126, "deepr.writers.TFRecordWriter"]], "__init__() (deepr.writers.tfrecordwriter method)": [[126, "deepr.writers.TFRecordWriter.__init__"]], "writer (class in deepr.writers)": [[127, "deepr.writers.Writer"]], "__init__() (deepr.writers.writer method)": [[127, "deepr.writers.Writer.__init__"]], "deepr": [[132, "module-deepr"]], "deepr.version": [[132, "module-deepr.version"]], "module": [[132, "module-deepr"], [132, "module-deepr.version"], [133, "module-deepr.cli"], [133, "module-deepr.cli.main"], [134, "module-deepr.config"], [134, "module-deepr.config.base"], [134, "module-deepr.config.experimental"], [134, "module-deepr.config.macros"], [134, "module-deepr.config.references"], [135, "module-deepr.examples"], [136, "module-deepr.examples.movielens"], [137, "module-deepr.examples.movielens.jobs"], [137, "module-deepr.examples.movielens.jobs.build_records"], [137, "module-deepr.examples.movielens.jobs.evaluate"], [137, "module-deepr.examples.movielens.jobs.init"], [137, "module-deepr.examples.movielens.jobs.predict"], [137, "module-deepr.examples.movielens.jobs.svd"], [138, "module-deepr.examples.movielens.layers"], [138, "module-deepr.examples.movielens.layers.average"], [138, "module-deepr.examples.movielens.layers.bpr"], [138, "module-deepr.examples.movielens.layers.losses"], [138, "module-deepr.examples.movielens.layers.multi"], [138, "module-deepr.examples.movielens.layers.ns"], [138, "module-deepr.examples.movielens.layers.transformer"], [138, "module-deepr.examples.movielens.layers.vae"], [139, "module-deepr.examples.movielens.macros"], [139, "module-deepr.examples.movielens.macros.paths"], [140, "module-deepr.examples.movielens.metrics"], [140, "module-deepr.examples.movielens.metrics.ndcg"], [140, "module-deepr.examples.movielens.metrics.recall"], [141, "module-deepr.examples.movielens.prepros"], [141, "module-deepr.examples.movielens.prepros.csv"], [141, "module-deepr.examples.movielens.prepros.record"], [142, "module-deepr.examples.movielens.readers"], [142, "module-deepr.examples.movielens.readers.csv"], [143, "module-deepr.examples.movielens.utils"], [143, "module-deepr.examples.movielens.utils.fields"], [144, "module-deepr.examples.multiply"], [145, "module-deepr.examples.multiply.jobs"], [145, "module-deepr.examples.multiply.jobs.build"], [145, "module-deepr.examples.multiply.jobs.predict"], [146, "module-deepr.examples.multiply.layers"], [146, "module-deepr.examples.multiply.layers.loss"], [146, "module-deepr.examples.multiply.layers.model"], [147, "module-deepr.examples.multiply.macros"], [147, "module-deepr.examples.multiply.macros.paths"], [148, "module-deepr.examples.multiply.prepros"], [148, "module-deepr.examples.multiply.prepros.default"], [148, "module-deepr.examples.multiply.prepros.inference"], [149, "module-deepr.exporters"], [149, "module-deepr.exporters.base"], [149, "module-deepr.exporters.best_checkpoint"], [149, "module-deepr.exporters.save_variables"], [149, "module-deepr.exporters.saved_model"], [150, "module-deepr.hooks"], [150, "module-deepr.hooks.base"], [150, "module-deepr.hooks.early_stopping"], [150, "module-deepr.hooks.log_variables_init"], [150, "module-deepr.hooks.logging_tensor"], [150, "module-deepr.hooks.num_params"], [150, "module-deepr.hooks.steps_per_sec"], [150, "module-deepr.hooks.summary"], [151, "module-deepr.initializers"], [151, "module-deepr.initializers.checkpoint_initializer"], [152, "module-deepr.io"], [152, "module-deepr.io.hdfs"], [152, "module-deepr.io.json"], [152, "module-deepr.io.parquet"], [152, "module-deepr.io.path"], [153, "module-deepr.jobs"], [153, "module-deepr.jobs.base"], [153, "module-deepr.jobs.cleanup_checkpoints"], [153, "module-deepr.jobs.combinators"], [153, "module-deepr.jobs.copy_dir"], [153, "module-deepr.jobs.evaluate"], [153, "module-deepr.jobs.export_xla_model_metadata"], [153, "module-deepr.jobs.log_metric"], [153, "module-deepr.jobs.mlflow_save_configs"], [153, "module-deepr.jobs.mlflow_save_info"], [153, "module-deepr.jobs.optimize_saved_model"], [153, "module-deepr.jobs.params_tuner"], [153, "module-deepr.jobs.save_dataset"], [153, "module-deepr.jobs.trainer"], [153, "module-deepr.jobs.trainer_base"], [153, "module-deepr.jobs.trainer_keras"], [153, "module-deepr.jobs.yarn_config"], [153, "module-deepr.jobs.yarn_launcher"], [153, "module-deepr.jobs.yarn_trainer"], [154, "module-deepr.layers"], [154, "module-deepr.layers.base"], [154, "module-deepr.layers.bpr"], [154, "module-deepr.layers.bpr_max"], [154, "module-deepr.layers.click_rank"], [154, "module-deepr.layers.combinators"], [154, "module-deepr.layers.core"], [154, "module-deepr.layers.dropout"], [154, "module-deepr.layers.embedding"], [154, "module-deepr.layers.lookup"], [154, "module-deepr.layers.lstm"], [154, "module-deepr.layers.mask"], [154, "module-deepr.layers.multi"], [154, "module-deepr.layers.multi_css"], [154, "module-deepr.layers.nce_loss"], [154, "module-deepr.layers.reduce"], [154, "module-deepr.layers.size"], [154, "module-deepr.layers.slice"], [154, "module-deepr.layers.sparse"], [154, "module-deepr.layers.string"], [154, "module-deepr.layers.top_one"], [154, "module-deepr.layers.top_one_max"], [154, "module-deepr.layers.transformer"], [154, "module-deepr.layers.triplet_precision"], [155, "module-deepr.macros"], [155, "module-deepr.macros.dynamic"], [155, "module-deepr.macros.graphite_init"], [155, "module-deepr.macros.mlflow_init"], [156, "module-deepr.metrics"], [156, "module-deepr.metrics.accuracy"], [156, "module-deepr.metrics.base"], [156, "module-deepr.metrics.core"], [156, "module-deepr.metrics.mean"], [156, "module-deepr.metrics.step"], [156, "module-deepr.metrics.variable"], [157, "module-deepr.optimizers"], [157, "module-deepr.optimizers.base"], [157, "module-deepr.optimizers.core"], [158, "module-deepr.predictors"], [158, "module-deepr.predictors.base"], [158, "module-deepr.predictors.proto"], [158, "module-deepr.predictors.saved_model"], [159, "module-deepr.prepros"], [159, "module-deepr.prepros.base"], [159, "module-deepr.prepros.combinators"], [159, "module-deepr.prepros.core"], [159, "module-deepr.prepros.lookup"], [159, "module-deepr.prepros.record"], [160, "module-deepr.readers"], [160, "module-deepr.readers.base"], [160, "module-deepr.readers.generator"], [160, "module-deepr.readers.record"], [161, "module-deepr.utils"], [161, "module-deepr.utils.broadcasting"], [161, "module-deepr.utils.checkpoint"], [161, "module-deepr.utils.datastruct"], [161, "module-deepr.utils.exceptions"], [161, "module-deepr.utils.field"], [161, "module-deepr.utils.graph"], [161, "module-deepr.utils.graphite"], [161, "module-deepr.utils.iter"], [161, "module-deepr.utils.mlflow"], [161, "module-deepr.utils.tables"], [161, "module-deepr.utils.tf2xla_pb2"], [161, "module-deepr.utils.uuid"], [162, "module-deepr.vocab"], [162, "module-deepr.vocab.base"], [163, "module-deepr.writers"], [163, "module-deepr.writers.base"], [163, "module-deepr.writers.record"]], "add_macro() (in module deepr.cli.main)": [[133, "deepr.cli.main.add_macro"]], "deepr.cli": [[133, "module-deepr.cli"]], "deepr.cli.main": [[133, "module-deepr.cli.main"]], "download_config_and_macros_from_mlflow() (in module deepr.cli.main)": [[133, "deepr.cli.main.download_config_and_macros_from_mlflow"]], "from_config_and_macros() (in module deepr.cli.main)": [[133, "deepr.cli.main.from_config_and_macros"]], "main() (in module deepr.cli.main)": [[133, "deepr.cli.main.main"]], "run() (in module deepr.cli.main)": [[133, "deepr.cli.main.run"]], "add_macro_params() (in module deepr.config.experimental)": [[134, "deepr.config.experimental.add_macro_params"]], "assert_no_macros() (in module deepr.config.macros)": [[134, "deepr.config.macros.assert_no_macros"]], "deepr.config": [[134, "module-deepr.config"]], "deepr.config.base": [[134, "module-deepr.config.base"]], "deepr.config.experimental": [[134, "module-deepr.config.experimental"]], "deepr.config.macros": [[134, "module-deepr.config.macros"]], "deepr.config.references": [[134, "module-deepr.config.references"]], "default_references() (in module deepr.config.references)": [[134, "deepr.config.references.default_references"]], "fill_macros() (in module deepr.config.macros)": [[134, "deepr.config.macros.fill_macros"]], "fill_references() (in module deepr.config.references)": [[134, "deepr.config.references.fill_references"]], "find_macro_params() (in module deepr.config.macros)": [[134, "deepr.config.macros.find_macro_params"]], "find_values() (in module deepr.config.experimental)": [[134, "deepr.config.experimental.find_values"]], "from_config() (in module deepr.config.base)": [[134, "deepr.config.base.from_config"]], "get_macro_and_param() (in module deepr.config.macros)": [[134, "deepr.config.macros.get_macro_and_param"]], "ismacro() (in module deepr.config.macros)": [[134, "deepr.config.macros.ismacro"]], "isreference() (in module deepr.config.references)": [[134, "deepr.config.references.isreference"]], "macros_eval_order() (in module deepr.config.macros)": [[134, "deepr.config.macros.macros_eval_order"]], "parse_config() (in module deepr.config.base)": [[134, "deepr.config.base.parse_config"]], "replace_values() (in module deepr.config.experimental)": [[134, "deepr.config.experimental.replace_values"]], "to_config() (in module deepr.config.experimental)": [[134, "deepr.config.experimental.to_config"]], "deepr.examples": [[135, "module-deepr.examples"]], "deepr.examples.movielens": [[136, "module-deepr.examples.movielens"]], "buildrecords (class in deepr.examples.movielens.jobs.build_records)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords"]], "evaluate (class in deepr.examples.movielens.jobs.evaluate)": [[137, "deepr.examples.movielens.jobs.evaluate.Evaluate"]], "initcheckpoint (class in deepr.examples.movielens.jobs.init)": [[137, "deepr.examples.movielens.jobs.init.InitCheckpoint"]], "predict (class in deepr.examples.movielens.jobs.predict)": [[137, "deepr.examples.movielens.jobs.predict.Predict"]], "svd (class in deepr.examples.movielens.jobs.svd)": [[137, "deepr.examples.movielens.jobs.svd.SVD"]], "compute_coocurrence() (in module deepr.examples.movielens.jobs.svd)": [[137, "deepr.examples.movielens.jobs.svd.compute_coocurrence"]], "compute_metrics() (in module deepr.examples.movielens.jobs.evaluate)": [[137, "deepr.examples.movielens.jobs.evaluate.compute_metrics"]], "compute_pmi() (in module deepr.examples.movielens.jobs.svd)": [[137, "deepr.examples.movielens.jobs.svd.compute_pmi"]], "deepr.examples.movielens.jobs": [[137, "module-deepr.examples.movielens.jobs"]], "deepr.examples.movielens.jobs.build_records": [[137, "module-deepr.examples.movielens.jobs.build_records"]], "deepr.examples.movielens.jobs.evaluate": [[137, "module-deepr.examples.movielens.jobs.evaluate"]], "deepr.examples.movielens.jobs.init": [[137, "module-deepr.examples.movielens.jobs.init"]], "deepr.examples.movielens.jobs.predict": [[137, "module-deepr.examples.movielens.jobs.predict"]], "deepr.examples.movielens.jobs.svd": [[137, "module-deepr.examples.movielens.jobs.svd"]], "dim (deepr.examples.movielens.jobs.svd.svd attribute)": [[137, "deepr.examples.movielens.jobs.svd.SVD.dim"]], "get_timelines() (in module deepr.examples.movielens.jobs.build_records)": [[137, "deepr.examples.movielens.jobs.build_records.get_timelines"]], "input_fn (deepr.examples.movielens.jobs.predict.predict attribute)": [[137, "deepr.examples.movielens.jobs.predict.Predict.input_fn"]], "k (deepr.examples.movielens.jobs.evaluate.evaluate attribute)": [[137, "deepr.examples.movielens.jobs.evaluate.Evaluate.k"]], "min_count (deepr.examples.movielens.jobs.svd.svd attribute)": [[137, "deepr.examples.movielens.jobs.svd.SVD.min_count"]], "min_length (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.min_length"]], "min_rating (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.min_rating"]], "ndcg_score() (in module deepr.examples.movielens.jobs.evaluate)": [[137, "deepr.examples.movielens.jobs.evaluate.ndcg_score"]], "normalize (deepr.examples.movielens.jobs.init.initcheckpoint attribute)": [[137, "deepr.examples.movielens.jobs.init.InitCheckpoint.normalize"]], "normalize_counts (deepr.examples.movielens.jobs.init.initcheckpoint attribute)": [[137, "deepr.examples.movielens.jobs.init.InitCheckpoint.normalize_counts"]], "num_negatives (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.num_negatives"]], "num_queries (deepr.examples.movielens.jobs.evaluate.evaluate attribute)": [[137, "deepr.examples.movielens.jobs.evaluate.Evaluate.num_queries"]], "path_biases (deepr.examples.movielens.jobs.evaluate.evaluate attribute)": [[137, "deepr.examples.movielens.jobs.evaluate.Evaluate.path_biases"]], "path_counts (deepr.examples.movielens.jobs.init.initcheckpoint attribute)": [[137, "deepr.examples.movielens.jobs.init.InitCheckpoint.path_counts"]], "path_counts (deepr.examples.movielens.jobs.svd.svd attribute)": [[137, "deepr.examples.movielens.jobs.svd.SVD.path_counts"]], "path_csv (deepr.examples.movielens.jobs.svd.svd attribute)": [[137, "deepr.examples.movielens.jobs.svd.SVD.path_csv"]], "path_embeddings (deepr.examples.movielens.jobs.evaluate.evaluate attribute)": [[137, "deepr.examples.movielens.jobs.evaluate.Evaluate.path_embeddings"]], "path_embeddings (deepr.examples.movielens.jobs.init.initcheckpoint attribute)": [[137, "deepr.examples.movielens.jobs.init.InitCheckpoint.path_embeddings"]], "path_embeddings (deepr.examples.movielens.jobs.svd.svd attribute)": [[137, "deepr.examples.movielens.jobs.svd.SVD.path_embeddings"]], "path_eval (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.path_eval"]], "path_init_ckpt (deepr.examples.movielens.jobs.init.initcheckpoint attribute)": [[137, "deepr.examples.movielens.jobs.init.InitCheckpoint.path_init_ckpt"]], "path_mapping (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.path_mapping"]], "path_predictions (deepr.examples.movielens.jobs.evaluate.evaluate attribute)": [[137, "deepr.examples.movielens.jobs.evaluate.Evaluate.path_predictions"]], "path_predictions (deepr.examples.movielens.jobs.predict.predict attribute)": [[137, "deepr.examples.movielens.jobs.predict.Predict.path_predictions"]], "path_ratings (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.path_ratings"]], "path_saved_model (deepr.examples.movielens.jobs.predict.predict attribute)": [[137, "deepr.examples.movielens.jobs.predict.Predict.path_saved_model"]], "path_test (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.path_test"]], "path_train (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.path_train"]], "precision_recall_f1() (in module deepr.examples.movielens.jobs.evaluate)": [[137, "deepr.examples.movielens.jobs.evaluate.precision_recall_f1"]], "prepro_fn (deepr.examples.movielens.jobs.predict.predict attribute)": [[137, "deepr.examples.movielens.jobs.predict.Predict.prepro_fn"]], "records_generator() (in module deepr.examples.movielens.jobs.build_records)": [[137, "deepr.examples.movielens.jobs.build_records.records_generator"]], "run() (deepr.examples.movielens.jobs.build_records.buildrecords method)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.run"]], "run() (deepr.examples.movielens.jobs.evaluate.evaluate method)": [[137, "deepr.examples.movielens.jobs.evaluate.Evaluate.run"]], "run() (deepr.examples.movielens.jobs.init.initcheckpoint method)": [[137, "deepr.examples.movielens.jobs.init.InitCheckpoint.run"]], "run() (deepr.examples.movielens.jobs.predict.predict method)": [[137, "deepr.examples.movielens.jobs.predict.Predict.run"]], "run() (deepr.examples.movielens.jobs.svd.svd method)": [[137, "deepr.examples.movielens.jobs.svd.SVD.run"]], "seed (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.seed"]], "shuffle_timelines (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.shuffle_timelines"]], "size_eval (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.size_eval"]], "size_test (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.size_test"]], "target_ratio (deepr.examples.movielens.jobs.build_records.buildrecords attribute)": [[137, "deepr.examples.movielens.jobs.build_records.BuildRecords.target_ratio"]], "use_log_counts (deepr.examples.movielens.jobs.init.initcheckpoint attribute)": [[137, "deepr.examples.movielens.jobs.init.InitCheckpoint.use_log_counts"]], "use_mlflow (deepr.examples.movielens.jobs.evaluate.evaluate attribute)": [[137, "deepr.examples.movielens.jobs.evaluate.Evaluate.use_mlflow"]], "vocab_size (deepr.examples.movielens.jobs.svd.svd attribute)": [[137, "deepr.examples.movielens.jobs.svd.SVD.vocab_size"]], "write_records() (in module deepr.examples.movielens.jobs.build_records)": [[137, "deepr.examples.movielens.jobs.build_records.write_records"]], "addbias (class in deepr.examples.movielens.layers.average)": [[138, "deepr.examples.movielens.layers.average.AddBias"]], "addbias (class in deepr.examples.movielens.layers.vae)": [[138, "deepr.examples.movielens.layers.vae.AddBias"]], "averagemodel() (in module deepr.examples.movielens.layers.average)": [[138, "deepr.examples.movielens.layers.average.AverageModel"]], "bprloss() (in module deepr.examples.movielens.layers.bpr)": [[138, "deepr.examples.movielens.layers.bpr.BPRLoss"]], "decode (class in deepr.examples.movielens.layers.vae)": [[138, "deepr.examples.movielens.layers.vae.Decode"]], "encode (class in deepr.examples.movielens.layers.vae)": [[138, "deepr.examples.movielens.layers.vae.Encode"]], "gaussiannoise (class in deepr.examples.movielens.layers.vae)": [[138, "deepr.examples.movielens.layers.vae.GaussianNoise"]], "l2loss (class in deepr.examples.movielens.layers.losses)": [[138, "deepr.examples.movielens.layers.losses.L2Loss"]], "logits (class in deepr.examples.movielens.layers.average)": [[138, "deepr.examples.movielens.layers.average.Logits"]], "logits (class in deepr.examples.movielens.layers.transformer)": [[138, "deepr.examples.movielens.layers.transformer.Logits"]], "logits (class in deepr.examples.movielens.layers.vae)": [[138, "deepr.examples.movielens.layers.vae.Logits"]], "loss() (in module deepr.examples.movielens.layers.losses)": [[138, "deepr.examples.movielens.layers.losses.Loss"]], "multiloglikelihoodcss() (in module deepr.examples.movielens.layers.multi)": [[138, "deepr.examples.movielens.layers.multi.MultiLogLikelihoodCSS"]], "negativesampling() (in module deepr.examples.movielens.layers.ns)": [[138, "deepr.examples.movielens.layers.ns.NegativeSampling"]], "projection (class in deepr.examples.movielens.layers.average)": [[138, "deepr.examples.movielens.layers.average.Projection"]], "projection (class in deepr.examples.movielens.layers.vae)": [[138, "deepr.examples.movielens.layers.vae.Projection"]], "transformermodel() (in module deepr.examples.movielens.layers.transformer)": [[138, "deepr.examples.movielens.layers.transformer.TransformerModel"]], "userembedding (class in deepr.examples.movielens.layers.average)": [[138, "deepr.examples.movielens.layers.average.UserEmbedding"]], "vaeloss() (in module deepr.examples.movielens.layers.losses)": [[138, "deepr.examples.movielens.layers.losses.VAELoss"]], "vaemodel() (in module deepr.examples.movielens.layers.vae)": [[138, "deepr.examples.movielens.layers.vae.VAEModel"]], "weightedsum (class in deepr.examples.movielens.layers.vae)": [[138, "deepr.examples.movielens.layers.vae.WeightedSum"]], "deepr.examples.movielens.layers": [[138, "module-deepr.examples.movielens.layers"]], "deepr.examples.movielens.layers.average": [[138, "module-deepr.examples.movielens.layers.average"]], "deepr.examples.movielens.layers.bpr": [[138, "module-deepr.examples.movielens.layers.bpr"]], "deepr.examples.movielens.layers.losses": [[138, "module-deepr.examples.movielens.layers.losses"]], "deepr.examples.movielens.layers.multi": [[138, "module-deepr.examples.movielens.layers.multi"]], "deepr.examples.movielens.layers.ns": [[138, "module-deepr.examples.movielens.layers.ns"]], "deepr.examples.movielens.layers.transformer": [[138, "module-deepr.examples.movielens.layers.transformer"]], "deepr.examples.movielens.layers.vae": [[138, "module-deepr.examples.movielens.layers.vae"]], "forward() (deepr.examples.movielens.layers.average.addbias method)": [[138, "deepr.examples.movielens.layers.average.AddBias.forward"]], "forward() (deepr.examples.movielens.layers.average.logits method)": [[138, "deepr.examples.movielens.layers.average.Logits.forward"]], "forward() (deepr.examples.movielens.layers.average.projection method)": [[138, "deepr.examples.movielens.layers.average.Projection.forward"]], "forward() (deepr.examples.movielens.layers.average.userembedding method)": [[138, "deepr.examples.movielens.layers.average.UserEmbedding.forward"]], "forward() (deepr.examples.movielens.layers.losses.l2loss method)": [[138, "deepr.examples.movielens.layers.losses.L2Loss.forward"]], "forward() (deepr.examples.movielens.layers.transformer.logits method)": [[138, "deepr.examples.movielens.layers.transformer.Logits.forward"]], "forward() (deepr.examples.movielens.layers.vae.addbias method)": [[138, "deepr.examples.movielens.layers.vae.AddBias.forward"]], "forward() (deepr.examples.movielens.layers.vae.decode method)": [[138, "deepr.examples.movielens.layers.vae.Decode.forward"]], "forward() (deepr.examples.movielens.layers.vae.encode method)": [[138, "deepr.examples.movielens.layers.vae.Encode.forward"]], "forward() (deepr.examples.movielens.layers.vae.gaussiannoise method)": [[138, "deepr.examples.movielens.layers.vae.GaussianNoise.forward"]], "forward() (deepr.examples.movielens.layers.vae.logits method)": [[138, "deepr.examples.movielens.layers.vae.Logits.forward"]], "forward() (deepr.examples.movielens.layers.vae.projection method)": [[138, "deepr.examples.movielens.layers.vae.Projection.forward"]], "forward() (deepr.examples.movielens.layers.vae.weightedsum method)": [[138, "deepr.examples.movielens.layers.vae.WeightedSum.forward"]], "paths (class in deepr.examples.movielens.macros.paths)": [[139, "deepr.examples.movielens.macros.paths.Paths"]], "deepr.examples.movielens.macros": [[139, "module-deepr.examples.movielens.macros"]], "deepr.examples.movielens.macros.paths": [[139, "module-deepr.examples.movielens.macros.paths"]], "ndcgatk (class in deepr.examples.movielens.metrics.ndcg)": [[140, "deepr.examples.movielens.metrics.ndcg.NDCGAtK"]], "recallatk (class in deepr.examples.movielens.metrics.recall)": [[140, "deepr.examples.movielens.metrics.recall.RecallAtK"]], "deepr.examples.movielens.metrics": [[140, "module-deepr.examples.movielens.metrics"]], "deepr.examples.movielens.metrics.ndcg": [[140, "module-deepr.examples.movielens.metrics.ndcg"]], "deepr.examples.movielens.metrics.recall": [[140, "module-deepr.examples.movielens.metrics.recall"]], "inputs (deepr.examples.movielens.metrics.ndcg.ndcgatk attribute)": [[140, "deepr.examples.movielens.metrics.ndcg.NDCGAtK.inputs"]], "inputs (deepr.examples.movielens.metrics.recall.recallatk attribute)": [[140, "deepr.examples.movielens.metrics.recall.RecallAtK.inputs"]], "k (deepr.examples.movielens.metrics.ndcg.ndcgatk attribute)": [[140, "deepr.examples.movielens.metrics.ndcg.NDCGAtK.k"]], "k (deepr.examples.movielens.metrics.recall.recallatk attribute)": [[140, "deepr.examples.movielens.metrics.recall.RecallAtK.k"]], "logits (deepr.examples.movielens.metrics.ndcg.ndcgatk attribute)": [[140, "deepr.examples.movielens.metrics.ndcg.NDCGAtK.logits"]], "logits (deepr.examples.movielens.metrics.recall.recallatk attribute)": [[140, "deepr.examples.movielens.metrics.recall.RecallAtK.logits"]], "name (deepr.examples.movielens.metrics.ndcg.ndcgatk attribute)": [[140, "deepr.examples.movielens.metrics.ndcg.NDCGAtK.name"]], "name (deepr.examples.movielens.metrics.recall.recallatk attribute)": [[140, "deepr.examples.movielens.metrics.recall.RecallAtK.name"]], "targets (deepr.examples.movielens.metrics.ndcg.ndcgatk attribute)": [[140, "deepr.examples.movielens.metrics.ndcg.NDCGAtK.targets"]], "targets (deepr.examples.movielens.metrics.recall.recallatk attribute)": [[140, "deepr.examples.movielens.metrics.recall.RecallAtK.targets"]], "csvprepro() (in module deepr.examples.movielens.prepros.csv)": [[141, "deepr.examples.movielens.prepros.csv.CSVPrepro"]], "randomnegatives (class in deepr.examples.movielens.prepros.csv)": [[141, "deepr.examples.movielens.prepros.csv.RandomNegatives"]], "recordprepro() (in module deepr.examples.movielens.prepros.record)": [[141, "deepr.examples.movielens.prepros.record.RecordPrepro"]], "sequencemask (class in deepr.examples.movielens.prepros.csv)": [[141, "deepr.examples.movielens.prepros.csv.SequenceMask"]], "sequencemask (class in deepr.examples.movielens.prepros.record)": [[141, "deepr.examples.movielens.prepros.record.SequenceMask"]], "deepr.examples.movielens.prepros": [[141, "module-deepr.examples.movielens.prepros"]], "deepr.examples.movielens.prepros.csv": [[141, "module-deepr.examples.movielens.prepros.csv"]], "deepr.examples.movielens.prepros.record": [[141, "module-deepr.examples.movielens.prepros.record"]], "forward() (deepr.examples.movielens.prepros.csv.randomnegatives method)": [[141, "deepr.examples.movielens.prepros.csv.RandomNegatives.forward"]], "forward() (deepr.examples.movielens.prepros.csv.sequencemask method)": [[141, "deepr.examples.movielens.prepros.csv.SequenceMask.forward"]], "forward() (deepr.examples.movielens.prepros.record.sequencemask method)": [[141, "deepr.examples.movielens.prepros.record.SequenceMask.forward"]], "testcsvreader (class in deepr.examples.movielens.readers.csv)": [[142, "deepr.examples.movielens.readers.csv.TestCSVReader"]], "traincsvreader (class in deepr.examples.movielens.readers.csv)": [[142, "deepr.examples.movielens.readers.csv.TrainCSVReader"]], "as_dataset() (deepr.examples.movielens.readers.csv.testcsvreader method)": [[142, "deepr.examples.movielens.readers.csv.TestCSVReader.as_dataset"]], "as_dataset() (deepr.examples.movielens.readers.csv.traincsvreader method)": [[142, "deepr.examples.movielens.readers.csv.TrainCSVReader.as_dataset"]], "deepr.examples.movielens.readers": [[142, "module-deepr.examples.movielens.readers"]], "deepr.examples.movielens.readers.csv": [[142, "module-deepr.examples.movielens.readers.csv"]], "input_positives_one_hot() (in module deepr.examples.movielens.utils.fields)": [[143, "deepr.examples.movielens.utils.fields.INPUT_POSITIVES_ONE_HOT"]], "target_positives_one_hot() (in module deepr.examples.movielens.utils.fields)": [[143, "deepr.examples.movielens.utils.fields.TARGET_POSITIVES_ONE_HOT"]], "deepr.examples.movielens.utils": [[143, "module-deepr.examples.movielens.utils"]], "deepr.examples.movielens.utils.fields": [[143, "module-deepr.examples.movielens.utils.fields"]], "deepr.examples.multiply": [[144, "module-deepr.examples.multiply"]], "build (class in deepr.examples.multiply.jobs.build)": [[145, "deepr.examples.multiply.jobs.build.Build"]], "predictproto (class in deepr.examples.multiply.jobs.predict)": [[145, "deepr.examples.multiply.jobs.predict.PredictProto"]], "predictsavedmodel (class in deepr.examples.multiply.jobs.predict)": [[145, "deepr.examples.multiply.jobs.predict.PredictSavedModel"]], "deepr.examples.multiply.jobs": [[145, "module-deepr.examples.multiply.jobs"]], "deepr.examples.multiply.jobs.build": [[145, "module-deepr.examples.multiply.jobs.build"]], "deepr.examples.multiply.jobs.predict": [[145, "module-deepr.examples.multiply.jobs.predict"]], "feeds (deepr.examples.multiply.jobs.predict.predictproto attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictProto.feeds"]], "feeds (deepr.examples.multiply.jobs.predict.predictsavedmodel attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictSavedModel.feeds"]], "fetches (deepr.examples.multiply.jobs.predict.predictproto attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictProto.fetches"]], "fetches (deepr.examples.multiply.jobs.predict.predictsavedmodel attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictSavedModel.fetches"]], "graph_name (deepr.examples.multiply.jobs.predict.predictproto attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictProto.graph_name"]], "input_fn (deepr.examples.multiply.jobs.predict.predictproto attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictProto.input_fn"]], "input_fn (deepr.examples.multiply.jobs.predict.predictsavedmodel attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictSavedModel.input_fn"]], "num_examples (deepr.examples.multiply.jobs.build.build attribute)": [[145, "deepr.examples.multiply.jobs.build.Build.num_examples"]], "path_dataset (deepr.examples.multiply.jobs.build.build attribute)": [[145, "deepr.examples.multiply.jobs.build.Build.path_dataset"]], "path_model (deepr.examples.multiply.jobs.predict.predictproto attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictProto.path_model"]], "path_saved_model (deepr.examples.multiply.jobs.predict.predictsavedmodel attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictSavedModel.path_saved_model"]], "prepro_fn (deepr.examples.multiply.jobs.predict.predictproto attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictProto.prepro_fn"]], "prepro_fn (deepr.examples.multiply.jobs.predict.predictsavedmodel attribute)": [[145, "deepr.examples.multiply.jobs.predict.PredictSavedModel.prepro_fn"]], "run() (deepr.examples.multiply.jobs.build.build method)": [[145, "deepr.examples.multiply.jobs.build.Build.run"]], "run() (deepr.examples.multiply.jobs.predict.predictproto method)": [[145, "deepr.examples.multiply.jobs.predict.PredictProto.run"]], "run() (deepr.examples.multiply.jobs.predict.predictsavedmodel method)": [[145, "deepr.examples.multiply.jobs.predict.PredictSavedModel.run"]], "multiply (class in deepr.examples.multiply.layers.model)": [[146, "deepr.examples.multiply.layers.model.Multiply"]], "squaredl2 (class in deepr.examples.multiply.layers.loss)": [[146, "deepr.examples.multiply.layers.loss.SquaredL2"]], "deepr.examples.multiply.layers": [[146, "module-deepr.examples.multiply.layers"]], "deepr.examples.multiply.layers.loss": [[146, "module-deepr.examples.multiply.layers.loss"]], "deepr.examples.multiply.layers.model": [[146, "module-deepr.examples.multiply.layers.model"]], "forward() (deepr.examples.multiply.layers.loss.squaredl2 method)": [[146, "deepr.examples.multiply.layers.loss.SquaredL2.forward"]], "forward() (deepr.examples.multiply.layers.model.multiply method)": [[146, "deepr.examples.multiply.layers.model.Multiply.forward"]], "paths (class in deepr.examples.multiply.macros.paths)": [[147, "deepr.examples.multiply.macros.paths.Paths"]], "deepr.examples.multiply.macros": [[147, "module-deepr.examples.multiply.macros"]], "deepr.examples.multiply.macros.paths": [[147, "module-deepr.examples.multiply.macros.paths"]], "defaultprepro() (in module deepr.examples.multiply.prepros.default)": [[148, "deepr.examples.multiply.prepros.default.DefaultPrepro"]], "inferenceprepro() (in module deepr.examples.multiply.prepros.inference)": [[148, "deepr.examples.multiply.prepros.inference.InferencePrepro"]], "deepr.examples.multiply.prepros": [[148, "module-deepr.examples.multiply.prepros"]], "deepr.examples.multiply.prepros.default": [[148, "module-deepr.examples.multiply.prepros.default"]], "deepr.examples.multiply.prepros.inference": [[148, "module-deepr.examples.multiply.prepros.inference"]], "bestcheckpoint (class in deepr.exporters.best_checkpoint)": [[149, "deepr.exporters.best_checkpoint.BestCheckpoint"]], "bestmode (class in deepr.exporters.best_checkpoint)": [[149, "deepr.exporters.best_checkpoint.BestMode"]], "decrease (deepr.exporters.best_checkpoint.bestmode attribute)": [[149, "deepr.exporters.best_checkpoint.BestMode.DECREASE"]], "exporter (class in deepr.exporters.base)": [[149, "deepr.exporters.base.Exporter"]], "increase (deepr.exporters.best_checkpoint.bestmode attribute)": [[149, "deepr.exporters.best_checkpoint.BestMode.INCREASE"]], "savevariables (class in deepr.exporters.save_variables)": [[149, "deepr.exporters.save_variables.SaveVariables"]], "savedmodel (class in deepr.exporters.saved_model)": [[149, "deepr.exporters.saved_model.SavedModel"]], "chunk_size (deepr.exporters.save_variables.savevariables attribute)": [[149, "deepr.exporters.save_variables.SaveVariables.chunk_size"]], "compression (deepr.exporters.save_variables.savevariables attribute)": [[149, "deepr.exporters.save_variables.SaveVariables.compression"]], "deepr.exporters": [[149, "module-deepr.exporters"]], "deepr.exporters.base": [[149, "module-deepr.exporters.base"]], "deepr.exporters.best_checkpoint": [[149, "module-deepr.exporters.best_checkpoint"]], "deepr.exporters.save_variables": [[149, "module-deepr.exporters.save_variables"]], "deepr.exporters.saved_model": [[149, "module-deepr.exporters.saved_model"]], "export() (deepr.exporters.base.exporter method)": [[149, "deepr.exporters.base.Exporter.export"]], "export() (deepr.exporters.best_checkpoint.bestcheckpoint method)": [[149, "deepr.exporters.best_checkpoint.BestCheckpoint.export"]], "export() (deepr.exporters.save_variables.savevariables method)": [[149, "deepr.exporters.save_variables.SaveVariables.export"]], "export() (deepr.exporters.saved_model.savedmodel method)": [[149, "deepr.exporters.saved_model.SavedModel.export"]], "fields (deepr.exporters.saved_model.savedmodel attribute)": [[149, "deepr.exporters.saved_model.SavedModel.fields"]], "metric (deepr.exporters.best_checkpoint.bestcheckpoint attribute)": [[149, "deepr.exporters.best_checkpoint.BestCheckpoint.metric"]], "mode (deepr.exporters.best_checkpoint.bestcheckpoint attribute)": [[149, "deepr.exporters.best_checkpoint.BestCheckpoint.mode"]], "path_saved_model (deepr.exporters.saved_model.savedmodel attribute)": [[149, "deepr.exporters.saved_model.SavedModel.path_saved_model"]], "path_variables (deepr.exporters.save_variables.savevariables attribute)": [[149, "deepr.exporters.save_variables.SaveVariables.path_variables"]], "read_eval_metrics() (in module deepr.exporters.best_checkpoint)": [[149, "deepr.exporters.best_checkpoint.read_eval_metrics"]], "tag (deepr.exporters.best_checkpoint.bestcheckpoint attribute)": [[149, "deepr.exporters.best_checkpoint.BestCheckpoint.tag"]], "use_mlflow (deepr.exporters.best_checkpoint.bestcheckpoint attribute)": [[149, "deepr.exporters.best_checkpoint.BestCheckpoint.use_mlflow"]], "variable_names (deepr.exporters.save_variables.savevariables attribute)": [[149, "deepr.exporters.save_variables.SaveVariables.variable_names"]], "earlystoppinghookfactory (class in deepr.hooks.early_stopping)": [[150, "deepr.hooks.early_stopping.EarlyStoppingHookFactory"]], "estimatorhookfactory (class in deepr.hooks.base)": [[150, "deepr.hooks.base.EstimatorHookFactory"]], "logvariablesinithook (class in deepr.hooks.log_variables_init)": [[150, "deepr.hooks.log_variables_init.LogVariablesInitHook"]], "loggingtensorhook (class in deepr.hooks.logging_tensor)": [[150, "deepr.hooks.logging_tensor.LoggingTensorHook"]], "loggingtensorhookfactory (class in deepr.hooks.logging_tensor)": [[150, "deepr.hooks.logging_tensor.LoggingTensorHookFactory"]], "maxresidentmemory (class in deepr.hooks.logging_tensor)": [[150, "deepr.hooks.logging_tensor.MaxResidentMemory"]], "numparamshook (class in deepr.hooks.num_params)": [[150, "deepr.hooks.num_params.NumParamsHook"]], "residentmemory (class in deepr.hooks.logging_tensor)": [[150, "deepr.hooks.logging_tensor.ResidentMemory"]], "stepspersechook (class in deepr.hooks.steps_per_sec)": [[150, "deepr.hooks.steps_per_sec.StepsPerSecHook"]], "summarysaverhookfactory (class in deepr.hooks.summary)": [[150, "deepr.hooks.summary.SummarySaverHookFactory"]], "tensorhookfactory (class in deepr.hooks.base)": [[150, "deepr.hooks.base.TensorHookFactory"]], "after_create_session() (deepr.hooks.log_variables_init.logvariablesinithook method)": [[150, "deepr.hooks.log_variables_init.LogVariablesInitHook.after_create_session"]], "after_create_session() (deepr.hooks.num_params.numparamshook method)": [[150, "deepr.hooks.num_params.NumParamsHook.after_create_session"]], "batch_size (deepr.hooks.steps_per_sec.stepspersechook attribute)": [[150, "deepr.hooks.steps_per_sec.StepsPerSecHook.batch_size"]], "deepr.hooks": [[150, "module-deepr.hooks"]], "deepr.hooks.base": [[150, "module-deepr.hooks.base"]], "deepr.hooks.early_stopping": [[150, "module-deepr.hooks.early_stopping"]], "deepr.hooks.log_variables_init": [[150, "module-deepr.hooks.log_variables_init"]], "deepr.hooks.logging_tensor": [[150, "module-deepr.hooks.logging_tensor"]], "deepr.hooks.num_params": [[150, "module-deepr.hooks.num_params"]], "deepr.hooks.steps_per_sec": [[150, "module-deepr.hooks.steps_per_sec"]], "deepr.hooks.summary": [[150, "module-deepr.hooks.summary"]], "final_step (deepr.hooks.early_stopping.earlystoppinghookfactory attribute)": [[150, "deepr.hooks.early_stopping.EarlyStoppingHookFactory.final_step"]], "formatter (deepr.hooks.logging_tensor.loggingtensorhookfactory attribute)": [[150, "deepr.hooks.logging_tensor.LoggingTensorHookFactory.formatter"]], "functions (deepr.hooks.logging_tensor.loggingtensorhookfactory attribute)": [[150, "deepr.hooks.logging_tensor.LoggingTensorHookFactory.functions"]], "get_num_params() (in module deepr.hooks.num_params)": [[150, "deepr.hooks.num_params.get_num_params"]], "max_steps_without_improvement (deepr.hooks.early_stopping.earlystoppinghookfactory attribute)": [[150, "deepr.hooks.early_stopping.EarlyStoppingHookFactory.max_steps_without_improvement"]], "metric (deepr.hooks.early_stopping.earlystoppinghookfactory attribute)": [[150, "deepr.hooks.early_stopping.EarlyStoppingHookFactory.metric"]], "min_steps (deepr.hooks.early_stopping.earlystoppinghookfactory attribute)": [[150, "deepr.hooks.early_stopping.EarlyStoppingHookFactory.min_steps"]], "mode (deepr.hooks.early_stopping.earlystoppinghookfactory attribute)": [[150, "deepr.hooks.early_stopping.EarlyStoppingHookFactory.mode"]], "name (deepr.hooks.logging_tensor.loggingtensorhookfactory attribute)": [[150, "deepr.hooks.logging_tensor.LoggingTensorHookFactory.name"]], "prefix (deepr.hooks.steps_per_sec.stepspersechook attribute)": [[150, "deepr.hooks.steps_per_sec.StepsPerSecHook.prefix"]], "run_every_secs (deepr.hooks.early_stopping.earlystoppinghookfactory attribute)": [[150, "deepr.hooks.early_stopping.EarlyStoppingHookFactory.run_every_secs"]], "run_every_steps (deepr.hooks.early_stopping.earlystoppinghookfactory attribute)": [[150, "deepr.hooks.early_stopping.EarlyStoppingHookFactory.run_every_steps"]], "skip_after_step (deepr.hooks.logging_tensor.loggingtensorhookfactory attribute)": [[150, "deepr.hooks.logging_tensor.LoggingTensorHookFactory.skip_after_step"]], "skip_after_step (deepr.hooks.steps_per_sec.stepspersechook attribute)": [[150, "deepr.hooks.steps_per_sec.StepsPerSecHook.skip_after_step"]], "tensors (deepr.hooks.logging_tensor.loggingtensorhookfactory attribute)": [[150, "deepr.hooks.logging_tensor.LoggingTensorHookFactory.tensors"]], "use_graphite (deepr.hooks.logging_tensor.loggingtensorhookfactory attribute)": [[150, "deepr.hooks.logging_tensor.LoggingTensorHookFactory.use_graphite"]], "use_graphite (deepr.hooks.steps_per_sec.stepspersechook attribute)": [[150, "deepr.hooks.steps_per_sec.StepsPerSecHook.use_graphite"]], "use_mlflow (deepr.hooks.logging_tensor.loggingtensorhookfactory attribute)": [[150, "deepr.hooks.logging_tensor.LoggingTensorHookFactory.use_mlflow"]], "use_mlflow (deepr.hooks.steps_per_sec.stepspersechook attribute)": [[150, "deepr.hooks.steps_per_sec.StepsPerSecHook.use_mlflow"]], "checkpointinitializer (class in deepr.initializers.checkpoint_initializer)": [[151, "deepr.initializers.checkpoint_initializer.CheckpointInitializer"]], "deepr.initializers": [[151, "module-deepr.initializers"]], "deepr.initializers.checkpoint_initializer": [[151, "module-deepr.initializers.checkpoint_initializer"]], "hdfsfile (class in deepr.io.hdfs)": [[152, "deepr.io.hdfs.HDFSFile"]], "hdfsfilesystem (class in deepr.io.hdfs)": [[152, "deepr.io.hdfs.HDFSFileSystem"]], "parquetdataset (class in deepr.io.parquet)": [[152, "deepr.io.parquet.ParquetDataset"]], "path (class in deepr.io.path)": [[152, "deepr.io.path.Path"]], "copy_dir() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.copy_dir"]], "copy_file() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.copy_file"]], "deepr.io": [[152, "module-deepr.io"]], "deepr.io.hdfs": [[152, "module-deepr.io.hdfs"]], "deepr.io.json": [[152, "module-deepr.io.json"]], "deepr.io.parquet": [[152, "module-deepr.io.parquet"]], "deepr.io.path": [[152, "module-deepr.io.path"]], "delete() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.delete"]], "delete_dir() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.delete_dir"]], "exists() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.exists"]], "filesystem (deepr.io.hdfs.hdfsfile attribute)": [[152, "deepr.io.hdfs.HDFSFile.filesystem"]], "filesystem (deepr.io.parquet.parquetdataset attribute)": [[152, "deepr.io.parquet.ParquetDataset.filesystem"]], "glob() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.glob"]], "is_dir() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.is_dir"]], "is_file() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.is_file"]], "is_hdfs (deepr.io.parquet.parquetdataset property)": [[152, "deepr.io.parquet.ParquetDataset.is_hdfs"]], "is_hdfs (deepr.io.path.path property)": [[152, "deepr.io.path.Path.is_hdfs"]], "is_json() (in module deepr.io.json)": [[152, "deepr.io.json.is_json"]], "is_local (deepr.io.parquet.parquetdataset property)": [[152, "deepr.io.parquet.ParquetDataset.is_local"]], "is_local (deepr.io.path.path property)": [[152, "deepr.io.path.Path.is_local"]], "iterdir() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.iterdir"]], "load_json() (in module deepr.io.json)": [[152, "deepr.io.json.load_json"]], "mkdir() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.mkdir"]], "mode (deepr.io.hdfs.hdfsfile attribute)": [[152, "deepr.io.hdfs.HDFSFile.mode"]], "name (deepr.io.path.path property)": [[152, "deepr.io.path.Path.name"]], "open() (deepr.io.parquet.parquetdataset method)": [[152, "deepr.io.parquet.ParquetDataset.open"]], "open() (deepr.io.path.path method)": [[152, "deepr.io.path.Path.open"]], "parent (deepr.io.path.path property)": [[152, "deepr.io.path.Path.parent"]], "path (deepr.io.hdfs.hdfsfile attribute)": [[152, "deepr.io.hdfs.HDFSFile.path"]], "path_or_paths (deepr.io.parquet.parquetdataset attribute)": [[152, "deepr.io.parquet.ParquetDataset.path_or_paths"]], "pq_dataset (deepr.io.parquet.parquetdataset property)": [[152, "deepr.io.parquet.ParquetDataset.pq_dataset"]], "read() (deepr.io.hdfs.hdfsfile method)": [[152, "deepr.io.hdfs.HDFSFile.read"]], "read() (deepr.io.parquet.parquetdataset method)": [[152, "deepr.io.parquet.ParquetDataset.read"]], "read_json() (in module deepr.io.json)": [[152, "deepr.io.json.read_json"]], "read_pandas() (deepr.io.parquet.parquetdataset method)": [[152, "deepr.io.parquet.ParquetDataset.read_pandas"]], "readlines() (deepr.io.hdfs.hdfsfile method)": [[152, "deepr.io.hdfs.HDFSFile.readlines"]], "suffix (deepr.io.path.path property)": [[152, "deepr.io.path.Path.suffix"]], "write() (deepr.io.hdfs.hdfsfile method)": [[152, "deepr.io.hdfs.HDFSFile.write"]], "write() (deepr.io.parquet.parquetdataset method)": [[152, "deepr.io.parquet.ParquetDataset.write"]], "write_json() (in module deepr.io.json)": [[152, "deepr.io.json.write_json"]], "write_pandas() (deepr.io.parquet.parquetdataset method)": [[152, "deepr.io.parquet.ParquetDataset.write_pandas"]], "cleanupcheckpoints (class in deepr.jobs.cleanup_checkpoints)": [[153, "deepr.jobs.cleanup_checkpoints.CleanupCheckpoints"]], "configproto (class in deepr.jobs.trainer)": [[153, "deepr.jobs.trainer.ConfigProto"]], "copydir (class in deepr.jobs.copy_dir)": [[153, "deepr.jobs.copy_dir.CopyDir"]], "evalspec (class in deepr.jobs.trainer)": [[153, "deepr.jobs.trainer.EvalSpec"]], "evaluate (class in deepr.jobs.evaluate)": [[153, "deepr.jobs.evaluate.Evaluate"]], "exportxlamodelmetadata (class in deepr.jobs.export_xla_model_metadata)": [[153, "deepr.jobs.export_xla_model_metadata.ExportXlaModelMetadata"]], "finalspec (class in deepr.jobs.trainer)": [[153, "deepr.jobs.trainer.FinalSpec"]], "gridsampler (class in deepr.jobs.params_tuner)": [[153, "deepr.jobs.params_tuner.GridSampler"]], "job (class in deepr.jobs.base)": [[153, "deepr.jobs.base.Job"]], "logmetric (class in deepr.jobs.log_metric)": [[153, "deepr.jobs.log_metric.LogMetric"]], "mlflowformatter (class in deepr.jobs.mlflow_save_configs)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowFormatter"]], "mlflowsaveconfigs (class in deepr.jobs.mlflow_save_configs)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowSaveConfigs"]], "mlflowsaveinfo (class in deepr.jobs.mlflow_save_info)": [[153, "deepr.jobs.mlflow_save_info.MLFlowSaveInfo"]], "optimizesavedmodel (class in deepr.jobs.optimize_saved_model)": [[153, "deepr.jobs.optimize_saved_model.OptimizeSavedModel"]], "paramssampler (class in deepr.jobs.params_tuner)": [[153, "deepr.jobs.params_tuner.ParamsSampler"]], "paramstuner (class in deepr.jobs.params_tuner)": [[153, "deepr.jobs.params_tuner.ParamsTuner"]], "pipeline (class in deepr.jobs.combinators)": [[153, "deepr.jobs.combinators.Pipeline"]], "runconfig (class in deepr.jobs.trainer)": [[153, "deepr.jobs.trainer.RunConfig"]], "sampler (class in deepr.jobs.params_tuner)": [[153, "deepr.jobs.params_tuner.Sampler"]], "savedataset (class in deepr.jobs.save_dataset)": [[153, "deepr.jobs.save_dataset.SaveDataset"]], "tensorsnotfounderror": [[153, "deepr.jobs.optimize_saved_model.TensorsNotFoundError"]], "trainspec (class in deepr.jobs.trainer)": [[153, "deepr.jobs.trainer.TrainSpec"]], "trainer (class in deepr.jobs.trainer)": [[153, "deepr.jobs.trainer.Trainer"]], "trainerbase (class in deepr.jobs.trainer_base)": [[153, "deepr.jobs.trainer_base.TrainerBase"]], "trainerkeras (class in deepr.jobs.trainer_keras)": [[153, "deepr.jobs.trainer_keras.TrainerKeras"]], "yarnconfig (class in deepr.jobs.yarn_config)": [[153, "deepr.jobs.yarn_config.YarnConfig"]], "yarnlauncher (class in deepr.jobs.yarn_launcher)": [[153, "deepr.jobs.yarn_launcher.YarnLauncher"]], "yarnlauncherconfig (class in deepr.jobs.yarn_launcher)": [[153, "deepr.jobs.yarn_launcher.YarnLauncherConfig"]], "yarntrainer (class in deepr.jobs.yarn_trainer)": [[153, "deepr.jobs.yarn_trainer.YarnTrainer"]], "yarntrainerconfig (class in deepr.jobs.yarn_trainer)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig"]], "add_metadata_item() (in module deepr.jobs.export_xla_model_metadata)": [[153, "deepr.jobs.export_xla_model_metadata.add_metadata_item"]], "blacklisted_variables (deepr.jobs.optimize_saved_model.optimizesavedmodel attribute)": [[153, "deepr.jobs.optimize_saved_model.OptimizeSavedModel.blacklisted_variables"], [153, "id6"]], "chunk_size (deepr.jobs.save_dataset.savedataset attribute)": [[153, "deepr.jobs.save_dataset.SaveDataset.chunk_size"]], "compression_type (deepr.jobs.save_dataset.savedataset attribute)": [[153, "deepr.jobs.save_dataset.SaveDataset.compression_type"]], "config (deepr.jobs.mlflow_save_configs.mlflowsaveconfigs attribute)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowSaveConfigs.config"]], "config (deepr.jobs.yarn_launcher.yarnlauncher attribute)": [[153, "deepr.jobs.yarn_launcher.YarnLauncher.config"]], "config (deepr.jobs.yarn_trainer.yarntrainer attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainer.config"]], "config_proto (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.config_proto"], [153, "id13"]], "config_proto (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.config_proto"]], "cpu_ignored_packages (deepr.jobs.yarn_config.yarnconfig attribute)": [[153, "deepr.jobs.yarn_config.YarnConfig.cpu_ignored_packages"]], "create_experiment() (deepr.jobs.trainer.trainer method)": [[153, "deepr.jobs.trainer.Trainer.create_experiment"]], "create_experiment() (deepr.jobs.trainer_base.trainerbase method)": [[153, "deepr.jobs.trainer_base.TrainerBase.create_experiment"]], "create_experiment() (deepr.jobs.trainer_keras.trainerkeras method)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.create_experiment"]], "deepr.jobs": [[153, "module-deepr.jobs"]], "deepr.jobs.base": [[153, "module-deepr.jobs.base"]], "deepr.jobs.cleanup_checkpoints": [[153, "module-deepr.jobs.cleanup_checkpoints"]], "deepr.jobs.combinators": [[153, "module-deepr.jobs.combinators"]], "deepr.jobs.copy_dir": [[153, "module-deepr.jobs.copy_dir"]], "deepr.jobs.evaluate": [[153, "module-deepr.jobs.evaluate"]], "deepr.jobs.export_xla_model_metadata": [[153, "module-deepr.jobs.export_xla_model_metadata"]], "deepr.jobs.log_metric": [[153, "module-deepr.jobs.log_metric"]], "deepr.jobs.mlflow_save_configs": [[153, "module-deepr.jobs.mlflow_save_configs"]], "deepr.jobs.mlflow_save_info": [[153, "module-deepr.jobs.mlflow_save_info"]], "deepr.jobs.optimize_saved_model": [[153, "module-deepr.jobs.optimize_saved_model"]], "deepr.jobs.params_tuner": [[153, "module-deepr.jobs.params_tuner"]], "deepr.jobs.save_dataset": [[153, "module-deepr.jobs.save_dataset"]], "deepr.jobs.trainer": [[153, "module-deepr.jobs.trainer"]], "deepr.jobs.trainer_base": [[153, "module-deepr.jobs.trainer_base"]], "deepr.jobs.trainer_keras": [[153, "module-deepr.jobs.trainer_keras"]], "deepr.jobs.yarn_config": [[153, "module-deepr.jobs.yarn_config"]], "deepr.jobs.yarn_launcher": [[153, "module-deepr.jobs.yarn_launcher"]], "deepr.jobs.yarn_trainer": [[153, "module-deepr.jobs.yarn_trainer"]], "eval_hooks (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.eval_hooks"], [153, "id14"]], "eval_hooks (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.eval_hooks"]], "eval_input_fn (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.eval_input_fn"], [153, "id15"]], "eval_input_fn (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.eval_input_fn"]], "eval_metrics (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.eval_metrics"], [153, "id16"]], "eval_spec (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.eval_spec"], [153, "id17"]], "eval_spec (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.eval_spec"]], "experiment_id (deepr.jobs.mlflow_save_info.mlflowsaveinfo attribute)": [[153, "deepr.jobs.mlflow_save_info.MLFlowSaveInfo.experiment_id"]], "exporters (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.exporters"], [153, "id18"]], "exporters (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.exporters"]], "feed_shapes (deepr.jobs.export_xla_model_metadata.exportxlamodelmetadata attribute)": [[153, "deepr.jobs.export_xla_model_metadata.ExportXlaModelMetadata.feed_shapes"], [153, "id0"]], "feeds (deepr.jobs.optimize_saved_model.optimizesavedmodel attribute)": [[153, "deepr.jobs.optimize_saved_model.OptimizeSavedModel.feeds"], [153, "id7"]], "fetch (deepr.jobs.optimize_saved_model.optimizesavedmodel attribute)": [[153, "deepr.jobs.optimize_saved_model.OptimizeSavedModel.fetch"], [153, "id8"]], "fetch_shapes (deepr.jobs.export_xla_model_metadata.exportxlamodelmetadata attribute)": [[153, "deepr.jobs.export_xla_model_metadata.ExportXlaModelMetadata.fetch_shapes"], [153, "id1"]], "fields (deepr.jobs.save_dataset.savedataset attribute)": [[153, "deepr.jobs.save_dataset.SaveDataset.fields"]], "final_hooks (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.final_hooks"]], "final_hooks (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.final_hooks"]], "final_metrics (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.final_metrics"]], "final_spec (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.final_spec"]], "final_spec (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.final_spec"]], "formatter (deepr.jobs.mlflow_save_configs.mlflowsaveconfigs attribute)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowSaveConfigs.formatter"]], "get_env_vars() (deepr.jobs.yarn_config.yarnconfig method)": [[153, "deepr.jobs.yarn_config.YarnConfig.get_env_vars"]], "get_nodes() (in module deepr.jobs.export_xla_model_metadata)": [[153, "deepr.jobs.export_xla_model_metadata.get_nodes"]], "get_task_specs() (deepr.jobs.yarn_trainer.yarntrainerconfig method)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.get_task_specs"]], "gpu_additional_packages (deepr.jobs.yarn_config.yarnconfig attribute)": [[153, "deepr.jobs.yarn_config.YarnConfig.gpu_additional_packages"]], "gpu_ignored_packages (deepr.jobs.yarn_config.yarnconfig attribute)": [[153, "deepr.jobs.yarn_config.YarnConfig.gpu_ignored_packages"]], "gpu_to_use (deepr.jobs.yarn_config.yarnconfig attribute)": [[153, "deepr.jobs.yarn_config.YarnConfig.gpu_to_use"]], "graph_name (deepr.jobs.export_xla_model_metadata.exportxlamodelmetadata attribute)": [[153, "deepr.jobs.export_xla_model_metadata.ExportXlaModelMetadata.graph_name"], [153, "id2"]], "graph_name (deepr.jobs.optimize_saved_model.optimizesavedmodel attribute)": [[153, "deepr.jobs.optimize_saved_model.OptimizeSavedModel.graph_name"], [153, "id9"]], "hadoop_file_systems (deepr.jobs.yarn_launcher.yarnlauncherconfig attribute)": [[153, "deepr.jobs.yarn_launcher.YarnLauncherConfig.hadoop_file_systems"]], "hooks (deepr.jobs.evaluate.evaluate attribute)": [[153, "deepr.jobs.evaluate.Evaluate.hooks"]], "include_keys (deepr.jobs.mlflow_save_configs.mlflowformatter attribute)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowFormatter.include_keys"]], "initializer_fn (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.initializer_fn"]], "initializer_fn() (deepr.jobs.trainer.trainer method)": [[153, "id19"]], "input_fn (deepr.jobs.evaluate.evaluate attribute)": [[153, "deepr.jobs.evaluate.Evaluate.input_fn"]], "input_fn (deepr.jobs.save_dataset.savedataset attribute)": [[153, "deepr.jobs.save_dataset.SaveDataset.input_fn"]], "job (deepr.jobs.params_tuner.paramstuner attribute)": [[153, "deepr.jobs.params_tuner.ParamsTuner.job"]], "job (deepr.jobs.yarn_launcher.yarnlauncher attribute)": [[153, "deepr.jobs.yarn_launcher.YarnLauncher.job"]], "jobs (deepr.jobs.combinators.pipeline attribute)": [[153, "deepr.jobs.combinators.Pipeline.jobs"]], "jvm_memory_in_gb (deepr.jobs.yarn_config.yarnconfig attribute)": [[153, "deepr.jobs.yarn_config.YarnConfig.jvm_memory_in_gb"]], "key (deepr.jobs.log_metric.logmetric attribute)": [[153, "deepr.jobs.log_metric.LogMetric.key"]], "loss_fn (deepr.jobs.evaluate.evaluate attribute)": [[153, "deepr.jobs.evaluate.Evaluate.loss_fn"]], "loss_fn (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.loss_fn"], [153, "id20"]], "macros (deepr.jobs.mlflow_save_configs.mlflowsaveconfigs attribute)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowSaveConfigs.macros"]], "macros (deepr.jobs.params_tuner.paramstuner attribute)": [[153, "deepr.jobs.params_tuner.ParamsTuner.macros"]], "macros_eval (deepr.jobs.mlflow_save_configs.mlflowsaveconfigs attribute)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowSaveConfigs.macros_eval"]], "make_placeholders() (in module deepr.jobs.optimize_saved_model)": [[153, "deepr.jobs.optimize_saved_model.make_placeholders"]], "memory (deepr.jobs.yarn_launcher.yarnlauncherconfig attribute)": [[153, "deepr.jobs.yarn_launcher.YarnLauncherConfig.memory"]], "metadata_name (deepr.jobs.export_xla_model_metadata.exportxlamodelmetadata attribute)": [[153, "deepr.jobs.export_xla_model_metadata.ExportXlaModelMetadata.metadata_name"], [153, "id3"]], "metrics (deepr.jobs.evaluate.evaluate attribute)": [[153, "deepr.jobs.evaluate.Evaluate.metrics"]], "mode (deepr.jobs.save_dataset.savedataset attribute)": [[153, "deepr.jobs.save_dataset.SaveDataset.mode"]], "model (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.model"]], "model_fn() (in module deepr.jobs.trainer)": [[153, "deepr.jobs.trainer.model_fn"]], "name (deepr.jobs.yarn_config.yarnconfig attribute)": [[153, "deepr.jobs.yarn_config.YarnConfig.name"]], "name (deepr.jobs.yarn_launcher.yarnlauncherconfig attribute)": [[153, "deepr.jobs.yarn_launcher.YarnLauncherConfig.name"]], "name (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.name"]], "nb_ps (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.nb_ps"]], "nb_retries (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.nb_retries"]], "nb_workers (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.nb_workers"]], "new_names (deepr.jobs.optimize_saved_model.optimizesavedmodel attribute)": [[153, "deepr.jobs.optimize_saved_model.OptimizeSavedModel.new_names"], [153, "id10"]], "num_cores (deepr.jobs.yarn_launcher.yarnlauncherconfig attribute)": [[153, "deepr.jobs.yarn_launcher.YarnLauncherConfig.num_cores"]], "num_parallel_calls (deepr.jobs.save_dataset.savedataset attribute)": [[153, "deepr.jobs.save_dataset.SaveDataset.num_parallel_calls"]], "optimizer_fn (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.optimizer_fn"], [153, "id21"]], "overwrite (deepr.jobs.copy_dir.copydir attribute)": [[153, "deepr.jobs.copy_dir.CopyDir.overwrite"]], "path (deepr.jobs.save_dataset.savedataset attribute)": [[153, "deepr.jobs.save_dataset.SaveDataset.path"]], "path_checkpoints (deepr.jobs.cleanup_checkpoints.cleanupcheckpoints attribute)": [[153, "deepr.jobs.cleanup_checkpoints.CleanupCheckpoints.path_checkpoints"]], "path_metadata (deepr.jobs.export_xla_model_metadata.exportxlamodelmetadata attribute)": [[153, "deepr.jobs.export_xla_model_metadata.ExportXlaModelMetadata.path_metadata"], [153, "id4"]], "path_mlflow (deepr.jobs.mlflow_save_info.mlflowsaveinfo attribute)": [[153, "deepr.jobs.mlflow_save_info.MLFlowSaveInfo.path_mlflow"]], "path_model (deepr.jobs.cleanup_checkpoints.cleanupcheckpoints attribute)": [[153, "deepr.jobs.cleanup_checkpoints.CleanupCheckpoints.path_model"]], "path_model (deepr.jobs.evaluate.evaluate attribute)": [[153, "deepr.jobs.evaluate.Evaluate.path_model"]], "path_model (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.path_model"], [153, "id22"]], "path_model (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.path_model"]], "path_optimized_model (deepr.jobs.export_xla_model_metadata.exportxlamodelmetadata attribute)": [[153, "deepr.jobs.export_xla_model_metadata.ExportXlaModelMetadata.path_optimized_model"], [153, "id5"]], "path_optimized_model (deepr.jobs.optimize_saved_model.optimizesavedmodel attribute)": [[153, "deepr.jobs.optimize_saved_model.OptimizeSavedModel.path_optimized_model"], [153, "id11"]], "path_pex_cpu (deepr.jobs.yarn_config.yarnconfig attribute)": [[153, "deepr.jobs.yarn_config.YarnConfig.path_pex_cpu"]], "path_pex_gpu (deepr.jobs.yarn_config.yarnconfig attribute)": [[153, "deepr.jobs.yarn_config.YarnConfig.path_pex_gpu"]], "path_pex_prefix (deepr.jobs.yarn_config.yarnconfig attribute)": [[153, "deepr.jobs.yarn_config.YarnConfig.path_pex_prefix"]], "path_saved_model (deepr.jobs.optimize_saved_model.optimizesavedmodel attribute)": [[153, "deepr.jobs.optimize_saved_model.OptimizeSavedModel.path_saved_model"], [153, "id12"]], "pre_script_hook (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.pre_script_hook"]], "pred_fn (deepr.jobs.evaluate.evaluate attribute)": [[153, "deepr.jobs.evaluate.Evaluate.pred_fn"]], "pred_fn (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.pred_fn"], [153, "id23"]], "preds (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.preds"]], "prepro_fn (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.prepro_fn"]], "prepro_fn() (deepr.jobs.evaluate.evaluate method)": [[153, "deepr.jobs.evaluate.Evaluate.prepro_fn"]], "prepro_fn() (deepr.jobs.save_dataset.savedataset method)": [[153, "deepr.jobs.save_dataset.SaveDataset.prepro_fn"]], "prepro_fn() (deepr.jobs.trainer.trainer method)": [[153, "id24"]], "prepro_fn() (deepr.jobs.trainer_keras.trainerkeras method)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.prepro_fn"]], "queue (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.queue"]], "random_seed (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.random_seed"]], "random_seed (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.random_seed"]], "rename_nodes() (in module deepr.jobs.optimize_saved_model)": [[153, "deepr.jobs.optimize_saved_model.rename_nodes"]], "run() (deepr.jobs.base.job method)": [[153, "deepr.jobs.base.Job.run"]], "run() (deepr.jobs.cleanup_checkpoints.cleanupcheckpoints method)": [[153, "deepr.jobs.cleanup_checkpoints.CleanupCheckpoints.run"]], "run() (deepr.jobs.combinators.pipeline method)": [[153, "deepr.jobs.combinators.Pipeline.run"]], "run() (deepr.jobs.copy_dir.copydir method)": [[153, "deepr.jobs.copy_dir.CopyDir.run"]], "run() (deepr.jobs.evaluate.evaluate method)": [[153, "deepr.jobs.evaluate.Evaluate.run"]], "run() (deepr.jobs.export_xla_model_metadata.exportxlamodelmetadata method)": [[153, "deepr.jobs.export_xla_model_metadata.ExportXlaModelMetadata.run"]], "run() (deepr.jobs.log_metric.logmetric method)": [[153, "deepr.jobs.log_metric.LogMetric.run"]], "run() (deepr.jobs.mlflow_save_configs.mlflowsaveconfigs method)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowSaveConfigs.run"]], "run() (deepr.jobs.mlflow_save_info.mlflowsaveinfo method)": [[153, "deepr.jobs.mlflow_save_info.MLFlowSaveInfo.run"]], "run() (deepr.jobs.optimize_saved_model.optimizesavedmodel method)": [[153, "deepr.jobs.optimize_saved_model.OptimizeSavedModel.run"]], "run() (deepr.jobs.params_tuner.paramstuner method)": [[153, "deepr.jobs.params_tuner.ParamsTuner.run"]], "run() (deepr.jobs.save_dataset.savedataset method)": [[153, "deepr.jobs.save_dataset.SaveDataset.run"]], "run() (deepr.jobs.trainer_base.trainerbase method)": [[153, "deepr.jobs.trainer_base.TrainerBase.run"]], "run() (deepr.jobs.yarn_launcher.yarnlauncher method)": [[153, "deepr.jobs.yarn_launcher.YarnLauncher.run"]], "run() (deepr.jobs.yarn_trainer.yarntrainer method)": [[153, "deepr.jobs.yarn_trainer.YarnTrainer.run"]], "run_config (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.run_config"], [153, "id25"]], "run_config (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.run_config"]], "run_final_evaluation() (deepr.jobs.trainer.trainer method)": [[153, "deepr.jobs.trainer.Trainer.run_final_evaluation"]], "run_final_evaluation() (deepr.jobs.trainer_base.trainerbase method)": [[153, "deepr.jobs.trainer_base.TrainerBase.run_final_evaluation"]], "run_final_evaluation() (deepr.jobs.trainer_keras.trainerkeras method)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.run_final_evaluation"]], "run_id (deepr.jobs.mlflow_save_info.mlflowsaveinfo attribute)": [[153, "deepr.jobs.mlflow_save_info.MLFlowSaveInfo.run_id"]], "run_on_yarn (deepr.jobs.yarn_launcher.yarnlauncher attribute)": [[153, "deepr.jobs.yarn_launcher.YarnLauncher.run_on_yarn"]], "run_uuid (deepr.jobs.mlflow_save_info.mlflowsaveinfo attribute)": [[153, "deepr.jobs.mlflow_save_info.MLFlowSaveInfo.run_uuid"]], "sampler (deepr.jobs.params_tuner.paramstuner attribute)": [[153, "deepr.jobs.params_tuner.ParamsTuner.sampler"]], "secs (deepr.jobs.save_dataset.savedataset attribute)": [[153, "deepr.jobs.save_dataset.SaveDataset.secs"]], "skip_copy (deepr.jobs.copy_dir.copydir attribute)": [[153, "deepr.jobs.copy_dir.CopyDir.skip_copy"]], "skip_keys (deepr.jobs.mlflow_save_configs.mlflowformatter attribute)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowFormatter.skip_keys"]], "skip_values (deepr.jobs.mlflow_save_configs.mlflowformatter attribute)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowFormatter.skip_values"]], "source (deepr.jobs.copy_dir.copydir attribute)": [[153, "deepr.jobs.copy_dir.CopyDir.source"]], "spec (deepr.jobs.evaluate.evaluate attribute)": [[153, "deepr.jobs.evaluate.Evaluate.spec"]], "target (deepr.jobs.copy_dir.copydir attribute)": [[153, "deepr.jobs.copy_dir.CopyDir.target"]], "tf_yarn (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.tf_yarn"]], "tf_yarn_chief_cores (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.tf_yarn_chief_cores"]], "tf_yarn_chief_memory (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.tf_yarn_chief_memory"]], "tf_yarn_evaluator_cores (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.tf_yarn_evaluator_cores"]], "tf_yarn_evaluator_memory (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.tf_yarn_evaluator_memory"]], "tf_yarn_tensorboard_memory (deepr.jobs.yarn_trainer.yarntrainerconfig attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainerConfig.tf_yarn_tensorboard_memory"]], "train_hooks (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.train_hooks"], [153, "id26"]], "train_hooks (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.train_hooks"]], "train_input_fn (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.train_input_fn"], [153, "id27"]], "train_input_fn (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.train_input_fn"]], "train_metrics (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.train_metrics"], [153, "id28"]], "train_on_yarn (deepr.jobs.yarn_trainer.yarntrainer attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainer.train_on_yarn"]], "train_spec (deepr.jobs.trainer.trainer attribute)": [[153, "deepr.jobs.trainer.Trainer.train_spec"], [153, "id29"]], "train_spec (deepr.jobs.trainer_keras.trainerkeras attribute)": [[153, "deepr.jobs.trainer_keras.TrainerKeras.train_spec"]], "trainer (deepr.jobs.yarn_trainer.yarntrainer attribute)": [[153, "deepr.jobs.yarn_trainer.YarnTrainer.trainer"]], "upload_pex() (in module deepr.jobs.yarn_config)": [[153, "deepr.jobs.yarn_config.upload_pex"]], "upload_pex_cpu() (deepr.jobs.yarn_config.yarnconfig method)": [[153, "deepr.jobs.yarn_config.YarnConfig.upload_pex_cpu"]], "upload_pex_gpu() (deepr.jobs.yarn_config.yarnconfig method)": [[153, "deepr.jobs.yarn_config.YarnConfig.upload_pex_gpu"]], "use_mlflow (deepr.jobs.log_metric.logmetric attribute)": [[153, "deepr.jobs.log_metric.LogMetric.use_mlflow"]], "use_mlflow (deepr.jobs.mlflow_save_configs.mlflowsaveconfigs attribute)": [[153, "deepr.jobs.mlflow_save_configs.MLFlowSaveConfigs.use_mlflow"]], "use_mlflow (deepr.jobs.mlflow_save_info.mlflowsaveinfo attribute)": [[153, "deepr.jobs.mlflow_save_info.MLFlowSaveInfo.use_mlflow"]], "use_mlflow (deepr.jobs.yarn_launcher.yarnlauncher attribute)": [[153, "deepr.jobs.yarn_launcher.YarnLauncher.use_mlflow"]], "value (deepr.jobs.log_metric.logmetric attribute)": [[153, "deepr.jobs.log_metric.LogMetric.value"]], "and (deepr.layers.mask.booleanreducemode attribute)": [[154, "deepr.layers.mask.BooleanReduceMode.AND"]], "activemode (class in deepr.layers.combinators)": [[154, "deepr.layers.combinators.ActiveMode"]], "add (class in deepr.layers.core)": [[154, "deepr.layers.core.Add"]], "addwithweight (class in deepr.layers.core)": [[154, "deepr.layers.core.AddWithWeight"]], "attentionmask (class in deepr.layers.transformer)": [[154, "deepr.layers.transformer.AttentionMask"]], "average (class in deepr.layers.reduce)": [[154, "deepr.layers.reduce.Average"]], "bpr (class in deepr.layers.bpr)": [[154, "deepr.layers.bpr.BPR"]], "bprmax (class in deepr.layers.bpr_max)": [[154, "deepr.layers.bpr_max.BPRMax"]], "booleanmask (class in deepr.layers.mask)": [[154, "deepr.layers.mask.BooleanMask"]], "booleanreducemode (class in deepr.layers.mask)": [[154, "deepr.layers.mask.BooleanReduceMode"]], "clickrank (class in deepr.layers.click_rank)": [[154, "deepr.layers.click_rank.ClickRank"]], "combineembeddings (class in deepr.layers.embedding)": [[154, "deepr.layers.embedding.CombineEmbeddings"]], "concat (class in deepr.layers.core)": [[154, "deepr.layers.core.Concat"]], "conv1d (class in deepr.layers.core)": [[154, "deepr.layers.core.Conv1d"]], "dag (class in deepr.layers.combinators)": [[154, "deepr.layers.combinators.DAG"]], "dense (class in deepr.layers.core)": [[154, "deepr.layers.core.Dense"]], "denseindex (class in deepr.layers.core)": [[154, "deepr.layers.core.DenseIndex"]], "dotproduct (class in deepr.layers.core)": [[154, "deepr.layers.core.DotProduct"]], "dropout (class in deepr.layers.dropout)": [[154, "deepr.layers.dropout.Dropout"]], "embedding (class in deepr.layers.embedding)": [[154, "deepr.layers.embedding.Embedding"]], "equal (class in deepr.layers.mask)": [[154, "deepr.layers.mask.Equal"]], "expanddims (class in deepr.layers.core)": [[154, "deepr.layers.core.ExpandDims"]], "feedforward() (in module deepr.layers.transformer)": [[154, "deepr.layers.transformer.FeedForward"]], "identity (class in deepr.layers.core)": [[154, "deepr.layers.core.Identity"]], "isminsize (class in deepr.layers.size)": [[154, "deepr.layers.size.IsMinSize"]], "lstm (class in deepr.layers.lstm)": [[154, "deepr.layers.lstm.LSTM"]], "lambda (class in deepr.layers.base)": [[154, "deepr.layers.base.Lambda"]], "layer (class in deepr.layers.base)": [[154, "deepr.layers.base.Layer"]], "logicaland (class in deepr.layers.core)": [[154, "deepr.layers.core.LogicalAnd"]], "logicalor (class in deepr.layers.core)": [[154, "deepr.layers.core.LogicalOr"]], "lookup (class in deepr.layers.lookup)": [[154, "deepr.layers.lookup.Lookup"]], "lookupfromfile (class in deepr.layers.lookup)": [[154, "deepr.layers.lookup.LookupFromFile"]], "lookupfrommapping (class in deepr.layers.lookup)": [[154, "deepr.layers.lookup.LookupFromMapping"]], "lookupindextostring (class in deepr.layers.lookup)": [[154, "deepr.layers.lookup.LookupIndexToString"]], "maskedbpr (class in deepr.layers.bpr)": [[154, "deepr.layers.bpr.MaskedBPR"]], "maskedbprmax (class in deepr.layers.bpr_max)": [[154, "deepr.layers.bpr_max.MaskedBPRMax"]], "maskednegativesampling (class in deepr.layers.nce_loss)": [[154, "deepr.layers.nce_loss.MaskedNegativeSampling"]], "maskedtopone (class in deepr.layers.top_one)": [[154, "deepr.layers.top_one.MaskedTopOne"]], "maskedtoponemax (class in deepr.layers.top_one_max)": [[154, "deepr.layers.top_one_max.MaskedTopOneMax"]], "multiloglikelihood (class in deepr.layers.multi)": [[154, "deepr.layers.multi.MultiLogLikelihood"]], "multiloglikelihoodcss (class in deepr.layers.multi_css)": [[154, "deepr.layers.multi_css.MultiLogLikelihoodCSS"]], "negativesampling (class in deepr.layers.nce_loss)": [[154, "deepr.layers.nce_loss.NegativeSampling"]], "normalization (class in deepr.layers.transformer)": [[154, "deepr.layers.transformer.Normalization"]], "normalize (class in deepr.layers.core)": [[154, "deepr.layers.core.Normalize"]], "notequal (class in deepr.layers.mask)": [[154, "deepr.layers.mask.NotEqual"]], "or (deepr.layers.mask.booleanreducemode attribute)": [[154, "deepr.layers.mask.BooleanReduceMode.OR"]], "parallel (class in deepr.layers.combinators)": [[154, "deepr.layers.combinators.Parallel"]], "positionalencoding (class in deepr.layers.transformer)": [[154, "deepr.layers.transformer.PositionalEncoding"]], "product (class in deepr.layers.core)": [[154, "deepr.layers.core.Product"]], "rename (class in deepr.layers.combinators)": [[154, "deepr.layers.combinators.Rename"]], "scale (class in deepr.layers.core)": [[154, "deepr.layers.core.Scale"]], "scope (class in deepr.layers.combinators)": [[154, "deepr.layers.combinators.Scope"]], "select (class in deepr.layers.combinators)": [[154, "deepr.layers.combinators.Select"]], "selfmultiheadattention (class in deepr.layers.transformer)": [[154, "deepr.layers.transformer.SelfMultiheadAttention"]], "sequential (in module deepr.layers.combinators)": [[154, "deepr.layers.combinators.Sequential"]], "slice (class in deepr.layers.slice)": [[154, "deepr.layers.slice.Slice"]], "slicefirst (class in deepr.layers.slice)": [[154, "deepr.layers.slice.SliceFirst"]], "slicelast (class in deepr.layers.slice)": [[154, "deepr.layers.slice.SliceLast"]], "slicelastpadded (class in deepr.layers.slice)": [[154, "deepr.layers.slice.SliceLastPadded"]], "softmax (class in deepr.layers.core)": [[154, "deepr.layers.core.Softmax"]], "spatialdropout1d (class in deepr.layers.dropout)": [[154, "deepr.layers.dropout.SpatialDropout1D"]], "stringjoin (class in deepr.layers.string)": [[154, "deepr.layers.string.StringJoin"]], "sum (class in deepr.layers.core)": [[154, "deepr.layers.core.Sum"]], "todense (class in deepr.layers.sparse)": [[154, "deepr.layers.sparse.ToDense"]], "tofloat (class in deepr.layers.core)": [[154, "deepr.layers.core.ToFloat"]], "topone (class in deepr.layers.top_one)": [[154, "deepr.layers.top_one.TopOne"]], "toponemax (class in deepr.layers.top_one_max)": [[154, "deepr.layers.top_one_max.TopOneMax"]], "transformer() (in module deepr.layers.transformer)": [[154, "deepr.layers.transformer.Transformer"]], "tripletprecision (class in deepr.layers.triplet_precision)": [[154, "deepr.layers.triplet_precision.TripletPrecision"]], "weightedaverage (class in deepr.layers.reduce)": [[154, "deepr.layers.reduce.WeightedAverage"]], "block_id (deepr.layers.transformer.selfmultiheadattention attribute)": [[154, "deepr.layers.transformer.SelfMultiheadAttention.block_id"]], "deepr.layers": [[154, "module-deepr.layers"]], "deepr.layers.base": [[154, "module-deepr.layers.base"]], "deepr.layers.bpr": [[154, "module-deepr.layers.bpr"]], "deepr.layers.bpr_max": [[154, "module-deepr.layers.bpr_max"]], "deepr.layers.click_rank": [[154, "module-deepr.layers.click_rank"]], "deepr.layers.combinators": [[154, "module-deepr.layers.combinators"]], "deepr.layers.core": [[154, "module-deepr.layers.core"]], "deepr.layers.dropout": [[154, "module-deepr.layers.dropout"]], "deepr.layers.embedding": [[154, "module-deepr.layers.embedding"]], "deepr.layers.lookup": [[154, "module-deepr.layers.lookup"]], "deepr.layers.lstm": [[154, "module-deepr.layers.lstm"]], "deepr.layers.mask": [[154, "module-deepr.layers.mask"]], "deepr.layers.multi": [[154, "module-deepr.layers.multi"]], "deepr.layers.multi_css": [[154, "module-deepr.layers.multi_css"]], "deepr.layers.nce_loss": [[154, "module-deepr.layers.nce_loss"]], "deepr.layers.reduce": [[154, "module-deepr.layers.reduce"]], "deepr.layers.size": [[154, "module-deepr.layers.size"]], "deepr.layers.slice": [[154, "module-deepr.layers.slice"]], "deepr.layers.sparse": [[154, "module-deepr.layers.sparse"]], "deepr.layers.string": [[154, "module-deepr.layers.string"]], "deepr.layers.top_one": [[154, "module-deepr.layers.top_one"]], "deepr.layers.top_one_max": [[154, "module-deepr.layers.top_one_max"]], "deepr.layers.transformer": [[154, "module-deepr.layers.transformer"]], "deepr.layers.triplet_precision": [[154, "module-deepr.layers.triplet_precision"]], "default_value (deepr.layers.lookup.lookupfrommapping attribute)": [[154, "deepr.layers.lookup.LookupFromMapping.default_value"]], "default_value (deepr.layers.lookup.lookupindextostring attribute)": [[154, "deepr.layers.lookup.LookupIndexToString.default_value"]], "dim_head (deepr.layers.transformer.selfmultiheadattention attribute)": [[154, "deepr.layers.transformer.SelfMultiheadAttention.dim_head"]], "forward() (deepr.layers.base.lambda method)": [[154, "deepr.layers.base.Lambda.forward"]], "forward() (deepr.layers.base.layer method)": [[154, "deepr.layers.base.Layer.forward"]], "forward() (deepr.layers.bpr.bpr method)": [[154, "deepr.layers.bpr.BPR.forward"]], "forward() (deepr.layers.bpr.maskedbpr method)": [[154, "deepr.layers.bpr.MaskedBPR.forward"]], "forward() (deepr.layers.bpr_max.bprmax method)": [[154, "deepr.layers.bpr_max.BPRMax.forward"]], "forward() (deepr.layers.bpr_max.maskedbprmax method)": [[154, "deepr.layers.bpr_max.MaskedBPRMax.forward"]], "forward() (deepr.layers.click_rank.clickrank method)": [[154, "deepr.layers.click_rank.ClickRank.forward"]], "forward() (deepr.layers.combinators.activemode method)": [[154, "deepr.layers.combinators.ActiveMode.forward"]], "forward() (deepr.layers.combinators.parallel method)": [[154, "deepr.layers.combinators.Parallel.forward"]], "forward() (deepr.layers.combinators.rename method)": [[154, "deepr.layers.combinators.Rename.forward"]], "forward() (deepr.layers.combinators.scope method)": [[154, "deepr.layers.combinators.Scope.forward"]], "forward() (deepr.layers.combinators.select method)": [[154, "deepr.layers.combinators.Select.forward"]], "forward() (deepr.layers.core.add method)": [[154, "deepr.layers.core.Add.forward"]], "forward() (deepr.layers.core.addwithweight method)": [[154, "deepr.layers.core.AddWithWeight.forward"]], "forward() (deepr.layers.core.concat method)": [[154, "deepr.layers.core.Concat.forward"]], "forward() (deepr.layers.core.conv1d method)": [[154, "deepr.layers.core.Conv1d.forward"]], "forward() (deepr.layers.core.dense method)": [[154, "deepr.layers.core.Dense.forward"]], "forward() (deepr.layers.core.denseindex method)": [[154, "deepr.layers.core.DenseIndex.forward"]], "forward() (deepr.layers.core.dotproduct method)": [[154, "deepr.layers.core.DotProduct.forward"]], "forward() (deepr.layers.core.expanddims method)": [[154, "deepr.layers.core.ExpandDims.forward"]], "forward() (deepr.layers.core.identity method)": [[154, "deepr.layers.core.Identity.forward"]], "forward() (deepr.layers.core.logicaland method)": [[154, "deepr.layers.core.LogicalAnd.forward"]], "forward() (deepr.layers.core.logicalor method)": [[154, "deepr.layers.core.LogicalOr.forward"]], "forward() (deepr.layers.core.normalize method)": [[154, "deepr.layers.core.Normalize.forward"]], "forward() (deepr.layers.core.product method)": [[154, "deepr.layers.core.Product.forward"]], "forward() (deepr.layers.core.scale method)": [[154, "deepr.layers.core.Scale.forward"]], "forward() (deepr.layers.core.softmax method)": [[154, "deepr.layers.core.Softmax.forward"]], "forward() (deepr.layers.core.sum method)": [[154, "deepr.layers.core.Sum.forward"]], "forward() (deepr.layers.core.tofloat method)": [[154, "deepr.layers.core.ToFloat.forward"]], "forward() (deepr.layers.dropout.dropout method)": [[154, "deepr.layers.dropout.Dropout.forward"]], "forward() (deepr.layers.dropout.spatialdropout1d method)": [[154, "deepr.layers.dropout.SpatialDropout1D.forward"]], "forward() (deepr.layers.embedding.combineembeddings method)": [[154, "deepr.layers.embedding.CombineEmbeddings.forward"]], "forward() (deepr.layers.embedding.embedding method)": [[154, "deepr.layers.embedding.Embedding.forward"]], "forward() (deepr.layers.lookup.lookup method)": [[154, "deepr.layers.lookup.Lookup.forward"]], "forward() (deepr.layers.lstm.lstm method)": [[154, "deepr.layers.lstm.LSTM.forward"]], "forward() (deepr.layers.mask.booleanmask method)": [[154, "deepr.layers.mask.BooleanMask.forward"]], "forward() (deepr.layers.mask.equal method)": [[154, "deepr.layers.mask.Equal.forward"]], "forward() (deepr.layers.mask.notequal method)": [[154, "deepr.layers.mask.NotEqual.forward"]], "forward() (deepr.layers.multi.multiloglikelihood method)": [[154, "deepr.layers.multi.MultiLogLikelihood.forward"]], "forward() (deepr.layers.multi_css.multiloglikelihoodcss method)": [[154, "deepr.layers.multi_css.MultiLogLikelihoodCSS.forward"]], "forward() (deepr.layers.nce_loss.maskednegativesampling method)": [[154, "deepr.layers.nce_loss.MaskedNegativeSampling.forward"]], "forward() (deepr.layers.nce_loss.negativesampling method)": [[154, "deepr.layers.nce_loss.NegativeSampling.forward"]], "forward() (deepr.layers.reduce.average method)": [[154, "deepr.layers.reduce.Average.forward"]], "forward() (deepr.layers.reduce.weightedaverage method)": [[154, "deepr.layers.reduce.WeightedAverage.forward"]], "forward() (deepr.layers.size.isminsize method)": [[154, "deepr.layers.size.IsMinSize.forward"]], "forward() (deepr.layers.slice.slice method)": [[154, "deepr.layers.slice.Slice.forward"]], "forward() (deepr.layers.slice.slicefirst method)": [[154, "deepr.layers.slice.SliceFirst.forward"]], "forward() (deepr.layers.slice.slicelast method)": [[154, "deepr.layers.slice.SliceLast.forward"]], "forward() (deepr.layers.slice.slicelastpadded method)": [[154, "deepr.layers.slice.SliceLastPadded.forward"]], "forward() (deepr.layers.sparse.todense method)": [[154, "deepr.layers.sparse.ToDense.forward"]], "forward() (deepr.layers.string.stringjoin method)": [[154, "deepr.layers.string.StringJoin.forward"]], "forward() (deepr.layers.top_one.maskedtopone method)": [[154, "deepr.layers.top_one.MaskedTopOne.forward"]], "forward() (deepr.layers.top_one.topone method)": [[154, "deepr.layers.top_one.TopOne.forward"]], "forward() (deepr.layers.top_one_max.maskedtoponemax method)": [[154, "deepr.layers.top_one_max.MaskedTopOneMax.forward"]], "forward() (deepr.layers.top_one_max.toponemax method)": [[154, "deepr.layers.top_one_max.TopOneMax.forward"]], "forward() (deepr.layers.transformer.attentionmask method)": [[154, "deepr.layers.transformer.AttentionMask.forward"]], "forward() (deepr.layers.transformer.normalization method)": [[154, "deepr.layers.transformer.Normalization.forward"]], "forward() (deepr.layers.transformer.positionalencoding method)": [[154, "deepr.layers.transformer.PositionalEncoding.forward"]], "forward() (deepr.layers.transformer.selfmultiheadattention method)": [[154, "deepr.layers.transformer.SelfMultiheadAttention.forward"]], "forward() (deepr.layers.triplet_precision.tripletprecision method)": [[154, "deepr.layers.triplet_precision.TripletPrecision.forward"]], "forward_as_dict() (deepr.layers.base.layer method)": [[154, "deepr.layers.base.Layer.forward_as_dict"]], "forward_as_dict() (deepr.layers.combinators.dag method)": [[154, "deepr.layers.combinators.DAG.forward_as_dict"]], "inputs (deepr.layers.base.layer attribute)": [[154, "deepr.layers.base.Layer.inputs"]], "join_heads() (deepr.layers.transformer.selfmultiheadattention method)": [[154, "deepr.layers.transformer.SelfMultiheadAttention.join_heads"]], "key_dtype (deepr.layers.lookup.lookupfromfile attribute)": [[154, "deepr.layers.lookup.LookupFromFile.key_dtype"]], "key_dtype (deepr.layers.lookup.lookupfrommapping attribute)": [[154, "deepr.layers.lookup.LookupFromMapping.key_dtype"]], "layer() (in module deepr.layers.base)": [[154, "deepr.layers.base.layer"]], "mapping (deepr.layers.lookup.lookupfrommapping attribute)": [[154, "deepr.layers.lookup.LookupFromMapping.mapping"]], "n_in (deepr.layers.base.layer attribute)": [[154, "deepr.layers.base.Layer.n_in"]], "n_out (deepr.layers.base.layer attribute)": [[154, "deepr.layers.base.Layer.n_out"]], "name (deepr.layers.base.layer attribute)": [[154, "deepr.layers.base.Layer.name"]], "num_heads (deepr.layers.transformer.selfmultiheadattention attribute)": [[154, "deepr.layers.transformer.SelfMultiheadAttention.num_heads"]], "outputs (deepr.layers.base.layer attribute)": [[154, "deepr.layers.base.Layer.outputs"]], "path (deepr.layers.lookup.lookupfromfile attribute)": [[154, "deepr.layers.lookup.LookupFromFile.path"]], "path (deepr.layers.lookup.lookupindextostring attribute)": [[154, "deepr.layers.lookup.LookupIndexToString.path"]], "residual_connection (deepr.layers.transformer.selfmultiheadattention attribute)": [[154, "deepr.layers.transformer.SelfMultiheadAttention.residual_connection"]], "reuse (deepr.layers.lookup.lookupfromfile attribute)": [[154, "deepr.layers.lookup.LookupFromFile.reuse"]], "reuse (deepr.layers.lookup.lookupfrommapping attribute)": [[154, "deepr.layers.lookup.LookupFromMapping.reuse"]], "reuse (deepr.layers.lookup.lookupindextostring attribute)": [[154, "deepr.layers.lookup.LookupIndexToString.reuse"]], "scaled_dot_attention() (deepr.layers.transformer.selfmultiheadattention method)": [[154, "deepr.layers.transformer.SelfMultiheadAttention.scaled_dot_attention"]], "split_heads() (deepr.layers.transformer.selfmultiheadattention method)": [[154, "deepr.layers.transformer.SelfMultiheadAttention.split_heads"]], "table_initializer_fn (deepr.layers.lookup.lookup attribute)": [[154, "deepr.layers.lookup.Lookup.table_initializer_fn"]], "table_name (deepr.layers.lookup.lookupfromfile attribute)": [[154, "deepr.layers.lookup.LookupFromFile.table_name"]], "table_name (deepr.layers.lookup.lookupfrommapping attribute)": [[154, "deepr.layers.lookup.LookupFromMapping.table_name"]], "table_name (deepr.layers.lookup.lookupindextostring attribute)": [[154, "deepr.layers.lookup.LookupIndexToString.table_name"]], "value_dtype (deepr.layers.lookup.lookupfrommapping attribute)": [[154, "deepr.layers.lookup.LookupFromMapping.value_dtype"]], "vocab_size (deepr.layers.lookup.lookupindextostring attribute)": [[154, "deepr.layers.lookup.LookupIndexToString.vocab_size"]], "dynamic (class in deepr.macros.dynamic)": [[155, "deepr.macros.dynamic.Dynamic"]], "graphiteinit (class in deepr.macros.graphite_init)": [[155, "deepr.macros.graphite_init.GraphiteInit"]], "mlflowinit (class in deepr.macros.mlflow_init)": [[155, "deepr.macros.mlflow_init.MLFlowInit"]], "deepr.macros": [[155, "module-deepr.macros"]], "deepr.macros.dynamic": [[155, "module-deepr.macros.dynamic"]], "deepr.macros.graphite_init": [[155, "module-deepr.macros.graphite_init"]], "deepr.macros.mlflow_init": [[155, "module-deepr.macros.mlflow_init"]], "internal_url_formatter() (in module deepr.macros.mlflow_init)": [[155, "deepr.macros.mlflow_init.internal_url_formatter"]], "standard_url_formatter() (in module deepr.macros.mlflow_init)": [[155, "deepr.macros.mlflow_init.standard_url_formatter"]], "accuracy (class in deepr.metrics.accuracy)": [[156, "deepr.metrics.accuracy.Accuracy"]], "accuracyatk (class in deepr.metrics.accuracy)": [[156, "deepr.metrics.accuracy.AccuracyAtK"]], "decaymean (class in deepr.metrics.mean)": [[156, "deepr.metrics.mean.DecayMean"]], "finitemean (class in deepr.metrics.mean)": [[156, "deepr.metrics.mean.FiniteMean"]], "lastvalue (class in deepr.metrics.core)": [[156, "deepr.metrics.core.LastValue"]], "maxvalue (class in deepr.metrics.core)": [[156, "deepr.metrics.core.MaxValue"]], "mean (class in deepr.metrics.mean)": [[156, "deepr.metrics.mean.Mean"]], "metric (class in deepr.metrics.base)": [[156, "deepr.metrics.base.Metric"]], "stepcounter (class in deepr.metrics.step)": [[156, "deepr.metrics.step.StepCounter"]], "variablevalue (class in deepr.metrics.variable)": [[156, "deepr.metrics.variable.VariableValue"]], "decay_mean_metric() (in module deepr.metrics.mean)": [[156, "deepr.metrics.mean.decay_mean_metric"]], "deepr.metrics": [[156, "module-deepr.metrics"]], "deepr.metrics.accuracy": [[156, "module-deepr.metrics.accuracy"]], "deepr.metrics.base": [[156, "module-deepr.metrics.base"]], "deepr.metrics.core": [[156, "module-deepr.metrics.core"]], "deepr.metrics.mean": [[156, "module-deepr.metrics.mean"]], "deepr.metrics.step": [[156, "module-deepr.metrics.step"]], "deepr.metrics.variable": [[156, "module-deepr.metrics.variable"]], "finite_mean_metric() (in module deepr.metrics.mean)": [[156, "deepr.metrics.mean.finite_mean_metric"]], "get_metric_variable() (in module deepr.metrics.base)": [[156, "deepr.metrics.base.get_metric_variable"]], "get_scalars() (in module deepr.metrics.base)": [[156, "deepr.metrics.base.get_scalars"]], "get_tensors() (in module deepr.metrics.base)": [[156, "deepr.metrics.base.get_tensors"]], "keep_scalars() (in module deepr.metrics.base)": [[156, "deepr.metrics.base.keep_scalars"]], "max_value_metric() (in module deepr.metrics.core)": [[156, "deepr.metrics.core.max_value_metric"]], "name (deepr.metrics.variable.variablevalue attribute)": [[156, "deepr.metrics.variable.VariableValue.name"]], "sanitize_metric_name() (in module deepr.metrics.base)": [[156, "deepr.metrics.base.sanitize_metric_name"]], "optimizers (deepr.optimizers.core.tensorflowoptimizer attribute)": [[157, "deepr.optimizers.core.TensorflowOptimizer.OPTIMIZERS"]], "optimizer (class in deepr.optimizers.base)": [[157, "deepr.optimizers.base.Optimizer"]], "tensorflowoptimizer (class in deepr.optimizers.core)": [[157, "deepr.optimizers.core.TensorflowOptimizer"]], "deepr.optimizers": [[157, "module-deepr.optimizers"]], "deepr.optimizers.base": [[157, "module-deepr.optimizers.base"]], "deepr.optimizers.core": [[157, "module-deepr.optimizers.core"]], "kwargs (deepr.optimizers.core.tensorflowoptimizer attribute)": [[157, "deepr.optimizers.core.TensorflowOptimizer.kwargs"]], "learning_rate (deepr.optimizers.core.tensorflowoptimizer attribute)": [[157, "deepr.optimizers.core.TensorflowOptimizer.learning_rate"]], "optimizer (deepr.optimizers.core.tensorflowoptimizer attribute)": [[157, "deepr.optimizers.core.TensorflowOptimizer.optimizer"]], "predictor (class in deepr.predictors.base)": [[158, "deepr.predictors.base.Predictor"]], "protopredictor (class in deepr.predictors.proto)": [[158, "deepr.predictors.proto.ProtoPredictor"]], "savedmodelpredictor (class in deepr.predictors.saved_model)": [[158, "deepr.predictors.saved_model.SavedModelPredictor"]], "deepr.predictors": [[158, "module-deepr.predictors"]], "deepr.predictors.base": [[158, "module-deepr.predictors.base"]], "deepr.predictors.proto": [[158, "module-deepr.predictors.proto"]], "deepr.predictors.saved_model": [[158, "module-deepr.predictors.saved_model"]], "feed_tensors (deepr.predictors.base.predictor attribute)": [[158, "deepr.predictors.base.Predictor.feed_tensors"]], "feeds (deepr.predictors.proto.protopredictor attribute)": [[158, "deepr.predictors.proto.ProtoPredictor.feeds"]], "feeds (deepr.predictors.saved_model.savedmodelpredictor attribute)": [[158, "deepr.predictors.saved_model.SavedModelPredictor.feeds"]], "fetch_tensors (deepr.predictors.base.predictor attribute)": [[158, "deepr.predictors.base.Predictor.fetch_tensors"]], "fetches (deepr.predictors.proto.protopredictor attribute)": [[158, "deepr.predictors.proto.ProtoPredictor.fetches"]], "fetches (deepr.predictors.saved_model.savedmodelpredictor attribute)": [[158, "deepr.predictors.saved_model.SavedModelPredictor.fetches"]], "get_latest_saved_model() (in module deepr.predictors.saved_model)": [[158, "deepr.predictors.saved_model.get_latest_saved_model"]], "path (deepr.predictors.proto.protopredictor attribute)": [[158, "deepr.predictors.proto.ProtoPredictor.path"]], "path (deepr.predictors.saved_model.savedmodelpredictor attribute)": [[158, "deepr.predictors.saved_model.SavedModelPredictor.path"]], "session (deepr.predictors.base.predictor attribute)": [[158, "deepr.predictors.base.Predictor.session"]], "batch (class in deepr.prepros.core)": [[159, "deepr.prepros.core.Batch"]], "cache (class in deepr.prepros.core)": [[159, "deepr.prepros.core.Cache"]], "filter (class in deepr.prepros.core)": [[159, "deepr.prepros.core.Filter"]], "fromexample (class in deepr.prepros.record)": [[159, "deepr.prepros.record.FromExample"]], "map (class in deepr.prepros.core)": [[159, "deepr.prepros.core.Map"]], "paddedbatch (class in deepr.prepros.core)": [[159, "deepr.prepros.core.PaddedBatch"]], "prefetch (class in deepr.prepros.core)": [[159, "deepr.prepros.core.Prefetch"]], "prepro (class in deepr.prepros.base)": [[159, "deepr.prepros.base.Prepro"]], "preprofn (class in deepr.prepros.base)": [[159, "deepr.prepros.base.PreproFn"]], "repeat (class in deepr.prepros.core)": [[159, "deepr.prepros.core.Repeat"]], "serial (class in deepr.prepros.combinators)": [[159, "deepr.prepros.combinators.Serial"]], "shuffle (class in deepr.prepros.core)": [[159, "deepr.prepros.core.Shuffle"]], "tfrecordsequenceexample (in module deepr.prepros.record)": [[159, "deepr.prepros.record.TFRecordSequenceExample"]], "tableinitializer (class in deepr.prepros.lookup)": [[159, "deepr.prepros.lookup.TableInitializer"]], "take (class in deepr.prepros.core)": [[159, "deepr.prepros.core.Take"]], "toexample (class in deepr.prepros.record)": [[159, "deepr.prepros.record.ToExample"]], "apply() (deepr.prepros.base.prepro method)": [[159, "deepr.prepros.base.Prepro.apply"]], "apply() (deepr.prepros.base.preprofn method)": [[159, "deepr.prepros.base.PreproFn.apply"]], "apply() (deepr.prepros.combinators.serial method)": [[159, "deepr.prepros.combinators.Serial.apply"]], "apply() (deepr.prepros.core.batch method)": [[159, "deepr.prepros.core.Batch.apply"]], "apply() (deepr.prepros.core.cache method)": [[159, "deepr.prepros.core.Cache.apply"]], "apply() (deepr.prepros.core.filter method)": [[159, "deepr.prepros.core.Filter.apply"]], "apply() (deepr.prepros.core.map method)": [[159, "deepr.prepros.core.Map.apply"]], "apply() (deepr.prepros.core.paddedbatch method)": [[159, "deepr.prepros.core.PaddedBatch.apply"]], "apply() (deepr.prepros.core.prefetch method)": [[159, "deepr.prepros.core.Prefetch.apply"]], "apply() (deepr.prepros.core.repeat method)": [[159, "deepr.prepros.core.Repeat.apply"]], "apply() (deepr.prepros.core.shuffle method)": [[159, "deepr.prepros.core.Shuffle.apply"]], "apply() (deepr.prepros.core.take method)": [[159, "deepr.prepros.core.Take.apply"]], "apply() (deepr.prepros.lookup.tableinitializer method)": [[159, "deepr.prepros.lookup.TableInitializer.apply"]], "arrays_to_example() (in module deepr.prepros.record)": [[159, "deepr.prepros.record.arrays_to_example"]], "batch_size (deepr.prepros.core.paddedbatch attribute)": [[159, "deepr.prepros.core.PaddedBatch.batch_size"]], "buffer_size (deepr.prepros.core.prefetch attribute)": [[159, "deepr.prepros.core.Prefetch.buffer_size"]], "buffer_size (deepr.prepros.core.shuffle attribute)": [[159, "deepr.prepros.core.Shuffle.buffer_size"]], "count (deepr.prepros.core.batch attribute)": [[159, "deepr.prepros.core.Batch.count"]], "count (deepr.prepros.core.repeat attribute)": [[159, "deepr.prepros.core.Repeat.count"]], "count (deepr.prepros.core.take attribute)": [[159, "deepr.prepros.core.Take.count"]], "deepr.prepros": [[159, "module-deepr.prepros"]], "deepr.prepros.base": [[159, "module-deepr.prepros.base"]], "deepr.prepros.combinators": [[159, "module-deepr.prepros.combinators"]], "deepr.prepros.core": [[159, "module-deepr.prepros.core"]], "deepr.prepros.lookup": [[159, "module-deepr.prepros.lookup"]], "deepr.prepros.record": [[159, "module-deepr.prepros.record"]], "fields (deepr.prepros.core.paddedbatch attribute)": [[159, "deepr.prepros.core.PaddedBatch.fields"]], "filename (deepr.prepros.core.cache attribute)": [[159, "deepr.prepros.core.Cache.filename"]], "fuse (deepr.prepros.combinators.serial attribute)": [[159, "deepr.prepros.combinators.Serial.fuse"]], "map_func (deepr.prepros.core.map attribute)": [[159, "deepr.prepros.core.Map.map_func"]], "modes (deepr.prepros.core.batch attribute)": [[159, "deepr.prepros.core.Batch.modes"]], "modes (deepr.prepros.core.filter attribute)": [[159, "deepr.prepros.core.Filter.modes"]], "modes (deepr.prepros.core.map attribute)": [[159, "deepr.prepros.core.Map.modes"]], "modes (deepr.prepros.core.paddedbatch attribute)": [[159, "deepr.prepros.core.PaddedBatch.modes"]], "modes (deepr.prepros.core.repeat attribute)": [[159, "deepr.prepros.core.Repeat.modes"]], "modes (deepr.prepros.core.shuffle attribute)": [[159, "deepr.prepros.core.Shuffle.modes"]], "num_parallel_calls (deepr.prepros.core.map attribute)": [[159, "deepr.prepros.core.Map.num_parallel_calls"]], "on_dict (deepr.prepros.core.filter attribute)": [[159, "deepr.prepros.core.Filter.on_dict"]], "on_dict (deepr.prepros.core.map attribute)": [[159, "deepr.prepros.core.Map.on_dict"]], "predicate (deepr.prepros.core.filter attribute)": [[159, "deepr.prepros.core.Filter.predicate"]], "prepro() (in module deepr.prepros.base)": [[159, "deepr.prepros.base.prepro"]], "preprocessors (deepr.prepros.combinators.serial attribute)": [[159, "deepr.prepros.combinators.Serial.preprocessors"]], "tf_map_func (deepr.prepros.core.map property)": [[159, "deepr.prepros.core.Map.tf_map_func"]], "tf_predicate (deepr.prepros.core.filter property)": [[159, "deepr.prepros.core.Filter.tf_predicate"]], "update (deepr.prepros.core.map attribute)": [[159, "deepr.prepros.core.Map.update"]], "datasetreader (class in deepr.readers.base)": [[160, "deepr.readers.base.DatasetReader"]], "generatorreader (class in deepr.readers.generator)": [[160, "deepr.readers.generator.GeneratorReader"]], "reader (class in deepr.readers.base)": [[160, "deepr.readers.base.Reader"]], "tfrecordreader (class in deepr.readers.record)": [[160, "deepr.readers.record.TFRecordReader"]], "as_dataset() (deepr.readers.base.datasetreader method)": [[160, "deepr.readers.base.DatasetReader.as_dataset"]], "as_dataset() (deepr.readers.base.reader method)": [[160, "deepr.readers.base.Reader.as_dataset"]], "as_dataset() (deepr.readers.generator.generatorreader method)": [[160, "deepr.readers.generator.GeneratorReader.as_dataset"]], "as_dataset() (deepr.readers.record.tfrecordreader method)": [[160, "deepr.readers.record.TFRecordReader.as_dataset"]], "bytes_feature() (in module deepr.readers.record)": [[160, "deepr.readers.record.bytes_feature"]], "compression_type (deepr.readers.record.tfrecordreader property)": [[160, "deepr.readers.record.TFRecordReader.compression_type"]], "deepr.readers": [[160, "module-deepr.readers"]], "deepr.readers.base": [[160, "module-deepr.readers.base"]], "deepr.readers.generator": [[160, "module-deepr.readers.generator"]], "deepr.readers.record": [[160, "module-deepr.readers.record"]], "filenames (deepr.readers.record.tfrecordreader property)": [[160, "deepr.readers.record.TFRecordReader.filenames"]], "float_feature() (in module deepr.readers.record)": [[160, "deepr.readers.record.float_feature"]], "from_dataset() (in module deepr.readers.base)": [[160, "deepr.readers.base.from_dataset"]], "generator_fn (deepr.readers.generator.generatorreader attribute)": [[160, "deepr.readers.generator.GeneratorReader.generator_fn"]], "int64_feature() (in module deepr.readers.record)": [[160, "deepr.readers.record.int64_feature"]], "int64_feature_list() (in module deepr.readers.record)": [[160, "deepr.readers.record.int64_feature_list"]], "num_parallel_calls (deepr.readers.record.tfrecordreader attribute)": [[160, "deepr.readers.record.TFRecordReader.num_parallel_calls"]], "num_parallel_reads (deepr.readers.record.tfrecordreader attribute)": [[160, "deepr.readers.record.TFRecordReader.num_parallel_reads"]], "output_shapes (deepr.readers.generator.generatorreader attribute)": [[160, "deepr.readers.generator.GeneratorReader.output_shapes"]], "output_types (deepr.readers.generator.generatorreader attribute)": [[160, "deepr.readers.generator.GeneratorReader.output_types"]], "path (deepr.readers.record.tfrecordreader attribute)": [[160, "deepr.readers.record.TFRecordReader.path"]], "shuffle (deepr.readers.record.tfrecordreader attribute)": [[160, "deepr.readers.record.TFRecordReader.shuffle"]], "field (class in deepr.utils.field)": [[161, "deepr.utils.field.Field"]], "tablecontext (class in deepr.utils.tables)": [[161, "deepr.utils.tables.TableContext"]], "tensortype() (in module deepr.utils.field)": [[161, "deepr.utils.field.TensorType"]], "active() (deepr.utils.tables.tablecontext class method)": [[161, "deepr.utils.tables.TableContext.active"]], "as_placeholder() (deepr.utils.field.field method)": [[161, "deepr.utils.field.Field.as_placeholder"]], "batch_shape (deepr.utils.field.field property)": [[161, "deepr.utils.field.Field.batch_shape"]], "chunks() (in module deepr.utils.iter)": [[161, "deepr.utils.iter.chunks"]], "clear_run() (in module deepr.utils.mlflow)": [[161, "deepr.utils.mlflow.clear_run"]], "close() (deepr.utils.tables.tablecontext method)": [[161, "deepr.utils.tables.TableContext.close"]], "deepr.utils": [[161, "module-deepr.utils"]], "deepr.utils.broadcasting": [[161, "module-deepr.utils.broadcasting"]], "deepr.utils.checkpoint": [[161, "module-deepr.utils.checkpoint"]], "deepr.utils.datastruct": [[161, "module-deepr.utils.datastruct"]], "deepr.utils.exceptions": [[161, "module-deepr.utils.exceptions"]], "deepr.utils.field": [[161, "module-deepr.utils.field"]], "deepr.utils.graph": [[161, "module-deepr.utils.graph"]], "deepr.utils.graphite": [[161, "module-deepr.utils.graphite"]], "deepr.utils.iter": [[161, "module-deepr.utils.iter"]], "deepr.utils.mlflow": [[161, "module-deepr.utils.mlflow"]], "deepr.utils.tables": [[161, "module-deepr.utils.tables"]], "deepr.utils.tf2xla_pb2": [[161, "module-deepr.utils.tf2xla_pb2"]], "deepr.utils.uuid": [[161, "module-deepr.utils.uuid"]], "default (deepr.utils.field.field attribute)": [[161, "deepr.utils.field.Field.default"]], "dict_to_item() (in module deepr.utils.datastruct)": [[161, "deepr.utils.datastruct.dict_to_item"]], "download_artifacts() (in module deepr.utils.mlflow)": [[161, "deepr.utils.mlflow.download_artifacts"]], "dtype (deepr.utils.field.field attribute)": [[161, "deepr.utils.field.Field.dtype"]], "feature_specs (deepr.utils.field.field property)": [[161, "deepr.utils.field.Field.feature_specs"]], "get() (deepr.utils.tables.tablecontext method)": [[161, "deepr.utils.tables.TableContext.get"]], "get_by_name() (in module deepr.utils.graph)": [[161, "deepr.utils.graph.get_by_name"]], "get_feedable_tensors() (in module deepr.utils.graph)": [[161, "deepr.utils.graph.get_feedable_tensors"]], "get_fetchable_tensors() (in module deepr.utils.graph)": [[161, "deepr.utils.graph.get_fetchable_tensors"]], "get_sender() (in module deepr.utils.graphite)": [[161, "deepr.utils.graphite.get_sender"]], "handle_exceptions() (in module deepr.utils.exceptions)": [[161, "deepr.utils.exceptions.handle_exceptions"]], "import_graph_def() (in module deepr.utils.graph)": [[161, "deepr.utils.graph.import_graph_def"]], "index_to_string_table_from_file() (in module deepr.utils.tables)": [[161, "deepr.utils.tables.index_to_string_table_from_file"]], "is_active() (deepr.utils.tables.tablecontext class method)": [[161, "deepr.utils.tables.TableContext.is_active"]], "is_featurizable() (deepr.utils.field.field method)": [[161, "deepr.utils.field.Field.is_featurizable"]], "is_sparse() (deepr.utils.field.field method)": [[161, "deepr.utils.field.Field.is_sparse"]], "item_to_dict() (in module deepr.utils.datastruct)": [[161, "deepr.utils.datastruct.item_to_dict"]], "log_dict() (in module deepr.utils.mlflow)": [[161, "deepr.utils.mlflow.log_dict"]], "log_metric() (in module deepr.utils.graphite)": [[161, "deepr.utils.graphite.log_metric"]], "log_metrics() (in module deepr.utils.graphite)": [[161, "deepr.utils.graphite.log_metrics"]], "make_same_shape() (in module deepr.utils.broadcasting)": [[161, "deepr.utils.broadcasting.make_same_shape"]], "msb_lsb_to_str() (in module deepr.utils.uuid)": [[161, "deepr.utils.uuid.msb_lsb_to_str"]], "name (deepr.utils.field.field attribute)": [[161, "deepr.utils.field.Field.name"]], "progress() (in module deepr.utils.iter)": [[161, "deepr.utils.iter.progress"]], "save_variables_in_ckpt() (in module deepr.utils.checkpoint)": [[161, "deepr.utils.checkpoint.save_variables_in_ckpt"]], "sequence (deepr.utils.field.field attribute)": [[161, "deepr.utils.field.Field.sequence"]], "set() (deepr.utils.tables.tablecontext method)": [[161, "deepr.utils.tables.TableContext.set"]], "set_or_create_experiment() (in module deepr.utils.mlflow)": [[161, "deepr.utils.mlflow.set_or_create_experiment"]], "shape (deepr.utils.field.field attribute)": [[161, "deepr.utils.field.Field.shape"]], "startswith() (deepr.utils.field.field method)": [[161, "deepr.utils.field.Field.startswith"]], "str_to_msb_lsb() (in module deepr.utils.uuid)": [[161, "deepr.utils.uuid.str_to_msb_lsb"]], "table_from_file() (in module deepr.utils.tables)": [[161, "deepr.utils.tables.table_from_file"]], "table_from_mapping() (in module deepr.utils.tables)": [[161, "deepr.utils.tables.table_from_mapping"]], "to_feature() (deepr.utils.field.field method)": [[161, "deepr.utils.field.Field.to_feature"]], "to_flat_tuple() (in module deepr.utils.datastruct)": [[161, "deepr.utils.datastruct.to_flat_tuple"]], "deepr.vocab": [[162, "module-deepr.vocab"]], "deepr.vocab.base": [[162, "module-deepr.vocab.base"]], "read() (in module deepr.vocab.base)": [[162, "deepr.vocab.base.read"]], "size() (in module deepr.vocab.base)": [[162, "deepr.vocab.base.size"]], "write() (in module deepr.vocab.base)": [[162, "deepr.vocab.base.write"]], "tfrecordwriter (class in deepr.writers.record)": [[163, "deepr.writers.record.TFRecordWriter"]], "writer (class in deepr.writers.base)": [[163, "deepr.writers.base.Writer"]], "deepr.writers": [[163, "module-deepr.writers"]], "deepr.writers.base": [[163, "module-deepr.writers.base"]], "deepr.writers.record": [[163, "module-deepr.writers.record"]], "write() (deepr.writers.base.writer method)": [[163, "deepr.writers.base.Writer.write"]], "write() (deepr.writers.record.tfrecordwriter method)": [[163, "deepr.writers.record.TFRecordWriter.write"]]}})